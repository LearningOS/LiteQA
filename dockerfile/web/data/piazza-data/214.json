{"result": {"history_size": 1, "folders": ["quiz9"], "nr": 214, "data": {"embed_links": []}, "created": "2015-03-30T15:12:28Z", "bucket_order": 3, "no_answer_followup": 1, "change_log": [{"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-03-30T15:12:28Z", "data": "i7w0lgieijd3yg", "type": "create"}, {"to": "i7w0lgibx873yf", "uid": "hrhsj9t1wSn", "anon": "no", "when": "2015-03-30T15:50:54Z", "type": "followup"}, {"to": "i7w0lgibx873yf", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T03:54:37Z", "data": "i7y79fbumuj2g5", "type": "i_answer"}, {"to": "i7w0lgibx873yf", "anon": "stud", "when": "2015-04-05T02:14:02Z", "type": "followup", "uid_a": "a_0"}, {"to": "i7w0lgibx873yf", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-05T02:19:35Z", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "full", "when": "2015-04-08T07:01:49Z", "type": "feedback", "uid_a": "a_1"}, {"to": "i7w0lgibx873yf", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-09T01:17:02Z", "type": "feedback"}, {"to": "i7w0lgibx873yf", "anon": "stud", "when": "2015-04-11T07:36:06Z", "type": "feedback", "uid_a": "a_0"}, {"to": "i7w0lgibx873yf", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-11T14:55:27Z", "type": "feedback"}, {"anon": "no", "uid": "it2wrxu13f13sy", "to": "i7w0lgibx873yf", "type": "feedback", "when": "2018-03-27T02:27:27Z"}, {"anon": "no", "uid": "it2wrxu13f13sy", "to": "i7w0lgibx873yf", "type": "followup", "when": "2018-03-27T04:07:24Z"}, {"anon": "full", "to": "i7w0lgibx873yf", "type": "followup", "when": "2019-07-22T14:46:18Z", "uid_a": "a_2"}, {"anon": "no", "uid": "kfkyiskaiew3fx", "to": "i7w0lgibx873yf", "type": "feedback", "when": "2020-10-01T11:42:11Z", "cid": "kfqr0y4pjbw6nh"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "时钟置换算法存在的Belady现象的反例&#xff1f;", "created": "2015-03-30T15:12:28Z", "content": "<p>我认为时钟置换算法是存在belady现象的。原因是&#xff0c;它不具备LRU的特殊栈特征。构造反例的思路是&#xff0c;分配指定数目的物理页面给一个进程&#xff0c;然后构造一个访问序列&#xff0c;你换出哪个页面&#xff0c;下一次就访问它。那么&#xff0c;对于这个访问序列&#xff0c;少一个物理页面时&#xff0c;它的缺页次数应该会少。</p>\n<p></p>\n<p>请有兴趣的同学尝试构造一个例子&#xff0c;并在这里回复。</p>"}], "type": "question", "tags": ["instructor-question", "quiz9"], "tag_good": [{"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 266, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p>", "created": "2015-03-30T15:50:54Z", "bucket_order": 301, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "hrhsj9t1wSn", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7w1yvct1nzjs", "updated": "2015-03-30T15:50:54Z", "config": {}}, {"history_size": 1, "folders": [], "data": {"embed_links": []}, "created": "2015-04-01T03:54:37Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "青枫14", "endorser": {}, "admin": false, "photo": null, "id": "ie7xy513unw1q4", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "zhuyanruy", "endorser": {}, "admin": false, "photo": null, "id": "k24l5078f2h1ph", "photo_url": null, "us": false, "facebook_id": null}, {"role": "student", "name": "JIE LI", "endorser": {}, "admin": false, "photo": null, "id": "k5m3s6x6x6y5my", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "", "created": "2015-04-01T03:54:37Z", "content": "<p>此问题也许会再次在某个地方出现。:)</p>"}], "type": "i_answer", "tag_endorse_arr": ["ie7xy513unw1q4", "k24l5078f2h1ph", "k5m3s6x6x6y5my"], "children": [], "id": "i7y79fasipm2g4", "config": {}, "is_tag_endorse": false}, {"anon": "stud", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>因如果所有页的访问位都为1时&#xff0c;clock算法将退化为FIFO&#xff0c;可以构造如下序列</p>\n<p>a, b, c, d, a, b, e, a, b, c, d, e</p>\n<p>当物理页帧为3时&#xff0c;缺页次数为9次&#xff0c;当物理页帧为4时&#xff0c;缺页次数为10次。</p>", "created": "2015-04-05T02:14:01Z", "bucket_order": 300, "bucket_name": "Week 4/5 - 4/11", "type": "followup", "tag_good": [], "uid_a": "a_0", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>很好的解决思路。</p>\n<p></p>\n<p>细节还需要确认一下。如果可能&#xff0c;请给出完整的算法处理过程描述。</p>", "created": "2015-04-05T02:19:35Z", "bucket_order": 300, "bucket_name": "Week 4/5 - 4/11", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "i83tmmmanwz73i", "updated": "2015-04-05T02:19:35Z", "config": {}}, {"anon": "full", "folders": [], "data": {"embed_links": null}, "subject": "<p>对题主的看法我有几点不认同&#xff1a;</p>\n<p>1)感觉clock不能退化为FIFO&#xff0c;但是没有证明出来</p>\n<p>2)并不是说算法退化为FIFO之后就会造成belady&#xff0c;LRU在一定序列下可以退化为FIFO&#xff0c;但是造成他退化的那种访问序列并不能产生belady异常&#xff0c;能让FIFO退化的序列特征应该是系统频繁访问刚被置换出去的页&#xff0c;与FIFO的置换思路不吻合所以导致belady</p>\n<p>3)我试了一下题主给出的测例&#xff0c;也没有出现bealdy异常&#xff0c;但是不排除我算错的可能</p>", "created": "2015-04-08T07:01:49Z", "bucket_order": 300, "bucket_name": "Week 4/5 - 4/11", "type": "feedback", "tag_good": [], "uid_a": "a_1", "children": [], "tag_good_arr": [], "id": "i88e158ii7621y", "updated": "2015-04-08T07:01:49Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>好评。</p>\n<p></p>\n<p>你说的是对的&#xff0c;FIFO也并不是在所有情况下都一定会出现belady现象的。</p>\n<p></p>\n<p>请继续尝试给出可能的反例。</p>", "created": "2015-04-09T01:17:02Z", "bucket_order": 300, "bucket_name": "Week 4/5 - 4/11", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "i89h5lqp4yg6ei", "updated": "2015-04-09T01:17:02Z", "config": {}}, {"anon": "stud", "folders": [], "data": {"embed_links": null}, "subject": "<p><strong>依据上面的access pattern&#xff0c;访问过程如下</strong></p>\n<p><strong>1.当页面大小为3时</strong></p>\n<p><strong>access a: miss. Memory:[(&#39;a&#39;, 1)] head = 1</strong><br /><strong>access b: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 2</strong><br /><strong>access c: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0</strong><br /><strong>access d: miss. swap out a Memory:[(&#39;d&#39;, 1), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1</strong><br /><strong>access a: miss. swap out b Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 1), (&#39;c&#39;, 0)] head = 2</strong><br /><strong>access b: miss. swap out c Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0</strong><br /><strong>access e: miss. swap out d Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 0), (&#39;b&#39;, 0)] head = 1</strong><br /><strong>access a: hit! Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 0)] head = 1</strong><br /><strong>access b: hit! Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 1</strong><br /><strong>access c: miss. swap out a Memory:[(&#39;e&#39;, 0), (&#39;c&#39;, 1), (&#39;b&#39;, 0)] head = 2</strong><br /><strong>access d: miss. swap out b Memory:[(&#39;e&#39;, 0), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0</strong><br /><strong>access e: hit! Memory:[(&#39;e&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0</strong><br /><strong>miss = 9</strong></p>\n<p></p>\n<p><strong>2.当页面大小为4时</strong></p>\n<p><strong>access a: miss. Memory:[(&#39;a&#39;, 1)] head = 1<br />access b: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 2<br />access c: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 3<br />access d: miss. Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access a: hit! Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access b: hit! Memory:[(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access e: miss. swap out a Memory:[(&#39;e&#39;, 1), (&#39;b&#39;, 0), (&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 1<br />access a: miss. swap out b Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 2<br />access b: miss. swap out c Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;d&#39;, 0)] head = 3<br />access c: miss. swap out d Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. swap out e Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 0), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1<br />access e: miss. swap out a Memory:[(&#39;d&#39;, 1), (&#39;e&#39;, 1), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 2<br />miss = 10</strong></p>\n<p><strong></strong></p>\n<p><b>以上为程序给出的结果&#xff0c;确实出现了belady异常。</b></p>\n<p><b>不知道是否有算错的地方&#xff0c;还是理解有问题&#xff0c;请指正。</b></p>", "created": "2015-04-11T07:36:06Z", "bucket_order": 300, "bucket_name": "Week 4/5 - 4/11", "type": "feedback", "tag_good": [], "uid_a": "a_0", "children": [], "tag_good_arr": [], "id": "i8cpksd1ysn4uu", "updated": "2015-04-11T07:36:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>很严谨的回答。我确认你的回答是正确的。</p>", "created": "2015-04-11T14:55:27Z", "bucket_order": 300, "bucket_name": "Week 4/5 - 4/11", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "i8d59snzs1b2xf", "updated": "2015-04-11T14:55:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>楼上算法和mooc上的算法不一致&#xff0c;但不影响最终结果。正确执行结果应该如下&#xff1a;</p>\n<p>1.当页面大小为3时<br />access a: miss. Memory:[^(&#39;a&#39;, 1)] head = 0<br />access b: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0<br />access c: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. swap out a Memory:[(&#39;d&#39;, 1), ^(&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1<br />access a: miss. swap out b Memory:[(&#39;d&#39;, 1), (&#39;a&#39;, 1), ^(&#39;c&#39;, 0)] head = 2<br />access b: miss. swap out c Memory:[^(&#39;d&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0<br />access e: miss. swap out d Memory:[(&#39;e&#39;, 1), ^(&#39;a&#39;, 0), (&#39;b&#39;, 0)] head = 1<br />access a: hit! Memory:[(&#39;e&#39;, 1), ^(&#39;a&#39;, 1), (&#39;b&#39;, 0)] head = 1<br />access b: hit! Memory:[(&#39;e&#39;, 1), ^(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 1<br />access c: miss. swap out a Memory:[(&#39;e&#39;, 0), (&#39;c&#39;, 1), ^(&#39;b&#39;, 0)] head = 2<br />access d: miss. swap out b Memory:[^(&#39;e&#39;, 0), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access e: hit! Memory:[^(&#39;e&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />miss = 9<br />2.当页面大小为4时<br />access a: miss. Memory:[^(&#39;a&#39;, 1)] head = 0<br />access b: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1)] head = 0<br />access c: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access a: hit! Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access b: hit! Memory:[^(&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1), (&#39;d&#39;, 1)] head = 0<br />access e: miss. swap out a Memory:[(&#39;e&#39;, 1), ^(&#39;b&#39;, 0), (&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 1<br />access a: miss. swap out b Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), ^(&#39;c&#39;, 0), (&#39;d&#39;, 0)] head = 2<br />access b: miss. swap out c Memory:[(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), ^(&#39;d&#39;, 0)] head = 3<br />access c: miss. swap out d Memory:[^(&#39;e&#39;, 1), (&#39;a&#39;, 1), (&#39;b&#39;, 1), (&#39;c&#39;, 1)] head = 0<br />access d: miss. swap out e Memory:[(&#39;d&#39;, 1), ^(&#39;a&#39;, 0), (&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 1<br />access e: miss. swap out a Memory:[(&#39;d&#39;, 1), (&#39;e&#39;, 1), ^(&#39;b&#39;, 0), (&#39;c&#39;, 0)] head = 2<br />miss = 10</p>", "created": "2018-03-27T02:27:27Z", "bucket_order": 145, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "it2wrxu13f13sy", "children": [], "tag_good_arr": [], "id": "jf91jpkpwoj4bn", "updated": "2018-03-27T02:27:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<div>我的理解是Anonymous Scale同学的算法与mooc算法一致&#xff0c;mooc只是省略了最初几步的计算&#xff0c;但如果补全&#xff0c;与Anonymous Scale同学所示一致。而Lu Cheng同学的算法最初几步执行有误。<br />\n<div></div>\n</div>\n<div>欢迎大家批评指正&#xff01;</div>", "created": "2020-10-01T11:42:11Z", "bucket_order": 14, "bucket_name": "Week 9/27 - 10/3", "type": "feedback", "tag_good": [], "uid": "kfkyiskaiew3fx", "children": [], "tag_good_arr": [], "id": "kfqr0y4pjbw6nh", "updated": "2020-10-01T11:42:11Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i83tfh8kx44po", "updated": "2015-04-05T02:14:01Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>根据上面同学的启发&#xff0c;对于大小为<strong>n</strong>和大小为<strong>n&#43;1</strong>的页面&#xff0c;一般地&#xff0c;可以构造如下反例&#xff1a;&#xff08;设最初的页表为空&#xff09;</p>\n<p><strong>a1a2..an&#43;1a1a2an&#43;2a1a2...an&#43;2</strong></p>\n<p></p>\n<p></p>\n<p></p>\n<p>access a1: miss. Memory:[^(&#39;a1&#39;, 1)] head = 0<br />access a2: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1)] head = 0<br />......(all miss)<br />access an: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1)] head = 0<br />access an&#43;1: miss. swap out a1 Memory:[(&#39;an&#43;1&#39;, 1), ^(&#39;a2&#39;, 0), ..., (&#39;an&#39;, 0)] head = 1<br />access a1: miss. swap out a2 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), ^(&#39;a3&#39;, 0), ..., (&#39;an&#39;, 0)] head = 2<br />access a2: miss. swap out a3 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ^(&#39;a4&#39;, 0), ..., (&#39;an&#39;, 0)] head = 3<br />access an&#43;2: miss. swap out a4 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a5&#39;, 0), ..., (&#39;an&#39;, 0)] head = 4<br />access a1: hit! Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a5&#39;, 0), ..., (&#39;an&#39;, 0)] head = 4<br />access a2: hit! Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a5&#39;, 0), ..., (&#39;an&#39;, 0)] head = 4<br />access a3: miss. swap out a5 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), (&#39;a3&#39;, 1), ^(&#39;a6&#39;, 0), ..., (&#39;an&#39;, 0)] head = 5<br />......(all miss)<br />access an-2: miss. swap out an Memory:[^(&#39;an&#43;1&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1), (&#39;an&#43;2&#39;, 1), (&#39;a3&#39;, 1), ..., (&#39;an-2&#39;, 1)] head = 0<br />access an-1: miss. swap out an&#43;1 Memory:[(&#39;an-1&#39;, 1), ^(&#39;a1&#39;, 0), (&#39;a2&#39;, 0), (&#39;an&#43;2&#39;, 0), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 1<br />access an: miss. swap out a1 Memory:[(&#39;an-1&#39;, 1), (&#39;an&#39;, 1), ^(&#39;a2&#39;, 0), (&#39;an&#43;2&#39;, 0), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 2<br />access an&#43;1: miss. swap out a2 Memory:[(&#39;an-1&#39;, 1), (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1), ^(&#39;an&#43;2&#39;, 0), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 3<br />access an&#43;2: hit! Memory:[(&#39;an-1&#39;, 1), (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1), ^(&#39;an&#43;2&#39;, 1), (&#39;a3&#39;, 0), ..., (&#39;an-2&#39;, 0)] head = 3</p>\n<p></p>\n<p>hit 3 times.</p>\n<p></p>\n<p>对于大小为<strong>n&#43;1</strong>的页面&#xff1a;</p>\n<p>access a1: miss. Memory:[^(&#39;a1&#39;, 1)] head = 0<br />access a2: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1)] head = 0<br />......(all miss)<br />access an: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1)] head = 0<br />access an&#43;1: miss. Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1)] head = 0<br />access a1: hit! Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1)] head = 0<br />access a2: hit! Memory:[^(&#39;a1&#39;, 1), (&#39;a2&#39;, 1), ..., (&#39;an&#39;, 1), (&#39;an&#43;1&#39;, 1)] head = 0<br />access an&#43;2: miss. swap out a1 Memory:[(&#39;an&#43;2&#39;, 1), ^(&#39;a2&#39;, 0), ..., (&#39;an&#39;, 0), (&#39;an&#43;1&#39;, 0)] head = 1<br />access a1: miss. swap out a2 Memory:[(&#39;an&#43;2&#39;, 1), (&#39;a1&#39;, 1), ^(&#39;a3&#39;, 0) ..., (&#39;an&#39;, 0), (&#39;an&#43;1&#39;, 0)] head = 2<br />......(all miss)<br />access an: miss. swap out an&#43;1 Memory:[^(&#39;an&#43;2&#39;, 1), (&#39;a1&#39;, 1), (&#39;a2&#39;, 1) ..., (&#39;an-1&#39;, 1), (&#39;an&#39;, 1)] head = 0<br />access an&#43;1: miss. swap out an&#43;2 Memory:[(&#39;an&#43;1&#39;, 1), ^(&#39;a1&#39;, 0), (&#39;a2&#39;, 0) ..., (&#39;an-1&#39;, 0), (&#39;an&#39;, 0)] head = 1<br />access an&#43;2: miss. swap out a1 Memory:[(&#39;an&#43;1&#39;, 1), (&#39;an&#43;2&#39;, 1), ^(&#39;a2&#39;, 0) ..., (&#39;an-1&#39;, 0), (&#39;an&#39;, 0)] head = 2</p>\n<p>hit twice.</p>\n<p></p>\n<p>我并没有找到一种反例的通式&#xff0c;使得对于任意正整数k&#xff0c;都可以找到某一个序列&#xff0c;使得n的hit数 - n&#43;1的hit数 &gt; k。只有找到这样的序列通式&#xff0c;才可以说明clock置换算法的Belady现象是严重的。&#xff08;否则像上面这个反例&#xff0c;只能说明稍微有点性能下降&#xff09;</p>\n<p></p>\n<p></p>", "created": "2018-03-27T04:07:24Z", "bucket_order": 145, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "it2wrxu13f13sy", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "jf9548u5u212y0", "updated": "2018-03-27T04:07:24Z", "config": {}}, {"anon": "full", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "这种构造貌似在n=2的时候无效", "created": "2019-07-22T14:46:18Z", "bucket_order": 76, "bucket_name": "Week 7/21 - 7/27", "type": "followup", "tag_good": [], "uid_a": "a_2", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jyei6h4wn6m5dg", "updated": "2019-07-22T14:46:18Z", "config": {}}], "tag_good_arr": ["hcrrjuyequh4bt"], "no_answer": 0, "id": "i7w0lgibx873yf", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 12, "num_favorites": 6, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167485952, "default_anonymity": "no"}, "error": null, "aid": "kyuzhukg66e3tn"}