{"result": {"folders": ["2018", "课堂问答", "lecture5"], "nr": 1150, "data": {"embed_links": []}, "created": "2018-03-12T02:12:52Z", "bucket_order": 3, "no_answer_followup": 9, "change_log": [{"anon": "no", "uid": "hdjonbiyfs62ie", "data": "jenlf67nvg46wq", "type": "create", "when": "2018-03-12T02:12:52Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T01:19:03Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T01:20:15Z"}, {"anon": "no", "uid": "ipy6fzzsoa55lc", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T01:20:24Z"}, {"anon": "no", "uid": "ipy6fzzsoa55lc", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-13T01:20:53Z"}, {"anon": "no", "uid": "it1idvlzv8smt", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T01:21:33Z"}, {"anon": "no", "uid": "je2ib3svwgf6af", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T01:22:37Z"}, {"anon": "no", "uid": "it1eci1w5on4y9", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T01:25:06Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-13T06:31:02Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2018-03-13T07:00:09Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-13T08:01:54Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-16T01:15:24Z"}, {"anon": "no", "uid": "je2ib3svwgf6af", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-16T02:32:26Z"}, {"anon": "no", "uid": "ipy6fzzsoa55lc", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-16T04:49:01Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-16T05:05:13Z"}, {"anon": "no", "uid": "it1eci1w5on4y9", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2018-03-16T05:19:57Z"}, {"anon": "no", "uid": "jshne0d1gvw4mr", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2019-03-11T03:14:16Z"}, {"anon": "no", "uid": "jshndyvxw5h4bg", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2019-03-11T03:14:57Z"}, {"anon": "no", "uid": "jshndz5tgxj4bq", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2019-03-11T03:16:36Z"}, {"anon": "no", "uid": "jsl9bhefCIIS", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2019-03-11T03:18:58Z"}, {"anon": "no", "uid": "jsiobmer9hum", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2019-03-11T03:19:10Z"}, {"anon": "no", "uid": "jslil0sr69Ea", "to": "jenlf67ke6k6wp", "type": "followup", "when": "2019-03-11T03:19:34Z"}, {"anon": "no", "uid": "jshne0d1gvw4mr", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2019-03-12T16:07:32Z"}, {"anon": "no", "uid": "jslil0sr69Ea", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2019-03-13T04:19:56Z"}, {"anon": "no", "uid": "jshndz5tgxj4bq", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2019-03-13T08:17:48Z"}, {"anon": "no", "uid": "jshndyvxw5h4bg", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2019-03-13T08:29:25Z"}, {"anon": "no", "uid": "jsl9bhefCIIS", "to": "jenlf67ke6k6wp", "type": "feedback", "when": "2019-03-13T16:24:22Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2018春季-第五讲课堂实践练习", "created": "2018-03-12T02:12:52Z", "content": "<p>观察最先匹配、最佳匹配和最差匹配这几种动态分区分配算法的工作过程&#xff0c;并选择一个例子进行分析分析整个工作过程中的分配和释放操作对维护数据结构的影响和原因。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/03-1-spoc-discussion.md#%E8%AF%BE%E5%A0%82%E5%AE%9E%E8%B7%B5\">https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/03-1-spoc-discussion.md#%E8%AF%BE%E5%A0%82%E5%AE%9E%E8%B7%B5</a></p>\n<p></p>\n<p></p>\n<p></p>"}], "type": "note", "tags": ["2018", "instructor-note", "lecture5", "课堂问答"], "tag_good": [], "unique_views": 117, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>魏钧宇 2015011263</p>\n<p>最先匹配</p>", "created": "2018-03-13T01:19:03Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>最先匹配分析&#xff1a;</p>\n<p>在下面的例子中&#xff0c;我采用的配置是&#xff1a;</p>\n<p>Random Seed : 329</p>\n<p>Heap Size : 1000 Bytes</p>\n<p>Heap Base : 1000 Heap</p>\n<p>Header Size : 23</p>\n<p>Bytes Alignment : 4 Bytes</p>\n<p>List : Addrsort list</p>\n<p>Policy : First matching</p>\n<p>Do not Coalesce the free list</p>\n<p></p>\n<p>执行的操作如下&#xff1a;</p>\n<p>&#43;4 : 申请一块4字节的空间 -&gt; pr0</p>\n<p>&#43;3 : 申请一块3字节的空间 -&gt; pr1</p>\n<p>-0 : 释放pr0</p>\n<p>-1 : 释放pr1</p>\n<p>&#43;1 : 申请一块1字节的空间 -&gt; pr2</p>\n<p>-2 : 释放pr2</p>\n<p>&#43;8 : 申请一块8字节的空间 -&gt; pr3</p>\n<p>&#43;2 : 申请一块1字节的空间 -&gt; pr4</p>\n<p></p>\n<p>对输出的解释如下&#xff1a; &#43;4 申请一块4字节的分区&#xff0c;从原来1000字节的位置切除27字节(23 &#43; 4)的分区&#xff0c;此时剩余分区从1027开始 &#43;3 申请一块3字节的分区&#xff0c;由于4字节对齐&#xff0c;可最终获得4字节的空间&#xff0c;从原来1027字节的位置切除27字节(23 &#43; 4)的分区&#xff0c;此时剩余分区从1054开始 -0 回收第一次分配的分区&#xff0c;此时空闲分区列表中有两项 -1 回收第二次分配的分区&#xff0c;此时空闲分区列表中有三项 &#43;1 同3字节的分区一样&#xff0c;由于4字节对齐&#xff0c;可最终获得4字节的空间&#xff0c;此时空闲分区有三个&#xff0c;由于最先匹配的缘故&#xff0c;选择了第一个空闲分区 -2 回收第三次分配的分区&#xff0c;此时空闲分区列表中有三项 &#43;8 申请一块8字节的分区&#xff0c;加上堆头需要31字节空间&#xff0c;便利此时根据地址排序的列表&#xff0c;知道最后一项才找到合适的分区&#xff0c;在这个合适的分区中切除31字节&#xff0c;剩下的部分从1085开始(1054 &#43; 31) &#43;2 申请一块2字节的分区&#xff0c;和原来一样&#xff0c;最终获得4字节空间&#xff0c;由于最先匹配原则&#xff0c;直接将第一个空闲分区分配即可</p>\n<p></p>\n<p></p>\n<p></p>\n<p><img src=\"/img/1150-60b61b698a2c0c71.png\" alt=\"\" /></p>", "created": "2018-03-13T08:01:54Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "id": "jepdbvli5m572u", "updated": "2018-03-13T08:01:54Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "jeoyxt884g83et", "updated": "2018-03-13T01:19:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>黄斐 2014011382</p>\n<p>最佳匹配</p>", "created": "2018-03-13T01:20:15Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "ie7xy2fekwm1np", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>程序代码216行有一个bug&#xff1a;对比177行&#xff0c;少算了个表头长度。正确的应该是</p>\n<pre>print &#39; returned %d (searched %d elements)&#39; % (ptr &#43; options.headerSize, cnt)</pre>\n<p></p>", "created": "2018-03-13T06:31:02Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "ie7xy2fekwm1np", "children": [], "tag_good_arr": [], "id": "jepa316t9544w9", "updated": "2018-03-13T06:31:02Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>谢谢&#xff01;我同步到代码仓库中了。</p>", "created": "2018-03-16T01:15:24Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "jet94odyfr1gz", "updated": "2018-03-16T01:15:24Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/lesson5.md</p>", "created": "2018-03-16T05:05:13Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "ie7xy2fekwm1np", "children": [], "tag_good_arr": [], "id": "jethc7t0vaj2nd", "updated": "2018-03-16T05:05:13Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "jeoyzcmp2xdan", "updated": "2018-03-13T01:20:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>霍江浩 2015010611</p>\n<p>最佳匹配</p>", "created": "2018-03-13T01:20:24Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "ipy6fzzsoa55lc", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>改成最差匹配吧。。。前面同学占了最佳</p>", "created": "2018-03-13T01:20:53Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "ipy6fzzsoa55lc", "children": [], "tag_good_arr": [], "id": "jeoz06iexyq57k", "updated": "2018-03-13T01:20:53Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/Jackey-Huo/Chaos/tree/master/OS2018/inclass</p>", "created": "2018-03-16T04:49:01Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "ipy6fzzsoa55lc", "children": [], "tag_good_arr": [], "id": "jetgrdwkufe6vc", "updated": "2018-03-16T04:49:01Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "jeoyzjvlsso4p5", "updated": "2018-03-13T01:20:24Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>陈闻起 2015011356 最先匹配</p>", "created": "2018-03-13T01:21:33Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "it1idvlzv8smt", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jeoz118jwxg68x", "updated": "2018-03-13T01:21:33Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>何琦 2015011299 还剩啥</p>", "created": "2018-03-13T01:22:37Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "je2ib3svwgf6af", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在文件里直接定位policy</p>\n<p><img src=\"/img/1150-78d1ba394dfb5c97.bmp\" alt=\"\" /></p>\n<p>其中returnPolicy无视掉&#xff0c;与策略相关的只有如下几处</p>\n<p>1. </p>\n<p><img src=\"/img/1150-4bddd714f4f8684d.bmp\" alt=\"\" /></p>\n<p>初值&#xff0c;BEST设成了总长&#43;1&#xff08;相当于无穷大&#xff09;&#xff0c;然后WORST和FIRST都是-1(相当于无穷小)</p>\n<p>2. </p>\n<p><img src=\"/img/1150-9d08d414fc692def.bmp\" alt=\"\" /></p>\n<p>BEST用更小的值更新&#xff0c;WORST用更大的值更新&#xff0c;FIRST用任意满足条件的值更新后立即退出。</p>\n<p>得出结论&#xff1a;BEST最终得到的是满足条件的最小值&#xff0c;WORST得到满足条件的最大值&#xff0c;FIRST得到满足条件的第一个</p>\n<p>然后跑一下测试脚本验证一下正确性</p>\n<p><img src=\"/img/1150-c273226609b247e5.bmp\" alt=\"\" /></p>\n<p>其中BEST每次找到的最小值恰好是FIRST(所以样例为啥给的这么僵硬)&#xff0c;而且free的时候还不合并相邻区间(更僵硬)</p>\n<p>总之符合上述结论。</p>", "created": "2018-03-16T02:32:26Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "je2ib3svwgf6af", "children": [], "tag_good_arr": [], "id": "jetbvqo3qx345y", "updated": "2018-03-16T02:32:26Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jeoz2edpqo3d8", "updated": "2018-03-13T01:22:37Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>黄权伟 2015011328  最差匹配</p>", "created": "2018-03-13T01:25:06Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "it1eci1w5on4y9", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>和定义一样</p>", "created": "2018-03-16T05:19:57Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "feedback", "tag_good": [], "uid": "it1eci1w5on4y9", "children": [], "tag_good_arr": [], "id": "jethv5vvdnm2hc", "updated": "2018-03-16T05:19:57Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jeoz5lcd6bw4na", "updated": "2018-03-13T01:25:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p>\n<pre>在模拟内存分配的python脚本 ostep3-malloc.py 中存在一些问题&#xff1a;<br /><br />如果不用随机种子&#xff0c;而是指定特定的分配序列时&#xff0c;返回的地址没有加上堆头的所占用的空间<br /><br />此外如果分配失败&#xff0c;系统也不会给出提示&#xff0c;这似乎不太符合软件工程的规范\n\n错误&#xff08;源代码216行&#xff09;&#xff1a;\nif options.solve == True:\n                print &#39; returned %d (searched %d elements)&#39; % (ptr, cnt)\n应当修改成&#xff1a;\nif ptr == -1:<br />\tprint &#39; Alloc failed &#39; # 对应分配失败的情况<br />else:<br />\tprint &#39; returned %d (searched %d elements)&#39; % (ptr &#43; options.headerSize, cnt)</pre>\n<p></p>", "created": "2018-03-13T07:00:09Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jepb4gthvhcpy", "updated": "2018-03-13T07:00:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>陈嘉杰 2017011484</p>\n<p>占坑 最差匹配</p>", "created": "2019-03-11T03:14:16Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jshne0d1gvw4mr", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>$ python ./ostep3-malloc.py -S 100 -b 1000 -H 4 -a 4 -l ADDRSORT -p WORST -n 5 -c<br /><br />ptr[0] = Alloc(3)  returned 1004 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1008 sz:92 ] \n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:8 ] [ addr:1008 sz:92 ] \n\nptr[1] = Alloc(5)  returned 1012 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:8 ] [ addr:1020 sz:80 ] \n\nFree(ptr[1]) returned 0\nFree List [ Size 3 ]:  [ addr:1000 sz:8 ] [ addr:1008 sz:12 ] [ addr:1020 sz:80 ] \n\nptr[2] = Alloc(8)  returned 1024 (searched 3 elements)\nFree List [ Size 3 ]:  [ addr:1000 sz:8 ] [ addr:1008 sz:12 ] [ addr:1032 sz:68 ] \n</pre>\n<p>一开始&#xff0c;整片空间都是空的。首先分配了一片大小为3的地址&#xff0c;4&#43;3&lt;100&#xff0c;返回了1004&#xff0c;前面4个字节保存了长度数据。然后分配了大小为5的地址&#xff0c;4&#43;5&lt;92&#xff0c;所以选择第二块&#xff0c;返回了1012&#xff0c;释放后&#xff0c;剩下三块地址。最后分配8&#43;4=12&lt;80的地址&#xff0c;返回了1020&#43;4=1024为地址。</p>", "created": "2019-03-12T16:07:32Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "feedback", "tag_good": [], "uid": "jshne0d1gvw4mr", "children": [], "tag_good_arr": [], "id": "jt5yyhjjifn55f", "updated": "2019-03-12T16:07:32Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "jt3rw7qyyfp5l3", "updated": "2019-03-11T03:14:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>梁聪 2016013314</p>\n<p>最差匹配</p>", "created": "2019-03-11T03:14:57Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jshndyvxw5h4bg", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>因为已经有了两个最差匹配&#xff0c;所以改为最先匹配。为了方便观察&#xff0c;不合并空闲空间。</p>\n<p></p>\n<pre>python ./ostep3-malloc.py -S 100 -b 1000 -H 4 -a 4 -l ADDRSORT -p FIRST -n 5 -c<br />ptr[0] = Alloc(3)  returned 1004 (searched 1 elements)<br />Free List [ Size 1 ]:  [ addr:1008 sz:92 ] <br /><br />Free(ptr[0]) returned 0<br />Free List [ Size 2 ]:  [ addr:1000 sz:8 ] [ addr:1008 sz:92 ] <br /><br />ptr[1] = Alloc(5)  returned 1012 (searched 2 elements)<br />Free List [ Size 2 ]:  [ addr:1000 sz:8 ] [ addr:1020 sz:80 ] <br /><br />Free(ptr[1]) returned 0<br />Free List [ Size 3 ]:  [ addr:1000 sz:8 ] [ addr:1008 sz:12 ] [ addr:1020 sz:80 ] <br /><br />ptr[2] = Alloc(8)  returned 1012 (searched 2 elements)<br />Free List [ Size 2 ]:  [ addr:1000 sz:8 ] [ addr:1020 sz:80 ] </pre>\n<md><br />使用示例中的设置&#xff0c;一共100 bytes&#xff0c;起始地址1000&#xff0c;头长4 bytes&#xff0c;4 bytes 对齐。<br />1. 申请3 bytes&#xff0c;从起始地址开始&#xff0c;头4 bytes&#xff0c;使用3 bytes&#xff0c;因为4对齐&#xff0c;所以补1 byte&#xff1b;一共搜索了整个的一块空间&#xff0c;使用1000到1007的部分&#xff1b;<br />2. 释放“1”中申请的区域&#xff0c;因为没有合并&#xff0c;现在空闲空间有两部分&#xff1b;<br />3. 申请5 bytes&#xff0c;从低地址1000处的的第一个空闲空间开始遍历&#xff0c;由于至少需要4&#43;5=9 bytes 的空间&#xff0c;而第一个空闲空间只有8 bytes&#xff0c;所以继续看下一个&#xff1b;1008开始的空闲空间符合要求&#xff0c;是从低地址开始第一个满足要求的空间&#xff0c;因此使用它&#xff0c;具体与1中类似&#xff1b;一共搜索了2个空闲空间&#xff0c;结果是1008到1019&#xff08;3 bytes 补齐&#xff09;被使用&#xff1b;<br />4. 释放“3”中申请的区域&#xff0c;因为没有合并&#xff0c;现在空闲空间有三部分&#xff1b;<br />5. 申请8 bytes&#xff0c;<br />从低地址1000处的的第一个空闲空间开始遍历&#xff0c;类似“3”进行最先匹配&#xff0c;一共搜索了2个空闲空间&#xff0c;结果是1008到1019&#xff08;刚好用完&#xff0c;没有补齐&#xff09;被使用。<br /></md>", "created": "2019-03-13T08:29:25Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "feedback", "tag_good": [], "uid": "jshndyvxw5h4bg", "children": [], "tag_good_arr": [], "id": "jt6y17dn5mr1na", "updated": "2019-03-13T08:29:25Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jt3rx2ysqhejq", "updated": "2019-03-11T03:14:57Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>李依林 2016011502 最佳匹配</p>", "created": "2019-03-11T03:16:36Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jshndz5tgxj4bq", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>python ./ostep3-malloc.py -s 7777 -S 100 -b 1000 -H 8 -a 4 -l ADDRSORT -p BEST -P 60 -n 10 -C -c\n\nptr[0] = Alloc(5)  returned 1008 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1016 sz:84 ] \n\nptr[1] = Alloc(5)  returned 1024 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1032 sz:68 ] \n\nptr[2] = Alloc(9)  returned 1040 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:48 ] \n\nptr[3] = Alloc(6)  returned 1060 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1068 sz:32 ] \n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:16 ] [ addr:1068 sz:32 ] \n\nFree(ptr[1]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:32 ] [ addr:1068 sz:32 ] \n\nFree(ptr[3]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:32 ] [ addr:1052 sz:48 ] \n\nptr[4] = Alloc(4)  returned 1008 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1012 sz:20 ] [ addr:1052 sz:48 ] </pre>\n<p> 设置header长度8&#xff0c;alignment为4&#xff0c;基地址1000&#xff0c;开启合并选项&#xff08;-C&#xff09;。<br /> <br /> 1-4. 依次申请5&#xff0c;5&#xff0c;9&#xff0c;6字节&#xff0c;由于alignment及header实际需要16&#xff0c;16&#xff0c;20&#xff0c;16字节&#xff0c;依次分裂freelist[0]<br />5. Free [addr:1000 sz:16]&#xff0c;无法合并<br />6. Free [addr:1016 sz:16]&#xff0c;与[addr:1000 sz:16]合并<br />7. Free [addr:1052 sz:16]&#xff0c;与[addr:1068 sz:32]合并<br />8. 申请4字节&#xff0c;实际需要12字节&#xff1b;由于采用best-fit策略&#xff0c;分裂[addr:1000 sz:32]</p>", "created": "2019-03-13T08:17:48Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "feedback", "tag_good": [], "uid": "jshndz5tgxj4bq", "children": [], "tag_good_arr": [], "id": "jt6xm9211zn186", "updated": "2019-03-13T08:17:48Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jt3rz7mjjpo2h1", "updated": "2019-03-11T03:16:36Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>最佳匹配</p>", "created": "2019-03-11T03:18:58Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jsl9bhefCIIS", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>采取最佳匹配策略&#xff0c;栈大小为100&#xff0c;基地址为1000&#xff0c;header长度为8&#xff0c;4字节对齐&#xff0c;命令如下&#xff1a;</p>\n<p>python2 ./ostep3-malloc.py -S 100 -b 1000 -H 8 -a 4 -l ADDRSORT -p BEST -n 6 -c</p>\n<p>输出结果如下&#xff1a;</p>\n<p>ptr[0] = Alloc(3) returned 1008 (searched 1 elements)</p>\n<p>Free List [ Size 1 ]: [ addr:1012 sz:88 ]</p>\n<p>先分配3字节大小的空间&#xff0c;经搜索发现当前仅有一个从1000开始连续100个字节的空间&#xff0c;可以在该空间进行分配。由于有8字节的header&#xff0c;因此从1008位置开始分配&#xff0c;由于4字节对齐&#xff0c;因此该空间的结束地址为1011</p>\n<p></p>\n<p>Free(ptr[0]) returned 0<br />Free List [ Size 2 ]: [ addr:1000 sz:12 ] [ addr:1012 sz:88 ]</p>\n<p>释放该空间&#xff0c;由于没有合并&#xff0c;因此存在两个空间&#xff0c;分别是从1000开始连续12个字节&#xff0c;以及从1012开始88个字节</p>\n<p></p>\n<p>ptr[1] = Alloc(5) returned 1020 (searched 2 elements)<br />Free List [ Size 2 ]: [ addr:1000 sz:12 ] [ addr:1028 sz:72 ]</p>\n<p>再分配5字节大小的空间&#xff0c;由最佳匹配的策略&#xff0c;将两个空间按照空间由小到大的顺序排列。考虑第一个空间&#xff0c;由于5&#43;8=13&gt;12&#xff0c;因此无法放入第一个空间;考虑第二个空间&#xff0c;5&#43;8=13&lt;88&#xff0c;因此可以在该空间进行分配。由于有8字节的header&#xff0c;起始地址为1012&#43;8=1020&#xff0c;由于4字节对齐&#xff0c;因此结束地址为1027</p>\n<p></p>\n<p>Free(ptr[1]) returned 0<br />Free List [ Size 3 ]: [ addr:1000 sz:12 ] [ addr:1012 sz:16 ] [ addr:1028 sz:72 ]</p>\n<p>释放该空间&#xff0c;由于没有合并&#xff0c;因此存在三个空间&#xff0c;分别是从1000开始连续12个字节&#xff0c;从1012开始16个字节&#xff0c;以及从1028开始72个字节</p>\n<p></p>\n<p>ptr[2] = Alloc(8) returned 1020 (searched 3 elements)<br />Free List [ Size 2 ]: [ addr:1000 sz:12 ] [ addr:1028 sz:72 ]</p>\n<p>再分配8字节大小的空间&#xff0c;由最佳匹配的策略&#xff0c;将三个空间按照空间由小到大的顺序排列。考虑第一个空间&#xff0c;由于8&#43;8=16&gt;12&#xff0c;因此无法放入第一个空间;考虑第二个空间&#xff0c;8&#43;8=16=16&#xff0c;因此可以在该空间进行分配。由于有8字节的header&#xff0c;起始地址为1012&#43;8=1020&#xff0c;结束地址为1027</p>\n<p></p>\n<p></p>\n<p>Free(ptr[2]) returned 0<br />Free List [ Size 3 ]: [ addr:1000 sz:12 ] [ addr:1012 sz:16 ] [ addr:1028 sz:72 ]</p>\n<p>释放该空间&#xff0c;由于没有合并&#xff0c;因此存在三个空间&#xff0c;分别是从1000开始连续12个字节&#xff0c;从1012开始16个字节&#xff0c;以及从1028开始72个字节</p>", "created": "2019-03-13T16:24:22Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "feedback", "tag_good": [], "uid": "jsl9bhefCIIS", "children": [], "tag_good_arr": [], "id": "jt7ezz88dtu1xw", "updated": "2019-03-13T16:24:22Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jt3s29e06yh6jv", "updated": "2019-03-11T03:18:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>胡致远 2016011260 最先匹配</p>\n<p></p>\n<p>最先匹配和最差匹配的比较&#xff1a;</p>\n<p>栈大小设为1000&#xff0c;起始地址设为1000&#xff0c;地址设为12位&#xff0c;不做对齐要求&#xff0c;内存分配时首先申请一系列小的内存块&#xff0c;然后反复释放掉第一个内存块并再申请一个同等大小的内存块</p>\n<p></p>\n<pre>python2.7 ./ostep3-malloc.py -S 1000 -b 1000 -H 12 -a -1 -l ADDRSORT -p FIRST -A &#43;1,&#43;1,&#43;1,&#43;1,-0,&#43;1,-0,&#43;1,-0,&#43;1,-0,&#43;1  -C -c\nptr[0] = Alloc(1)  returned 1012 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1013 sz:987 ]\n\nptr[1] = Alloc(1)  returned 1025 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1026 sz:974 ]\n\nptr[2] = Alloc(1)  returned 1038 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1039 sz:961 ]\n\nptr[3] = Alloc(1)  returned 1051 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:948 ]\n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1052 sz:948 ]\n\nptr[4] = Alloc(1)  returned 1012 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:948 ]\n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1052 sz:948 ]\n\nptr[5] = Alloc(1)  returned 1012 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:948 ]\n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1052 sz:948 ]\n\nptr[6] = Alloc(1)  returned 1012 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:948 ]\n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1052 sz:948 ]\n\nptr[7] = Alloc(1)  returned 1012 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:948 ]\npython2.7 ./ostep3-malloc.py -S 1000 -b 1000 -H 12 -a -1 -l ADDRSORT -p WORST -A &#43;1,&#43;1,&#43;1,&#43;1,-0,&#43;1,-0,&#43;1,-0,&#43;1,-0,&#43;1  -C -c\nptr[0] = Alloc(1)  returned 1012 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1013 sz:987 ]\n\nptr[1] = Alloc(1)  returned 1025 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1026 sz:974 ]\n\nptr[2] = Alloc(1)  returned 1038 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1039 sz:961 ]\n\nptr[3] = Alloc(1)  returned 1051 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1052 sz:948 ]\n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1052 sz:948 ]\n\nptr[4] = Alloc(1)  returned 1064 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1065 sz:935 ]\n\nFree(ptr[0]) returned -1\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1065 sz:935 ]\n\nptr[5] = Alloc(1)  returned 1077 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1078 sz:922 ]\n\nFree(ptr[0]) returned -1\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1078 sz:922 ]\n\nptr[6] = Alloc(1)  returned 1090 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1091 sz:909 ]\n\nFree(ptr[0]) returned -1\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1091 sz:909 ]\n\nptr[7] = Alloc(1)  returned 1103 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:13 ] [ addr:1104 sz:896 ]</pre>\n<p>可以看出&#xff0c;在最先匹配中&#xff0c;被释放掉的内存块立刻又被分配&#xff0c;因此内存的申请与释放主要集中在第一个内存块处&#xff0c;高地址处的空闲相对较多</p>\n<p>而在最差匹配中&#xff0c;每次都会把高地址处最大的内存块用于内存的分配&#xff0c;因此高地址处的空闲相对较少&#xff0c;并且存在外部碎片</p>", "created": "2019-03-11T03:19:10Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jsiobmer9hum", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jt3s2i9gnck4bf", "updated": "2019-03-11T03:19:10Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>郑环宇2016011329 最差匹配</p>", "created": "2019-03-11T03:19:34Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jslil0sr69Ea", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>moocos-&gt; ./ostep3-malloc.py -S 100 -b 1000 -H 13 -a 2 -l ADDRSORT -p WORST -A &#43;3,&#43;2,-1,&#43;5,-0,&#43;3,&#43;4,-2 -C -c\nptr[0] = Alloc(3)  returned 1013 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1017 sz:83 ] \n\nptr[1] = Alloc(2)  returned 1030 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1032 sz:68 ] \n\nFree(ptr[1]) returned 0\nFree List [ Size 1 ]:  [ addr:1017 sz:83 ] \n\nptr[2] = Alloc(5)  returned 1030 (searched 1 elements)\nFree List [ Size 1 ]:  [ addr:1036 sz:64 ] \n\nFree(ptr[0]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:17 ] [ addr:1036 sz:64 ] \n\nptr[3] = Alloc(3)  returned 1049 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:17 ] [ addr:1053 sz:47 ] \n\nptr[4] = Alloc(4)  returned 1066 (searched 2 elements)\nFree List [ Size 2 ]:  [ addr:1000 sz:17 ] [ addr:1070 sz:30 ] \n\nFree(ptr[2]) returned 0\nFree List [ Size 2 ]:  [ addr:1000 sz:36 ] [ addr:1070 sz:30 ] \n\n</pre>\n<p>设置了Header长度为13&#xff0c;alignment为2&#xff0c;即内容长度应该为2的倍数长&#xff0c;</p>\n<p>Alloc(3)&#xff0c;申请了 17(头部13字节&#43;(3字节内容&#43;1字节补齐))字节。选择第一块空闲空间&#xff0c;Free List 为<span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:13px;font-style:normal;background-color:#f5f5f5;color:#333333\">[ addr:1017 sz:83 ] </span></p>\n<p>Alloc(2)&#xff0c;申请了15(头部13字节&#43;(2字节内容&#xff0c;无需补齐))字节。选择第一块空闲空间&#xff0c;Free List <span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:13px;font-style:normal;background-color:#f5f5f5;color:#333333\">[ addr:1032 sz:68 ] </span></p>\n<p>Free(Ptr(1)),即释放第二块内容&#xff0c;释放后可以与邻近的空闲空间合并&#xff0c;与address 1032后的64字节合并后&#xff0c;Free List为[ addr:1017 sz:83 ] </p>\n<p>Alloc(5)&#xff0c;<span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:14px;font-style:normal;background-color:#ffffff;color:#333333\">申请了 19(头部13字节&#43;(5字节内容&#43;1字节补齐))字节。Free </span><span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:14px;font-style:normal;background-color:#ffffff;color:#333333\">List</span><span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:14px;font-style:normal;background-color:#ffffff;color:#333333\"> 为<span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:13px;font-style:normal;background-color:#f5f5f5;color:#333333\">[ addr:1036 sz:64 ] <br /></span></span></p>\n<p><span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:14px;font-style:normal;background-color:#ffffff;color:#333333\">Free(Ptr(0)),即释放第一块内容&#xff0c;邻近没有空闲空间合并&#xff0c;Free List为<span style=\"font-family:&#34;Helvetica Neue&#34;,&#34;Helvetica&#34;,&#34;Arial&#34;,sans-serif;text-align:left;font-weight:400;font-size:13px;font-style:normal;background-color:#f5f5f5;color:#333333\">[ addr:1000 sz:17 ] [ addr:1036 sz:64 ] </span></span></p>\n<p>Alloc(3)&#xff0c;申请了 17(头部13字节&#43;(3字节内容&#43;1字节补齐))字节。此时空闲空间有2块&#xff0c;根据最差匹配原则选择空闲区域最大的&#xff0c;即第二块&#xff0c;从地址1036开始占据17字节&#xff0c;新的Free List为[ addr:1000 sz:17 ] [ addr:1053 sz:47 ]</p>\n<p>Alloc(4)&#xff0c;申请了 17(头部13字节&#43;(4字节内容无需字节补齐))字节。此时空闲空间有2块&#xff0c;根据最差匹配原则选择空闲区域最大的&#xff0c;即第二块&#xff0c;从地址1053开始占据17字节&#xff0c;新的Free List为[ addr:1000 sz:17 ] [ addr:1070 sz:30 ]</p>\n<p>Free(Ptr(2)),即释放第三块(现在的第二块)内容&#xff0c;释放后可以与邻近的空闲空间合并&#xff0c;与address 1032前的15字节合并后&#xff0c;Free List为[ addr:1000 sz:36 ] [ addr:1070 sz:30 ]</p>", "created": "2019-03-13T04:19:56Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "feedback", "tag_good": [], "uid": "jslil0sr69Ea", "children": [], "tag_good_arr": [], "id": "jt6p4d422oo7g", "updated": "2019-03-13T04:19:56Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jt3s30muxqw5wn", "updated": "2019-03-11T03:19:34Z", "config": {}}], "tag_good_arr": [], "id": "jenlf67ke6k6wp", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 13, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169240531, "default_anonymity": "no"}, "error": null, "aid": "kyv0jgermeu1so"}