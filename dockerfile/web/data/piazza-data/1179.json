{"result": {"folders": ["2018", "课堂问答", "lecture10"], "nr": 1179, "data": {"embed_links": []}, "created": "2018-03-30T03:55:23Z", "bucket_order": 3, "no_answer_followup": 4, "change_log": [{"anon": "no", "uid": "hdjonbiyfs62ie", "data": "jfdf0c5yuhe235", "type": "create", "when": "2018-03-30T03:55:23Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jfdf0c5xuba234", "type": "followup", "when": "2018-03-30T03:57:36Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jfdf0c5xuba234", "type": "followup", "when": "2018-03-30T03:57:55Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jfdf0c5xuba234", "type": "followup", "when": "2018-03-30T03:58:32Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jfdf0c5xuba234", "type": "followup", "when": "2018-03-30T03:58:53Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-03-30T07:05:01Z"}, {"anon": "no", "uid": "izb0ceibud76xj", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-03-30T07:06:09Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-03-30T07:06:15Z"}, {"anon": "no", "uid": "je2ib5nk89v6ca", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-03-30T07:06:23Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-04-02T12:20:53Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-04-02T12:21:38Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-04-02T13:34:21Z"}, {"anon": "no", "uid": "izb0ceibud76xj", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-04-02T14:11:17Z"}, {"anon": "no", "uid": "je2ib5nk89v6ca", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-04-02T17:52:06Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2018-04-03T00:52:50Z"}, {"anon": "no", "uid": "jshne0jmj1k4mx", "to": "jfdf0c5xuba234", "type": "feedback", "when": "2019-03-31T07:43:20Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2018春季-第十讲课堂实践练习", "created": "2018-03-30T03:55:23Z", "content": "<p>请分析ucore中与物理内存管理和虚拟存储管理相关的数据结构组织&#xff1b;分析访问这些数据结构的函数&#xff0c;说明其对存储管理相关数据结构的修改情况&#xff1b;最后通过一个数据结构图示&#xff0c;描述进程的虚拟地址空间、页表项、物理页面和后备页面的关系。</p>\n<p></p>\n<ul><li>struct Page</li><li>struct mm_struct</li><li>struct vma_struct</li></ul>\n<p></p>\n<p>题目&#xff1a;<br /><a href=\"https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/04-3-lab3-spoc-discussion.md#%E8%AF%BE%E5%A0%82%E5%AE%9E%E8%B7%B5%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/04-3-lab3-spoc-discussion.md#%E8%AF%BE%E5%A0%82%E5%AE%9E%E8%B7%B5%E7%BB%83%E4%B9%A0</a></p>\n<p></p>"}], "type": "note", "tags": ["2018", "instructor-note", "lecture10", "课堂问答"], "tag_good": [], "unique_views": 122, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>数据结构 struct Page 的组织方式和访问函数分析。</p>", "created": "2018-03-30T03:57:36Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>黄斐 2014011382</p>", "created": "2018-03-30T07:06:15Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "ie7xy2fekwm1np", "children": [], "tag_good_arr": [], "id": "jfdltt03owo5i8", "updated": "2018-03-30T07:06:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>李凯文 2014011756</p>", "created": "2018-03-30T07:06:23Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "je2ib5nk89v6ca", "children": [], "tag_good_arr": [], "id": "jfdltz2x3hmqr", "updated": "2018-03-30T07:06:23Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/lesson10.md</p>", "created": "2018-04-02T13:34:21Z", "bucket_order": 107, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "ie7xy2fekwm1np", "children": [], "tag_good_arr": [], "id": "jfia0gkmavz7ke", "updated": "2018-04-02T13:34:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/likaiwen123/os_answers/blob/master/lesson10.md</p>", "created": "2018-04-02T17:52:06Z", "bucket_order": 107, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "je2ib5nk89v6ca", "children": [], "tag_good_arr": [], "id": "jfij7x2wwhz30v", "updated": "2018-04-02T17:52:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre><strong>    uintptr_t freemem = PADDR((uintptr_t)pages &#43; sizeof(struct Page) * npage);</strong>\n\n    for (i = 0; i &lt; memmap-&gt;nr_map; i &#43;&#43;) {\n        uint64_t begin = memmap-&gt;map[i].addr, end = begin &#43; memmap-&gt;map[i].size;\n        if (memmap-&gt;map[i].type == E820_ARM) {\n           <strong> if (begin &lt; freemem) {\n                begin = freemem;\n            }</strong>\n            if (end &gt; KMEMSIZE) {\n                end = KMEMSIZE;\n            }\n            if (begin &lt; end) {\n                begin = ROUNDUP(begin, PGSIZE);\n                end = ROUNDDOWN(end, PGSIZE);\n                if (begin &lt; end) {\n                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);\n                }\n            }\n        }\n    }</pre>\n<p>可见Page数据结构维护的页面 不包括内核空间和Page结构所占内存本身</p>", "created": "2018-04-03T00:52:50Z", "bucket_order": 107, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "ie7xy2fekwm1np", "children": [], "tag_good_arr": [], "id": "jfiy8zijxi1mq", "updated": "2018-04-03T00:52:50Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/mahaoran1997/os_course_exercises/blob/2019spring/all/exercise10.md</p>", "created": "2019-03-31T07:43:20Z", "bucket_order": 55, "bucket_name": "Week 3/31 - 4/6", "type": "feedback", "tag_good": [], "uid": "jshne0jmj1k4mx", "children": [], "tag_good_arr": [], "id": "jtwmba0n7965bb", "updated": "2019-03-31T07:43:20Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jfdf36x2h39737", "updated": "2018-03-30T03:57:36Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>数据结构 struct mm_struct 的组织方式和访问函数分析。</p>", "created": "2018-03-30T03:57:55Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>邴冠文 2015080065</p>\n<p></p>", "created": "2018-03-30T07:06:09Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "izb0ceibud76xj", "children": [], "tag_good_arr": [], "id": "jfdlto3qxurui", "updated": "2018-03-30T07:06:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>struct mm_struct { <br /> list_entry_t mmap_list; //双向链表头&#xff0c;链接了所有属于同一页目录表的虚拟内存空间<br /> struct vma_struct *mmap_cache; //指向当前正在使用的虚拟内存空间<br /> pde_t *pgdir; //指向的就是 mm_struct数据结构所维护的页表<br /> int map_count; //记录mmap_list里面链接的vma_struct的个数<br /> void *sm_priv; //指向用来链接记录页访问情况的链表头<br /> };</pre>\n<p><br />mmap_list是双向链表头&#xff0c;链接了所有属于同一页目录表的虚拟内存空间&#xff0c;mmap_cache是指向当前正在使用的虚拟内存空间&#xff0c;由于操作系统执行的“局部性”原理&#xff0c;当前正在用到的虚拟内存空间在接下来的操作中可能还会用到&#xff0c;这时就不需要查链表&#xff0c;而是直接使用此指针就可找到下一次要用到的虚拟内存空间。pgdir 所指向的就是 mm_struct数据结构所维护的页表。通过访问pgdir可以查找某虚拟地址对应的页表项是否存在以及页表项的属性等。map_count记录mmap_list 里面链接的 vma_struct的个数。sm_priv指向用来链接记录页访问情况的链表头&#xff0c;这建立了mm_struct和后续要讲到的swap_manager之间的联系。</p>\n<p><br />###函数&#xff1a;</p>\n<pre><br />struct mm_struct *<br />mm_create(void) { //分配一个mm_struct然后将其初始化<br /> struct mm_struct *mm = kmalloc(sizeof(struct mm_struct)); //分配所需的空间\nif (mm != NULL) { //虚拟空间有效<br /> list_init(&amp;(mm-&gt;mmap_list)); //初始化链表<br /> mm-&gt;mmap_cache = NULL;<br /> mm-&gt;pgdir = NULL;<br /> mm-&gt;map_count = 0;\nif (swap_init_ok) swap_init_mm(mm);<br /> else mm-&gt;sm_priv = NULL;<br /> }<br /> return mm;<br />}</pre>\n<p></p>\n<pre>void<br />mm_destroy(struct mm_struct *mm) { //释放mm和内部空间\nlist_entry_t *list = &amp;(mm-&gt;mmap_list), *le;<br /> while ((le = list_next(list)) != list) {<br /> list_del(le);<br /> kfree(le2vma(le, list_link),sizeof(struct vma_struct)); //kfree vma <br /> }<br /> kfree(mm, sizeof(struct mm_struct)); //kfree mm<br /> mm=NULL;<br />}</pre>\n<p><br />do_pgfault - 中断处理<br /> * &#64;mm : the control struct for a set of vma using the same PDT<br /> * &#64;error_code : the error code recorded in trapframe-&gt;tf_err which is setted by x86 hardware<br /> * &#64;addr : the addr which causes a memory access exception, (the contents of the CR2 register)<br /> *<br /> * CALL GRAPH: trap--&gt; trap_dispatch--&gt;pgfault_handler--&gt;do_pgfault<br /> * The processor provides ucore&#39;s do_pgfault function with two items of information to aid in diagnosing<br /> * the exception and recovering from it.<br /> * (1) The contents of the CR2 register. The processor loads the CR2 register with the<br /> * 32-bit linear address that generated the exception. The do_pgfault fun can<br /> * use this address to locate the corresponding page directory and page-table<br /> * entries.<br /> * (2) An error code on the kernel stack. The error code for a page fault has a format different from<br /> * that for other exceptions. The error code tells the exception handler three things:<br /> * -- The P flag (bit 0) indicates whether the exception was due to a not-present page (0)<br /> * or to either an access rights violation or the use of a reserved bit (1).<br /> * -- The W/R flag (bit 1) indicates whether the memory access that caused the exception<br /> * was a read (0) or write (1).<br /> * -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)<br /> * or supervisor mode (0) at the time of the exception.<br /> */</p>\n<p></p>\n<p></p>", "created": "2018-04-02T14:11:17Z", "bucket_order": 107, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "izb0ceibud76xj", "children": [], "tag_good_arr": [], "id": "jfibbydbk9pia", "updated": "2018-04-02T14:11:17Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jfdf3lll1c8792", "updated": "2018-03-30T03:57:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>数据结构 struct vma_struct 的组织方式和访问函数分析。</p>", "created": "2018-03-30T03:58:32Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2015011263</p>\n<p>魏钧宇</p>", "created": "2018-03-30T07:05:01Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "id": "jfdls83fkz4d6", "updated": "2018-03-30T07:05:01Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>1. 概述&#xff1a;</p>\n<p>mm_struct 和 vma_struct数据结构设立的初衷在于&#xff0c;能够描述那些合法的&#xff0c;但是不在能够描述ucore模拟应用程序所需要的合法内存空间</p>\n<p>当访问内存产生page_fault时&#xff0c;可获得访问的内存的方式&#xff08;读或者写&#xff09;以及具体的虚拟内存地址&#xff0c;ucore查询这样的地址&#xff0c;看是否属于vma_struct数据结构中描述的合法地址范围</p>\n<p></p>\n<p>2. vma_struct:</p>\n<p>相关代码&#xff1a;</p>\n<pre>struct vma_struct {\n    struct mm_struct *vm_mm; // the set of vma using the same PDT \n    uintptr_t vm_start;      // start addr of vma      \n    uintptr_t vm_end;        // end addr of vma, not include the vm_end itself\n    uint32_t vm_flags;       // flags of vma\n    list_entry_t list_link;  // linear list link which sorted by start addr of vma\n};</pre>\n<p>成员变量&#xff1a;</p>\n<p>mm_struct&#xff1a;指向管理这个vma的上层结构mm&#xff08;一个mm对应于一系列使用同样的页表的vma)vm_start和vm_end描述的是一个连续地址的虚拟内存空间的起始地址和结束地址&#xff08;都是按照pgsize对齐的&#xff09;</p>\n<p>vm_falgs 主要用于表示虚拟内存空间的属性&#xff1a;VM_READ&#xff0c;VM_EXEC&#xff0c;VM_WRITE</p>\n<p>成员函数&#xff1a;</p>\n<p>vma_create</p>\n<p>主要目的&#xff1a;创建一个vma结构并初始化</p>\n<p>主要内容&#xff1a;</p>\n<ol><li>首先检查vma是一个合法的vma</li><li>遍历mm的vma链表</li></ol>\n<p>insert_vma_struct</p>\n<p>主要目的&#xff1a;在mm对应的vma中找一个地址满足要求的vma</p>\n<p>主要内容&#xff1a;</p>\n<ol><li>首先检查mm的缓存是否满足条件</li><li>遍历mm对应的列表&#xff0c;找到当前vma的地址满足条件的位置</li><li>检查vma块和前后的vma块是否存在地址上的重叠</li><li>修改当前vma块的vm_mm指针&#xff0c;使之指向mm</li><li>给当前的mm的vma块总个数加一</li></ol>\n<p>find_vma</p>\n<p>在mm对应的vma中找一个地址满足要求的vma</p>\n<p>主要内容&#xff1a;</p>\n<ol><li>首先检查mm的缓存是否满足条件</li><li>遍历mm对应的列表&#xff0c;找到当前vma的地址满足条件的位置</li><li>检查vma块和前后的vma块是否存在地址上的重叠</li><li>修改当前vma块的vm_mm指针&#xff0c;使之指向mm</li><li>给当前的mm的vma块总个数加一</li></ol>\n<p></p>", "created": "2018-04-02T12:20:53Z", "bucket_order": 107, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "id": "jfi7dzipfl92ht", "updated": "2018-04-02T12:20:53Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jfdf4edup1k7ow", "updated": "2018-03-30T03:58:32Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>通过一个数据结构图示&#xff0c;描述进程的虚拟地址空间、页表项、物理页面和后备页面的关系。</p>", "created": "2018-03-30T03:58:53Z", "bucket_order": 108, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p><img src=\"/img/1179-c47b81e95a2524d4.png\" alt=\"\" /></p>", "created": "2018-04-02T12:21:38Z", "bucket_order": 107, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "id": "jfi7exjyopk2ss", "updated": "2018-04-02T12:21:38Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jfdf4u57jya5y", "updated": "2018-03-30T03:58:53Z", "config": {}}], "tag_good_arr": [], "id": "jfdf0c5xuba234", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 6, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169339123, "default_anonymity": "no"}, "error": null, "aid": "kyv0lkhfo4422b"}