{"result": {"folders": ["lecture12", "2018"], "nr": 1196, "data": {"embed_links": []}, "created": "2018-04-10T01:19:59Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "ie7xy2fekwm1np", "data": "jfszavfsz7l6pk", "type": "create", "when": "2018-04-10T01:19:59Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "data": "jg27vyv01gb399", "type": "update", "when": "2018-04-16T12:30:16Z"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "data": "jg2ei9rypb636r", "type": "update", "when": "2018-04-16T15:35:34Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "ju3jaxi7fry67x", "type": "update", "when": "2019-04-05T03:53:29Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "进程切换的动态跟踪", "created": "2019-04-05T03:53:29Z", "content": "<p>piazza的编辑令浏览器崩溃&#xff0c;markdown地址&#xff1a;<a href=\"https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/switch_to.md\">https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/switch_to.md</a></p>\n<p></p>\n<pre>## 先放结论\n\n* switch_to函数完成了保存现场到prev&#xff0c;从next恢复现场的功能\n* 如果被切换的进程是新建立的&#xff0c;从switch_to返回&#xff0c;则会到&lt;forkret&gt;。forkret之后会从__trapret回到kernel_thread_entry开始执行。\n* 如果被切换的进程是已有的&#xff0c;从switch_to返回&#xff0c;则会到&lt;proc_run&#43;106&gt;。这时该进程就恢复到上回调用switch_to的情况&#xff0c;如同switch_to什么都没做一般返回。\n* 整体来说&#xff0c;如果忽略新创建的进程&#xff0c;每个非运行状态的进程都会有个最上层是proc_run的栈。\n\t* 以时间角度来讲&#xff0c;switch_to会从一个进程的proc_run栈&#xff0c;转到另一个进程的proc_run栈。\n\t* 以进程角度来讲&#xff0c;每个进程调用switch_to&#xff0c;都会在一段时间后从switch_to函数返回&#xff0c;继续执行。\n\n### 汇编速查\n\t\n\t//switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n\t0xc010b9f7 &lt;proc_run&#43;84&gt;:\tmov    -0x10(%ebp),%eax\n\t0xc010b9fa &lt;proc_run&#43;87&gt;:\tlea    0x1c(%eax),%edx\n\t0xc010b9fd &lt;proc_run&#43;90&gt;:\tmov    -0xc(%ebp),%eax\n\t0xc010ba00 &lt;proc_run&#43;93&gt;:\tadd    $0x1c,%eax\n\t0xc010ba03 &lt;proc_run&#43;96&gt;:\tsub    $0x8,%esp\n\t0xc010ba06 &lt;proc_run&#43;99&gt;:\tpush   %edx\n\t0xc010ba07 &lt;proc_run&#43;100&gt;:\tpush   %eax\n\t0xc010ba08 &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t0xc010ba0d &lt;proc_run&#43;106&gt;:\tadd    $0x10,%esp\n\n\n## 第一次switch_to&#xff0c;零号线程切换到一号线程\n\n### 调用switch_to前\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03550e8) at kern/process/proc.c:231\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d48d in cpu_idle () at kern/process/proc.c:1082\n\t#3  0xc01000b6 in kern_init () at kern/init/init.c:55\n\t#4  0xc0100028 in relocated () at kern/init/entry.S:27\n\t\n\t-exec p prev\n\t$1 = (struct proc_struct *) 0xc0355008\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$4 = 0xc014df70\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$7 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$3 = 0xc0358fb4\n\n### 从switch_to函数返回以后\n\n\t-exec bt\n\t#0  forkret () at kern/process/proc.c:241\n\t\n\t-exec p current\n\t$2 = (struct proc_struct *) 0xc03550e8\n\t\n\t-exec p $eip\n\t$2 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x $esp\n\t$1 = 0xc0358fb4\n\n\n## 两个线程的相互切换\n\n### 从A切换到B switch_to之前\n\ndo_sleep进入等待状态&#xff0c;引发切换\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03554a0) at kern/process/proc.c:231\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d52c in do_sleep (time=10) at kern/process/proc.c:1111\n\t#3  0xc0108b76 in philosopher_using_semaphore (arg=0x0) at kern/sync/check_sync.c:122\n\t#4  0xc010b31d in kernel_thread_entry () at kern/process/entry.S:6\n\t\n\t-exec p prev\n\t$2 = (struct proc_struct *) 0xc0355580\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$3 = 0xc036bf34\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$5 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$6 = 0xc0368fb4\n\n### 从A切换到B switch_to之后\n\n\t-exec bt\n\t#0  forkret () at kern/process/proc.c:242\n\t#1  0x00000000 in ?? ()\n\t\n\t-exec p current\n\t$7 = (struct proc_struct *) 0xc03554a0\n\t\n\t-exec p $eip\n\t$9 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x $esp\n\t$8 = 0xc0368fb4\n\n### 从B切换到A switch_to之前\n\n系统调用引发切换\n\n\t-exec bt\n\t#0  proc_run (proc=0xc0355580) at kern/process/proc.c:228\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc0110325 in dev_stdin_read (buf=0xc0388000 &#34; tdout&#34;, len=1) at kern/fs/devs/dev_stdin.c:55\n\t#3  0xc01103da in stdin_io (dev=0xc03551c8, iob=0xc0368e7c, write=0) at kern/fs/devs/dev_stdin.c:87\n\t#4  0xc010facc in dev_read (node=0xc03551c8, iob=0xc0368e7c) at kern/fs/devs/dev.c:36\n\t#5  0xc010a0b2 in file_read (fd=0, base=0xc0388000, len=1, copied_store=0xc0368ecc) at kern/fs/file.c:226\n\t#6  0xc010ad0f in sysfile_read (fd=0, base=0xafffff47, len=1) at kern/fs/sysfile.c:80\n\t#7  0xc010e066 in sys_read (arg=0xc0368f34) at kern/syscall/syscall.c:107\n\t#8  0xc010e224 in syscall () at kern/syscall/syscall.c:199\n\t#9  0xc0102940 in trap_dispatch (tf=0xc0368fb4) at kern/trap/trap.c:217\n\t#10 0xc0102a52 in trap (tf=0xc0368fb4) at kern/trap/trap.c:298\n\t#11 0xc0102aac in __alltraps () at kern/trap/trapentry.S:24\n\t#12 0xc0368fb4 in ?? ()\n\tBacktrace stopped: previous frame inner to this frame (corrupt stack?)\n\t\n\t-exec p current\n\t$8 = (struct proc_struct *) 0xc03554a0\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$9 = 0xc0368d70\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$11 = (void (*)()) 0xc010ba0d &lt;proc_run&#43;106&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$12 = 0xc036bf34\n\n### 从B切换到A switch_to之后\n\n注意到**B切换到A之后的栈**和**A切换到B之前的栈**是一致的\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03554a0) at kern/process/proc.c:233\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d52c in do_sleep (time=10) at kern/process/proc.c:1111\n\t#3  0xc0108b76 in philosopher_using_semaphore (arg=0x0) at kern/sync/check_sync.c:122\n\t#4  0xc010b31d in kernel_thread_entry () at kern/process/entry.S:6\n\t\n\t-exec p current\n\t$13 = (struct proc_struct *) 0xc0355580\n\t\n\t-exec p/x $esp\n\t$14 = 0xc036bf34\n\t\n\t-exec p $eip\n\t$15 = (void (*)()) 0xc010ba0d &lt;proc_run&#43;106&gt;\n\n\n</pre>\n<p></p>"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "subject": "进程切换的动态跟踪", "created": "2018-04-16T15:35:34Z", "content": "<p>piazza的编辑令浏览器崩溃&#xff0c;markdown地址&#xff1a;<a href=\"https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/switch_to.md\">https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/switch_to.md</a></p>\n<p></p>\n<pre>## 先放结论\n\n* switch_to函数完成了保存现场到prev&#xff0c;从next恢复现场的功能\n* 如果被切换的进程是新建立的&#xff0c;从switch_to返回&#xff0c;则会到&lt;forkret&gt;。forkret之后会从__trapret回到kernel_thread_entry开始执行。\n* 如果被切换的进程是已有的&#xff0c;从switch_to返回&#xff0c;则会到&lt;proc_run&#43;106&gt;。这时该进程就恢复到上回调用switch_to的情况&#xff0c;如同switch_to什么都没做一般返回。\n* 整体来说&#xff0c;如果忽略新创建的进程&#xff0c;每个非运行状态的进程都会有个最上层是proc_run的栈。\n\t* 以时间角度来讲&#xff0c;switch_to会从一个进程的proc_run栈&#xff0c;转到另一个进程的proc_run栈。\n\t* 以进程角度来讲&#xff0c;每个进程调用switch_to&#xff0c;都会在一段时间后从switch_to函数返回&#xff0c;继续执行。\n\n### 汇编速查\n\t\n\t//switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n\t0xc010b9f7 &lt;proc_run&#43;84&gt;:\tmov    -0x10(%ebp),%eax\n\t0xc010b9fa &lt;proc_run&#43;87&gt;:\tlea    0x1c(%eax),%edx\n\t0xc010b9fd &lt;proc_run&#43;90&gt;:\tmov    -0xc(%ebp),%eax\n\t0xc010ba00 &lt;proc_run&#43;93&gt;:\tadd    $0x1c,%eax\n\t0xc010ba03 &lt;proc_run&#43;96&gt;:\tsub    $0x8,%esp\n\t0xc010ba06 &lt;proc_run&#43;99&gt;:\tpush   %edx\n\t0xc010ba07 &lt;proc_run&#43;100&gt;:\tpush   %eax\n\t0xc010ba08 &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t0xc010ba0d &lt;proc_run&#43;106&gt;:\tadd    $0x10,%esp\n\n\n## 第一次switch_to&#xff0c;零号线程切换到一号线程\n\n### 调用switch_to前\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03550e8) at kern/process/proc.c:231\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d48d in cpu_idle () at kern/process/proc.c:1082\n\t#3  0xc01000b6 in kern_init () at kern/init/init.c:55\n\t#4  0xc0100028 in relocated () at kern/init/entry.S:27\n\t\n\t-exec p prev\n\t$1 = (struct proc_struct *) 0xc0355008\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$4 = 0xc014df70\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$7 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$3 = 0xc0358fb4\n\n### 从switch_to函数返回以后\n\n\t-exec bt\n\t#0  forkret () at kern/process/proc.c:241\n\t\n\t-exec p current\n\t$2 = (struct proc_struct *) 0xc03550e8\n\t\n\t-exec p $eip\n\t$2 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x $esp\n\t$1 = 0xc0358fb4\n\n\n## 两个线程的相互切换\n\n### 从A切换到B switch_to之前\n\ndo_sleep进入等待状态&#xff0c;引发切换\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03554a0) at kern/process/proc.c:231\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d52c in do_sleep (time=10) at kern/process/proc.c:1111\n\t#3  0xc0108b76 in philosopher_using_semaphore (arg=0x0) at kern/sync/check_sync.c:122\n\t#4  0xc010b31d in kernel_thread_entry () at kern/process/entry.S:6\n\t\n\t-exec p prev\n\t$2 = (struct proc_struct *) 0xc0355580\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$3 = 0xc036bf34\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$5 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$6 = 0xc0368fb4\n\n### 从A切换到B switch_to之后\n\n\t-exec bt\n\t#0  forkret () at kern/process/proc.c:242\n\t#1  0x00000000 in ?? ()\n\t\n\t-exec p current\n\t$7 = (struct proc_struct *) 0xc03554a0\n\t\n\t-exec p $eip\n\t$9 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x $esp\n\t$8 = 0xc0368fb4\n\n### 从B切换到A switch_to之前\n\n系统调用引发切换\n\n\t-exec bt\n\t#0  proc_run (proc=0xc0355580) at kern/process/proc.c:228\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc0110325 in dev_stdin_read (buf=0xc0388000 &#34; tdout&#34;, len=1) at kern/fs/devs/dev_stdin.c:55\n\t#3  0xc01103da in stdin_io (dev=0xc03551c8, iob=0xc0368e7c, write=0) at kern/fs/devs/dev_stdin.c:87\n\t#4  0xc010facc in dev_read (node=0xc03551c8, iob=0xc0368e7c) at kern/fs/devs/dev.c:36\n\t#5  0xc010a0b2 in file_read (fd=0, base=0xc0388000, len=1, copied_store=0xc0368ecc) at kern/fs/file.c:226\n\t#6  0xc010ad0f in sysfile_read (fd=0, base=0xafffff47, len=1) at kern/fs/sysfile.c:80\n\t#7  0xc010e066 in sys_read (arg=0xc0368f34) at kern/syscall/syscall.c:107\n\t#8  0xc010e224 in syscall () at kern/syscall/syscall.c:199\n\t#9  0xc0102940 in trap_dispatch (tf=0xc0368fb4) at kern/trap/trap.c:217\n\t#10 0xc0102a52 in trap (tf=0xc0368fb4) at kern/trap/trap.c:298\n\t#11 0xc0102aac in __alltraps () at kern/trap/trapentry.S:24\n\t#12 0xc0368fb4 in ?? ()\n\tBacktrace stopped: previous frame inner to this frame (corrupt stack?)\n\t\n\t-exec p current\n\t$8 = (struct proc_struct *) 0xc03554a0\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$9 = 0xc0368d70\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$11 = (void (*)()) 0xc010ba0d &lt;proc_run&#43;106&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$12 = 0xc036bf34\n\n### 从B切换到A switch_to之后\n\n注意到**B切换到A之后的栈**和**A切换到B之前的栈**是一致的\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03554a0) at kern/process/proc.c:233\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d52c in do_sleep (time=10) at kern/process/proc.c:1111\n\t#3  0xc0108b76 in philosopher_using_semaphore (arg=0x0) at kern/sync/check_sync.c:122\n\t#4  0xc010b31d in kernel_thread_entry () at kern/process/entry.S:6\n\t\n\t-exec p current\n\t$13 = (struct proc_struct *) 0xc0355580\n\t\n\t-exec p/x $esp\n\t$14 = 0xc036bf34\n\t\n\t-exec p $eip\n\t$15 = (void (*)()) 0xc010ba0d &lt;proc_run&#43;106&gt;\n\n\n</pre>\n<p></p>"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "subject": "进程切换的动态跟踪", "created": "2018-04-16T12:30:16Z", "content": "<p>piazza的编辑令浏览器崩溃&#xff0c;markdown地址&#xff1a;<a href=\"https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/switch_to.md\">https://github.com/oscourse-tsinghua/os2018-hzhwcmhf/blob/master/course_exercises/switch_to.md</a></p>\n<p></p>\n<p></p>\n<p><br /></p>\n<pre>## 先放结论\n\n* switch_to函数完成了保存现场到prev&#xff0c;从next恢复现场的功能\n* 如果被切换的进程是新建立的&#xff0c;从switch_to返回&#xff0c;则会到&lt;forkret&gt;。forkret之后会从__trapret回到用户代码。\n* 如果被切换的进程是已有的&#xff0c;从switch_to返回&#xff0c;则会到&lt;proc_run&#43;106&gt;。这时该进程就恢复到上回调用switch_to的情况&#xff0c;如同switch_to什么都没做一般返回。\n* 整体来说&#xff0c;如果忽略新创建的进程&#xff0c;每个非运行状态的进程都会有个最上层是proc_run的栈。\n\t* 以时间角度来讲&#xff0c;switch_to会从一个进程的proc_run栈&#xff0c;转到另一个进程的proc_run栈。\n\t* 以进程角度来讲&#xff0c;每个进程调用switch_to&#xff0c;都会在一段时间后从switch_to函数返回&#xff0c;继续执行。\n\n### 汇编速查\n\t\n\t//switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n\t0xc010b9f7 &lt;proc_run&#43;84&gt;:\tmov    -0x10(%ebp),%eax\n\t0xc010b9fa &lt;proc_run&#43;87&gt;:\tlea    0x1c(%eax),%edx\n\t0xc010b9fd &lt;proc_run&#43;90&gt;:\tmov    -0xc(%ebp),%eax\n\t0xc010ba00 &lt;proc_run&#43;93&gt;:\tadd    $0x1c,%eax\n\t0xc010ba03 &lt;proc_run&#43;96&gt;:\tsub    $0x8,%esp\n\t0xc010ba06 &lt;proc_run&#43;99&gt;:\tpush   %edx\n\t0xc010ba07 &lt;proc_run&#43;100&gt;:\tpush   %eax\n\t0xc010ba08 &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t0xc010ba0d &lt;proc_run&#43;106&gt;:\tadd    $0x10,%esp\n\n\n## 系统开始时第一次switch_to\n\n### 调用switch_to前\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03550e8) at kern/process/proc.c:231\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d48d in cpu_idle () at kern/process/proc.c:1082\n\t#3  0xc01000b6 in kern_init () at kern/init/init.c:55\n\t#4  0xc0100028 in relocated () at kern/init/entry.S:27\n\t\n\t-exec p prev\n\t$1 = (struct proc_struct *) 0xc0355008\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$4 = 0xc014df70\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$7 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$3 = 0xc0358fb4\n\n### 从switch_to函数返回以后\n\n\t-exec bt\n\t#0  forkret () at kern/process/proc.c:241\n\t\n\t-exec p current\n\t$2 = (struct proc_struct *) 0xc03550e8\n\t\n\t-exec p $eip\n\t$2 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x $esp\n\t$1 = 0xc0358fb4\n\n\n## 两个线程的相互切换\n\n### 从A切换到B switch_to之前\n\ndo_sleep进入等待状态&#xff0c;引发切换\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03554a0) at kern/process/proc.c:231\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d52c in do_sleep (time=10) at kern/process/proc.c:1111\n\t#3  0xc0108b76 in philosopher_using_semaphore (arg=0x0) at kern/sync/check_sync.c:122\n\t#4  0xc010b31d in kernel_thread_entry () at kern/process/entry.S:6\n\t\n\t-exec p prev\n\t$2 = (struct proc_struct *) 0xc0355580\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$3 = 0xc036bf34\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$5 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$6 = 0xc0368fb4\n\n### 从A切换到B switch_to之后\n\n\t-exec bt\n\t#0  forkret () at kern/process/proc.c:242\n\t#1  0x00000000 in ?? ()\n\t\n\t-exec p current\n\t$7 = (struct proc_struct *) 0xc03554a0\n\t\n\t-exec p $eip\n\t$9 = (void (*)()) 0xc010ba21 &lt;forkret&gt;\n\t\n\t-exec p/x $esp\n\t$8 = 0xc0368fb4\n\n### 从B切换到A switch_to之前\n\n系统调用引发切换\n\n\t-exec bt\n\t#0  proc_run (proc=0xc0355580) at kern/process/proc.c:228\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc0110325 in dev_stdin_read (buf=0xc0388000 &#34; tdout&#34;, len=1) at kern/fs/devs/dev_stdin.c:55\n\t#3  0xc01103da in stdin_io (dev=0xc03551c8, iob=0xc0368e7c, write=0) at kern/fs/devs/dev_stdin.c:87\n\t#4  0xc010facc in dev_read (node=0xc03551c8, iob=0xc0368e7c) at kern/fs/devs/dev.c:36\n\t#5  0xc010a0b2 in file_read (fd=0, base=0xc0388000, len=1, copied_store=0xc0368ecc) at kern/fs/file.c:226\n\t#6  0xc010ad0f in sysfile_read (fd=0, base=0xafffff47, len=1) at kern/fs/sysfile.c:80\n\t#7  0xc010e066 in sys_read (arg=0xc0368f34) at kern/syscall/syscall.c:107\n\t#8  0xc010e224 in syscall () at kern/syscall/syscall.c:199\n\t#9  0xc0102940 in trap_dispatch (tf=0xc0368fb4) at kern/trap/trap.c:217\n\t#10 0xc0102a52 in trap (tf=0xc0368fb4) at kern/trap/trap.c:298\n\t#11 0xc0102aac in __alltraps () at kern/trap/trapentry.S:24\n\t#12 0xc0368fb4 in ?? ()\n\tBacktrace stopped: previous frame inner to this frame (corrupt stack?)\n\t\n\t-exec p current\n\t$8 = (struct proc_struct *) 0xc03554a0\n\t\n\t-exec p $eip\n\t$6 = (void (*)()) 0xc010ba08 &lt;proc_run&#43;101&gt;\n\t&gt;&gt; &lt;proc_run&#43;101&gt;:\tcall   0xc010d541 &lt;switch_to&gt;\n\t\n\t-exec p/x $esp\n\t$9 = 0xc0368d70\n\t\n\t-exec p (void(*)())next-&gt;context-&gt;eip\n\t$11 = (void (*)()) 0xc010ba0d &lt;proc_run&#43;106&gt;\n\t\n\t-exec p/x next-&gt;context-&gt;esp\n\t$12 = 0xc036bf34\n\n### 从B切换到A switch_to之后\n\n注意到**B切换到A之后的栈**和**A切换到B之前的栈**是一致的\n\n\t-exec bt\n\t#0  proc_run (proc=0xc03554a0) at kern/process/proc.c:233\n\t#1  0xc010db49 in schedule () at kern/schedule/sched.c:95\n\t#2  0xc010d52c in do_sleep (time=10) at kern/process/proc.c:1111\n\t#3  0xc0108b76 in philosopher_using_semaphore (arg=0x0) at kern/sync/check_sync.c:122\n\t#4  0xc010b31d in kernel_thread_entry () at kern/process/entry.S:6\n\t\n\t-exec p current\n\t$13 = (struct proc_struct *) 0xc0355580\n\t\n\t-exec p/x $esp\n\t$14 = 0xc036bf34\n\t\n\t-exec p $eip\n\t$15 = (void (*)()) 0xc010ba0d &lt;proc_run&#43;106&gt;\n\n\n</pre>\n\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "ie7xy2fekwm1np", "subject": "进程切换的动态跟踪", "created": "2018-04-10T01:19:59Z", "content": "<p>之后会补上switch_to堆栈切换的跟踪过程</p>"}], "type": "note", "tags": ["2018", "lecture12", "student"], "tag_good": [{"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 139, "children": [], "tag_good_arr": ["hdjonbiyfs62ie"], "id": "jfszavfq3y76pj", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169371509, "default_anonymity": "no"}, "error": null, "aid": "kyv0m9h14bv4zo"}