{"result": {"history_size": 1, "folders": ["lab2"], "nr": 1350, "data": {"embed_links": []}, "created": "2019-09-17T03:34:29Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "jmvdbehpMaFj", "data": "k0naa1wfpn23nr", "type": "create", "when": "2019-09-17T03:34:29Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "k2tsucw25m620z", "to": "k0naa1wct233nq", "type": "i_answer", "when": "2019-11-11T02:20:11Z"}, {"anon": "no", "uid": "kma28mmq2242ou", "data": "kn49ov847t517p", "to": "k0naa1wct233nq", "type": "s_answer", "when": "2021-04-05T07:23:37Z"}, {"anon": "no", "uid": "kma28mmq2242ou", "data": "kn49plg0uvd1ht", "type": "s_answer_update", "when": "2021-04-05T07:24:11Z"}, {"anon": "no", "uid": "kma28mmq2242ou", "data": "kn49q6is2vg1rv", "type": "s_answer_update", "when": "2021-04-05T07:24:38Z"}, {"anon": "no", "uid": "kma28mmq2242ou", "data": "kn4duqfgukr6to", "type": "s_answer_update", "when": "2021-04-05T09:20:09Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "jmvdbehpMaFj", "subject": "关于内核二级页表的虚拟地址", "created": "2019-09-17T03:34:29Z", "content": "有个疑问&#xff0c;lab2中是如何设置内核二级页表的虚拟地址是连续的0xFAC00000~0xFB000000&#xff1f;\n\n看ucore的代码&#xff0c;内核页表是通过调用boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W)建立起来&#xff0c;建立过程中&#xff0c;如果二级页表不存在&#xff0c;则调用get_pte(pgdir, la, 1) &#xff0c;再调用alloc_page()来建立二级页表。并不能指定内核页表的虚地址。\n\n没想通&#xff0c;求解答。"}], "type": "question", "tags": ["lab2", "student"], "tag_good": [{"role": "student", "name": "ZYOYO", "endorser": {}, "admin": false, "photo": "1616123641_200.jpg", "id": "kma28mmq2242ou", "photo_url": "https://cdn-uploads.piazza.com/photos/kma28mmq2242ou/1616123641_200.jpg", "published": true, "us": false, "facebook_id": null}], "unique_views": 152, "children": [{"history_size": 1, "folders": [], "data": {"embed_links": []}, "created": "2019-11-11T02:20:11Z", "bucket_order": 3, "tag_endorse": [], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "", "created": "2019-11-11T02:20:11Z", "content": "<p>页表的虚拟地址一定是连续的&#xff0c;而且所有进程的页表起始虚拟地址都是一样的&#xff1b;而物理地址可以是不连续的。</p>\n<p></p>\n<p>你可以先理解地址转换的过程&#xff0c;然后再分析页表项的地址转换过程。看能否想明白。如果还有问题&#xff0c;可以继续提问。</p>"}], "type": "i_answer", "tag_endorse_arr": [], "children": [], "id": "k2tsucvy7i720y", "config": {}, "is_tag_endorse": false}, {"history_size": 4, "folders": [], "data": {"embed_links": []}, "created": "2021-04-05T07:23:37Z", "bucket_order": 3, "tag_endorse": [], "bucket_name": "Today", "history": [{"anon": "no", "uid": "kma28mmq2242ou", "subject": "", "created": "2021-04-05T09:20:09Z", "content": "<md>通过pmm_init中的boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;\n因为VPT = 0xFAC00000，[0xFAC00000, 0xFB000000)这个范围的地址对应的pde指向pdt这个表，12~21位作为pdt的index得到对应的pte，然后得到page table的物理地址。alloc_page返回的地址是不连续的，通过page2pa函数得到物理地址，写进pte里面的是物理地址，结果就是老师说的：页表的虚拟地址是连续的，而且所有进程的页表起始虚拟地址都是一样的（就是VPT）；而物理地址可以是不连续的。\n不知道有没有表达清楚，希望能帮助到你~</md>"}, {"anon": "no", "uid": "kma28mmq2242ou", "subject": "", "created": "2021-04-05T07:24:38Z", "content": "<md>通过pmm_init中的boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;\n因为VPT = 0xFAC00000，[0xFAC00000, 0xFB000000)这个范围的地址对应的pde指向pdt这个表，12~21位作为pdt的index得到对应的pte，然后得到page table的物理地址。alloc_page返回的地址是不连续的，但是通过page2pa函数得到物理地址，写进pte里面的是物理地址，结果就是老师说的：页表的虚拟地址是连续的，而且所有进程的页表起始虚拟地址都是一样的（就是VPT）；而物理地址可以是不连续的。\n但是其实alloc_page返回的地址（是一个虚拟地址）映射到的也是页表的物理地址，也就是说页表的虚拟地址其实有两个，一个是连续的0xFAC00000~0xFB000000，一个是不一定连续的alloc_page返回的地址，通过它们都能访问到页表。你问的应该是后一个虚拟地址，这确实没办法保证连续，但是内核去找页表的时候都是通过第一个虚拟地址来找的，第二个虚拟地址其实没有用，甚至后续可能会被重写映射到别的物理地址上面去（通过page_insert函数）\n不知道有没有表达清楚，希望能帮助到你~</md>"}, {"anon": "no", "uid": "kma28mmq2242ou", "subject": "", "created": "2021-04-05T07:24:11Z", "content": "<md>通过pmm_init中的boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;\n因为VPT = 0xFAC00000，[0xFAC00000, 0xFB000000)这个范围的地址对应的pde指向pdt这个表，12~21位作为pdt的index得到对应的pte，然后得到page table的物理地址。alloc_page返回的地址是不连续的，但是通过page2pa函数得到物理地址，写进pte里面的是物理地址，结果就是老师说的：页表的虚拟地址是连续的，而且所有进程的页表起始虚拟地址都是一样的（就是VPT）；而物理地址可以是不连续的。\n但是其实alloc_page返回的地址（是一个虚拟地址）映射到的也是页表的物理地址，也就是说页表的虚拟地址其实有两个，一个是连续的0xFAC00000~0xFB000000，一个是不一定连续的alloc_page返回的地址，你问的应该是后一个虚拟地址，这确实没办法保证连续，但是内核去找页表的时候都是通过第一个虚拟地址来找的，第二个虚拟地址其实没有用，甚至后续可能会被重写映射到别的物理地址上面去（通过page_insert函数）\n不知道有没有表达清楚，希望能帮助到你~</md>"}, {"anon": "no", "uid": "kma28mmq2242ou", "subject": "", "created": "2021-04-05T07:23:37Z", "content": "<md>通过pmm_init中的boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;\n因为VPT = 0xFAC00000，[0xFAC00000, 0xFB000000)这个范围的地址对应的pde指向pdt这个表，12~21位作为pdt的index得到对应的pte，然后得到page table的物理地址。alloc_page返回的地址是不连续的，但是通过page2pa函数得到物理地址，写进pte里面的是物理地址，结果就是老师说的：页表的虚拟地址是连续的，而且所有进程的页表起始虚拟地址都是一样的（就是VPT）；而物理地址可以是不连续的。\n但是其实alloc_page返回的地址（是一个虚拟地址）指向的也是页表的物理地址，也就是说页表的虚拟地址其实有两个，一个是连续的0xFAC00000~0xFB000000，一个是不一定连续的alloc_page返回的地址，你问的应该是后一个虚拟地址，这确实没办法保证连续，但是内核去找页表的时候都是通过第一个虚拟地址来找的，第二个虚拟地址其实没有用，甚至后续可能会被重写映射到别的物理地址上面去（通过page_insert函数）\n不知道有没有表达清楚，希望能帮助到你~</md>"}], "type": "s_answer", "tag_endorse_arr": [], "children": [], "id": "kn49ov832v17o", "config": {"editor": "md"}, "is_tag_endorse": false}], "tag_good_arr": ["kma28mmq2242ou"], "no_answer": 0, "id": "k0naa1wct233nq", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169809696, "default_anonymity": "no"}, "error": null, "aid": "kyv0vnkw7c5bd"}