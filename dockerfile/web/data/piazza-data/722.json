{"result": {"folders": ["lecture9", "课堂问答"], "nr": 722, "data": {"embed_links": []}, "created": "2016-03-21T04:53:02Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-21T04:53:02Z", "data": "im1inytiz7175c", "type": "create"}, {"uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-21T22:28:56Z", "data": "im2kduop56318y", "type": "update"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0f9pvv0uxm6ko", "subject": "【课堂问题】设计置换算法时需要考虑的影响因素", "created": "2016-03-21T22:28:56Z", "content": "<p>通过分析可以得到&#xff0c;设计置换算法的时候需要考虑的影响因素主要有以下&#xff1a;</p>\n<p>1.实现难度</p>\n<p>一开始&#xff0c;在我看来这个微不足道&#xff0c;但是老师说这是一个很重要的衡量标准。不像我们平时写代码&#xff0c;可能实现难度大只是可能要更多的时间写。但在工业界&#xff0c;对于首先编码花费的时间就是一个很重要的指标。更重要的是&#xff0c;一个实现困难的算法&#xff0c;就更难去通过各种各样的性能测试&#xff0c;这样会导致人们对于该算法的认识不足。同时&#xff0c;对于操作系统这样一个安全性等要求极高的软件&#xff0c;不能有漏洞也是很重要的一点&#xff0c;而实现困难的代码也相应地导致更难发现的漏洞&#xff0c;极大地增加了验证的困难。</p>\n<p>2.时间</p>\n<p>这个指标的重要性不言而喻。需要说明的是&#xff0c;我们不仅仅需要它有一个好的运行效率&#xff0c;还需要它的耗时比较均摊&#xff0c;不会一下子用去系统太多的时间进行置换&#xff0c;这样给用户的感觉就是卡死。</p>\n<p>3.空间</p>\n<p>一个算法需要使用的空间也是很重要的衡量标准。一般来说&#xff0c;当然越小的空间越好。事实上&#xff0c;在计算机体系结构中&#xff0c;较小的额外空间需求意味着这个算法是否能硬件实现&#xff0c;比如LRU由于需要维护所有页的一个栈&#xff0c;会极大的消耗空间&#xff08;现有操作系统下1M&#xff09;&#xff0c;无法很好的用硬件支持。而时钟算法只需要修改页的一位&#xff0c;通过TLB机制硬件可以很好地支持。</p>\n<p>4.应用特性</p>\n<p>对于算法的执行性能&#xff0c;场景也是很重要的衡量标准。针对特定的应用背景而设计的算法&#xff0c;肯定会比通用的算法取得更好的效果。一个极端的例子是&#xff0c;视频播放这个应用场景&#xff0c;由于视频正常播放时&#xff0c;会按顺序一路读取一段连续的内存&#xff0c;任何缺页算法都几乎无法奏效。对于这些特殊性质的应用场景&#xff0c;必须设计相应的置换算法。</p>\n<p>5.算法特性</p>\n<p>算法特性也是一个需要考虑的影响因素。比如&#xff0c;课上提到的一个belady现象就是需要避免的现象。belady现象的产生会给用户造成困扰&#xff0c;对于FIFO算法来说&#xff0c;用户可能为了加快一个进程的运行效率给它分配更多的空间&#xff0c;但导致的结果是反而变慢了。同时&#xff0c;belady现象产生也间接地表明了一个算法的逻辑不适合这个应用场景。</p>"}, {"anon": "no", "uid": "i0f9pvv0uxm6ko", "subject": "【课堂问题】设计置换算法时需要考虑的影响因素", "created": "2016-03-21T04:53:02Z", "content": "<p>通过分析可以得到&#xff0c;设计置换算法的时候需要考虑的影响因素主要有以下&#xff1a;</p>\n<p>1.实现难度</p>\n<p>一开始&#xff0c;在我看来这个微不足道&#xff0c;但是老师说这是一个很重要的衡量标准。不像我们平时写代码&#xff0c;可能实现难度大只是可能要更多的时间写。但在工业界&#xff0c;对于首先编码花费的时间就是一个很重要的指标。更重要的是&#xff0c;一个实现困难的算法&#xff0c;就更难去通过各种各样的性能测试&#xff0c;这样会导致人们对于该算法的认识不足。同时&#xff0c;对于操作系统这样一个安全性等要求极高的软件&#xff0c;不能有漏洞也是很重要的一点&#xff0c;而实现困难的代码也相应地导致更难发现的漏洞&#xff0c;极大地增加了验证的困难。</p>\n<p>2.时间</p>\n<p>这个指标的重要性不言而喻。需要说明的是&#xff0c;我们不仅仅需要它有一个好的运行效率&#xff0c;还需要它的耗时比较均摊&#xff0c;不会一下子用去系统太多的时间进行置换&#xff0c;这样给用户的感觉就是卡死。</p>\n<p>3.空间</p>\n<p>一个算法需要使用的空间也是很重要的衡量标准。一般来说&#xff0c;当然越小的空间越好。事实上&#xff0c;在计算机体系结构中&#xff0c;较小的额外空间需求意味着这个算法是否能硬件实现&#xff0c;比如LRU由于需要维护所有页的一个栈&#xff0c;会极大的消耗空间&#xff08;现有操作系统下1M&#xff09;&#xff0c;无法很好的用硬件支持。而时钟算法只需要修改页的一位&#xff0c;通过TLB机制硬件可以很好地支持。</p>\n<p>4.应用特性</p>\n<p>对于算法的执行性能&#xff0c;场景也是很重要的衡量标准。针对特定的应用背景而设计的算法&#xff0c;肯定会比通用的算法取得更好的效果。一个极端的例子是&#xff0c;视频播放这个应用场景&#xff0c;由于视频正常播放时&#xff0c;会按顺序一路读取一段连续的内存&#xff0c;任何缺页算法都几乎无法奏效。对于这些特殊性质的应用场景&#xff0c;必须设计相应的置换算法。</p>\n<p>5.算法特性</p>\n<p>算法特性也是一个需要考虑的影响因素。比如&#xff0c;课上提到的一个belady现象就是需要避免的现象。belady现象的产生会给用户造成困扰&#xff0c;对于FIFO算法来说&#xff0c;用户可能为了加快一个进程的运行效率给它分配更多的空间&#xff0c;但导致的结果是反而变慢了。同时&#xff0c;belady现象产生也间接地表明了一个算法的逻辑不适合这个应用场景。</p>"}], "type": "note", "tags": ["lecture9", "student", "课堂问答"], "tag_good": [], "unique_views": 153, "children": [], "tag_good_arr": [], "id": "im1inyted8u75b", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168361036, "default_anonymity": "no"}, "error": null, "aid": "kyv00lsc9lq5j1"}