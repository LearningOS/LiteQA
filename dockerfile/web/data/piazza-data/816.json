{"result": {"folders": ["lab6", "lecture16", "课堂问答", "2016"], "nr": 816, "data": {"embed_links": []}, "created": "2016-04-20T03:05:10Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-20T03:05:10Z", "data": "in8a0t7q27c2rg", "type": "create"}, {"to": "in8a0t7oklw2rf", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-20T03:06:21Z", "type": "followup"}, {"to": "in8a0t7oklw2rf", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-20T03:06:43Z", "type": "followup"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-20T08:17:45Z", "data": "in8l6scojjf6dd", "type": "update"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-20T08:22:09Z", "data": "in8lcgewq42yp", "type": "update"}, {"to": "in8a0t7oklw2rf", "uid": "i0dlq4m0wjn5eo", "anon": "no", "when": "2016-04-20T08:34:09Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-20T08:34:15Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i0c1nsm3911wc", "anon": "no", "when": "2016-04-20T08:37:06Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i0gl5kctugw3xi", "anon": "no", "when": "2016-04-20T08:37:12Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i242q8ug7vw40x", "anon": "no", "when": "2016-04-20T08:37:16Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i0gkdbms5ie20o", "anon": "no", "when": "2016-04-20T08:51:09Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ikvcvr0o2bs7m3", "anon": "no", "when": "2016-04-20T08:52:49Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ie7xy71bn7b1s2", "anon": "no", "when": "2016-04-20T08:57:39Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i6w84pnmjCQ", "anon": "no", "when": "2016-04-20T08:58:17Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i0brpl1lbyui6", "anon": "no", "when": "2016-04-20T09:06:21Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i6w84pnmjCQ", "anon": "no", "when": "2016-04-20T09:08:31Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i1bzj2xilgm4uk", "anon": "no", "when": "2016-04-20T09:23:13Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i21zpwab2z775p", "anon": "no", "when": "2016-04-20T09:23:47Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i18riqkwrl225m", "anon": "no", "when": "2016-04-20T10:03:15Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ic226rq2vask0", "anon": "no", "when": "2016-04-20T11:22:08Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i6ub5at2geM", "anon": "no", "when": "2016-04-20T11:43:16Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ikvcvqz0jx17m1", "anon": "no", "when": "2016-04-20T13:16:43Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i6uiksj895B", "anon": "no", "when": "2016-04-20T14:04:50Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i3qk2vs65x276j", "anon": "no", "when": "2016-04-21T03:26:01Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ic226rac4j5jw", "anon": "no", "when": "2016-04-21T03:34:06Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i0ccqbaxwdz75c", "anon": "no", "when": "2016-04-21T05:03:43Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ikvcvp62fcm7ka", "anon": "no", "when": "2016-04-21T06:21:27Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ikx8y1dzPrM", "anon": "no", "when": "2016-04-21T06:47:28Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i70lz5f0QKm", "anon": "no", "when": "2016-04-21T07:18:06Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "i28skba6cd976f", "anon": "no", "when": "2016-04-21T09:09:55Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "ikvcvnzpzq7j7", "anon": "no", "when": "2016-04-21T11:04:52Z", "type": "feedback"}, {"to": "in8a0t7oklw2rf", "uid": "im4yagyfl3chl", "anon": "no", "when": "2016-04-21T13:29:41Z", "type": "feedback"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-23T14:48:57Z", "data": "ind9hfhtgstw2", "type": "update"}, {"to": "in8a0t7oklw2rf", "uid": "i0hjdkesg9c5z7", "anon": "no", "when": "2016-05-22T10:24:49Z", "type": "feedback"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "izs3k6ekoq34k6", "type": "update", "when": "2017-03-02T07:56:08Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十六讲 课堂思考题回答-向勇班", "created": "2017-03-02T07:56:08Z", "content": "<p>请向勇班的同学把“第十六讲 实验六 调度器”中指定小题的回答结果写在此贴中对应题目后面。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题</a></p>\n<p></p>\n<p>第十六讲的回答的截止时间是明天&#xff08;20160421&#xff09;晚20点前。</p>\n<p></p>\n<p>要求&#xff1a;每个依据自己对课程内容的掌握情况&#xff0c;选择做“跟踪和展现ucore的处理机调度过程”或“理解调度算法支撑框架的执行过程”。不需要两种选择都做。最多二个人一组&#xff0c;也可以独立回答。</p>\n<p></p>\n<p>优胜者&#xff1a;</p>\n<p></p>\n<p>选择做“跟踪和展现ucore的处理机调度过程”的同学<br />霍健炜2016110024<br />郑兆衡 2013011389 张浩天 2013011416<br />沈哲言 2013011371 叶子鹏 2013011404<br />朱俸民 2012011894 朱新瑞 2013011411<br />2013011412 杨明 2013011406 谢琛睿</p>\n<p></p>\n<p>选择做“理解调度算法支撑框架的执行过程”的同学<br />高博 2012012139 赵涵 2012011383<br />王智默 2012011355 高越 2012011379</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十六讲 课堂思考题回答-向勇班", "created": "2016-04-23T14:48:57Z", "content": "<p>请向勇班的同学把“第十六讲 实验六 调度器”中指定小题的回答结果写在此贴中对应题目后面。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题</a></p>\n<p></p>\n<p>第十六讲的回答的截止时间是明天&#xff08;20160421&#xff09;晚20点前。</p>\n<p></p>\n<p>要求&#xff1a;每个依据自己对课程内容的掌握情况&#xff0c;选择做“跟踪和展现ucore的处理机调度过程”或“理解调度算法支撑框架的执行过程”。不需要两种选择都做。最多二个人一组&#xff0c;也可以独立回答。</p>\n<p></p>\n<p>优胜者&#xff1a;</p>\n<p></p>\n<p>选择做“跟踪和展现ucore的处理机调度过程”的同学<br />霍健炜2016110024<br />郑兆衡 2013011389 张浩天 2013011416<br />沈哲言 2013011371 叶子鹏 2013011404<br />朱俸民 2012011894 朱新瑞 2013011411<br />2013011412 杨明 2013011406 谢琛睿</p>\n<p></p>\n<p>选择做“理解调度算法支撑框架的执行过程”的同学<br />高博 2012012139 赵涵 2012011383<br />王智默 2012011355 高越 2012011379</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十六讲 课堂思考题回答-向勇班", "created": "2016-04-20T08:22:09Z", "content": "<p>请向勇班的同学把“第十六讲 实验六 调度器”中指定小题的回答结果写在此贴中对应题目后面。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题</a></p>\n<p></p>\n<p>第十六讲的回答的截止时间是明天&#xff08;20160421&#xff09;晚20点前。</p>\n<p></p>\n<p>要求&#xff1a;每个依据自己对课程内容的掌握情况&#xff0c;选择做“跟踪和展现ucore的处理机调度过程”或“理解调度算法支撑框架的执行过程”。不需要两种选择都做。最多二个人一组&#xff0c;也可以独立回答。</p>\n<p></p>\n<p>优胜者&#xff1a;</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十六讲 课堂思考题回答-向勇班", "created": "2016-04-20T08:17:45Z", "content": "<p>请向勇班的同学把“第十六讲 实验六 调度器”中指定小题的回答结果写在此贴中对应题目后面。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题</a></p>\n<p></p>\n<p>第十六讲的回答的截止时间是明天&#xff08;20160421&#xff09;晚20点前。</p>\n<p></p>\n<p>要求&#xff1a;每个依据自己对课程内容的掌握情况&#xff0c;选择做“跟踪和展现ucore的处理机调度过程”或“理解调度算法支撑框架的执行过程”。不需要两种选择都做。最多二个人一组&#xff0c;也可以独立回答。</p>\n<p></p>\n<p>优胜者&#xff1a;</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十六讲 课堂思考题回答-向勇班", "created": "2016-04-20T03:05:10Z", "content": "<p>请向勇班的同学把“第十六讲 实验六 调度器”中指定小题的回答结果写在此贴中对应题目后面。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#小组练习与思考题</a></p>\n<p></p>\n<p>第十六讲的回答的截止时间是明天&#xff08;20160421&#xff09;晚20点前。</p>\n<p></p>\n<p>要求&#xff1a;每个依据自己对课程内容的掌握情况&#xff0c;选择做“跟踪和展现ucore的处理机调度过程”或“理解调度算法支撑框架的执行过程”。不需要两种选择都做。最多二个人一组&#xff0c;也可以独立回答。</p>\n<p></p>\n<p>优胜者&#xff1a;</p>"}], "type": "note", "tags": ["2016", "instructor-note", "lab6", "lecture16", "课堂问答"], "tag_good": [], "unique_views": 229, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#1spoc-跟踪和展现ucore的处理机调度过程\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#1spoc-跟踪和展现ucore的处理机调度过程</a></p>\n<p></p>\n<p>选择做“跟踪和展现ucore的处理机调度过程”的同学的回答结果写在此贴后面。</p>", "created": "2016-04-20T03:06:21Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>郑兆衡 2013011389 张浩天 2013011416</p>\n<p></p>\n<p>我们在kern/schedule/sched.c中的schedule函数中加入如下代码</p>\n<pre>if (next != current) {\n\t    print_stackframe();\n\t    //print_debuginfo(current-&gt;tf-&gt;tf_eip);\n            proc_run(next);\n            print_stackframe();\n\t    //print_debuginfo(next-&gt;tf-&gt;tf_eip);\n        }</pre>\n<p>结果如下</p>\n<pre>ebp:0xc03bfe68 eip:0xc0101f67 args:0xc03b62a8 0x0000000a 0xc03bfe98 0xc010a537 \n    kern/debug/kdebug.c:350: print_stackframe&#43;21\nebp:0xc03bfe98 eip:0xc010ca9c args:0x00000003 0xafffff98 0x00000004 0x00000001 \n    kern/schedule/sched.c:96: schedule&#43;119\nebp:0xc03bfec8 eip:0xc010bf03 args:0x00000003 0xafffff98 0xc03bffb4 0x00000000 \n    kern/process/proc.c:737: do_wait&#43;221\nebp:0xc03bfef8 eip:0xc010cb35 args:0xc03bff24 0x0000000a 0x00000000 0x00000000 \n    kern/syscall/syscall.c:27: sys_wait&#43;42\nebp:0xc03bff48 eip:0xc010cc8b args:0x00000000 0x00000000 0x00000000 0x00000000 \n    kern/syscall/syscall.c:108: syscall&#43;117\nebp:0xc03bff78 eip:0xc0103d3e args:0xc03bffb4 0x00000000 0x00800020 0x0000001b \n    kern/trap/trap.c:217: trap_dispatch&#43;299\nebp:0xc03bffa8 eip:0xc0103e83 args:0xc03bffb4 0x00800335 0x00000003 0xafffff44 \n    kern/trap/trap.c:285: trap&#43;74\nebp:0xafffff44 eip:0xc0103ed8 args:0x00000003 0x00000003 0xafffff98 0xafffff78 \n    kern/trap/trapentry.S:24: &lt;unknown&gt;&#43;0\nebp:0xafffff58 eip:0x00800232 args:0x00000003 0xafffff98 0xafffff84 0x0000001f \n    user/libs/syscall.c:45: sys_wait&#43;31\nebp:0xafffff78 eip:0x00800335 args:0x00000003 0xafffff98 0x00000000 0x00000000 \n    user/libs/ulib.c:25: waitpid&#43;23\nebp:0xafffffa8 eip:0x008010a0 args:0x00000000 0x00000000 0x00000000 0x00000000 \n    user/exit.c:27: main&#43;191\nebp:0xafffffd8 eip:0x0080039c args:0x00000000 0x00000000 0x00000000 0x00000000 \n    user/libs/umain.c:7: umain&#43;10\nI am the child.\nebp:0xc03d0e68 eip:0xc0101f67 args:0xc03b6158 0xc03b6388 0xc03d0e98 0xc010a808 \n    kern/debug/kdebug.c:350: print_stackframe&#43;21\nebp:0xc03d0e98 eip:0xc010ca9c args:0x00000001 0x00000000 0xc03d0ec8 0xc0101812 \n    kern/schedule/sched.c:96: schedule&#43;119\nebp:0xc03d0ec8 eip:0xc010b64f args:0xfffefc7c 0x00000000 0x00000000 0x00000000 \n    kern/process/proc.c:503: do_exit&#43;423\nebp:0xc03d0ef8 eip:0xc010cad2 args:0xc03d0f24 0xc03b6334 0xc010c5a4 0x00000000 \n    kern/syscall/syscall.c:13: sys_exit&#43;24\nebp:0xc03d0f48 eip:0xc010cc8b args:0x00000001 0x00000000 0x00000000 0x00000000 \n    kern/syscall/syscall.c:108: syscall&#43;117\nebp:0xc03d0f78 eip:0xc0103d3e args:0xc03d0fb4 0x00000000 0x00000000 0x00000000 \n    kern/trap/trap.c:217: trap_dispatch&#43;299\nebp:0xc03d0fa8 eip:0xc0103e83 args:0xc03d0fb4 0xfffefc7c 0x0000000a 0xafffff48 \n    kern/trap/trap.c:285: trap&#43;74\nebp:0xafffff48 eip:0xc0103ed8 args:not valid addr afffff50, and  can not find it in vma</pre>\n<p></p>", "created": "2016-04-20T08:34:09Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0dlq4m0wjn5eo", "children": [], "tag_good_arr": [], "id": "in8lrvtoept2rw", "updated": "2016-04-20T08:34:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>沈哲言 2013011371 叶子鹏 2013011404</p>\n<p></p>\n<p><a href=\"https://github.com/Silver-Shen/OS_LAB/blob/master/labcodes_answer/lab6_result/kern/process/proc.c\" target=\"_blank\">proc_run代码入口</a></p>\n<p></p>\n<p>我们在proc_run 中加入了如下语句来获取保存在trapframe中的eip&#xff0c;然后输出eip对应的debug信息。</p>\n<p></p>\n<p>//line:220</p>\n<pre>            uintptr_t prev_eip = prev-&gt;tf? prev-&gt;tf-&gt;tf_eip:0;\n            uintptr_t next_eip = next-&gt;tf? next-&gt;tf-&gt;tf_eip:0;\n            if (prev_eip){\n            \tcprintf(&#34;prev proc: &#34;);\n            \tprint_debuginfo(prev_eip);\n            }\n            if (next_eip){\n            \tcprintf(&#34;next proc: &#34;);\n            \tprint_debuginfo(next_eip);\n            }\n            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));</pre>\n<p>原来的代码输出的都是syscall的位置&#xff0c;因为进程所做的事情都是系统调用&#xff08;比如print和yield&#xff09;</p>\n<p></p>\n<p>我们准备做如下这个测试&#xff1a;</p>\n<p>我们让用户程序执行while(1)&#xff0c;来测试时钟中断&#xff0c;以此证明在任何地方都可以进行进程切换。</p>\n<p>后来我们发现&#xff0c;</p>\n<p><strong>有一个方法&#xff0c;可以同时验证2个状态&#xff0c;</strong><strong>包括&#xff1a;</strong></p>\n<p><strong>1.系统调用syscall</strong></p>\n<p><strong>2.时钟中断</strong></p>\n<p><strong></strong></p>\n<p>我们输入&#xff1a;$make  priority 可以出现如下调试信息&#xff1a;</p>\n<pre>next proc:     kern/process/entry.S:6: &lt;unknown&gt;&#43;0<br />next proc:     kern/process/entry.S:6: &lt;unknown&gt;&#43;0<br />kernel_execve: pid = 2, name = &#34;priority&#34;.<br />main: fork ok,now need to wait pids.<br />prev proc:     user/libs/syscall.c:19: syscall&#43;72<br />next proc:     user/libs/syscall.c:19: syscall&#43;72<br />in!<br />prev proc:     user/priority.c:37: main&#43;149<br />next proc:     user/libs/syscall.c:19: syscall&#43;72<br />in!<br />prev proc:     user/priority.c:20: spin_delay&#43;15<br />next proc:     user/libs/syscall.c:19: syscall&#43;72<br />in!<br />prev proc:     user/priority.c:20: spin_delay&#43;15<br />next proc:     user/libs/syscall.c:19: syscall&#43;72<br />in!<br />prev proc:     user/priority.c:20: spin_delay&#43;15<br />next proc:     user/libs/syscall.c:19: syscall&#43;72</pre>\n<p>其中spin_delay是由于时钟中断&#xff0c;syscall是由于系统调用。</p>", "created": "2016-04-20T08:34:15Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0f24oie8102cr", "children": [], "tag_good_arr": [], "id": "in8ls0gs7f62sp", "updated": "2016-04-20T08:34:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>朱俸民 2012011894  朱新瑞 2013011411</p>\n<p></p>\n<p>见仓库 <a href=\"https://github.com/paulzfm/ucore-os-lab/tree/lab6_spoc\" target=\"_blank\">https://github.com/paulzfm/ucore-os-lab/tree/lab6_spoc</a></p>\n<p></p>\n<p>主要将切换前后两个 process 的 context eip 和 trapframe eip 输出出来&#xff1a;(kern/process/proc.c)</p>\n<p></p>\n<pre>...\t    \n            lcr3(next-&gt;cr3);\n            if (prev-&gt;tf) {\n                cprintf(&#34;proc_run: prev eip = 0x%x, trap eip = 0x%x\\n&#34;, (prev-&gt;context).eip, prev-&gt;tf-&gt;tf_eip);\n\t\tprint_debuginfo(prev-&gt;tf-&gt;tf_eip);\n            }\n            if (next-&gt;tf) {\n                cprintf(&#34;proc_run: next eip = 0x%x, trap eip = 0x%x\\n&#34;, (next-&gt;context).eip, next-&gt;tf-&gt;tf_eip);\n\t\tprint_debuginfo(next-&gt;tf-&gt;tf_eip);\n            }\n            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));</pre>\n<p>matrix 那个例子的部分输出为</p>\n<p></p>\n<pre>...<br />schedule: current pid = 3\npid 3 is running (1000 times)!.\nschedule: current pid = 3\nschedule: ready to run pid = 5\nproc_run: prev eip = 0xc0108d51, trap eip = 0x800fde\n    user/matrix.c:30: work&#43;226\nproc_run: next eip = 0xc0108d3e, trap eip = 0x8001cb\n    user/libs/syscall.c:19: syscall&#43;71\npid 5 is running (1100 times)!.\nschedule: current pid = 5\nschedule: ready to run pid = 4\nproc_run: prev eip = 0xc0108d3e, trap eip = 0x800fde\n    user/matrix.c:30: work&#43;226\nproc_run: next eip = 0xc0108d3e, trap eip = 0x8001cb\n    user/libs/syscall.c:19: syscall&#43;71\npid 4 is running (1000 times)!.<br />...</pre>\n<p></p>", "created": "2016-04-20T08:37:06Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0c1nsm3911wc", "children": [], "tag_good_arr": [], "id": "in8lvnw3lnc59d", "updated": "2016-04-20T08:37:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>【这是课上使用Teamviewer进行讲解的解法】</p>\n<p>钱迪晨 2013011402 高思达 2013011413</p>\n<p></p>\n<p>在shed.c里面加上如下的代码&#xff0c;通过trapframe的eip获得。</p>\n<p></p>\n<pre>       if (next != current) {\n\t   // 为了看到进程的切换过程&#xff0c;打印指针\n    \t   cprintf(&#34;schedule debug curr = %08x next = %08x\\n&#34;, current, next);\n           // 通过trapframe拿到用户态的程序运行指针\n           if (current != NULL &amp;&amp; current-&gt;tf != NULL) {\n               cprintf(&#34;current eip print %08x\\n&#34;, current-&gt;tf-&gt;tf_eip);\n               print_debuginfo(current-&gt;tf-&gt;tf_eip);\n           }\n           if (next != NULL &amp;&amp; next-&gt;tf != NULL) {\n               cprintf(&#34;next eip print %08x\\n&#34;, next-&gt;tf-&gt;tf_eip);\n               print_debuginfo(next-&gt;tf-&gt;tf_eip);\n           }\n\n            proc_run(next);\n        }</pre>\n<p>这里print_debuginfo是打印函数的内容的函数。</p>\n<p>运行priority得到的结果</p>\n<p>&#xff08;make run-priority&#xff09;</p>\n<pre>schedule debug curr = c03927e8 next = c0392698\ncurrent eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nnext eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nschedule debug curr = c0392698 next = c0392548\ncurrent eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nnext eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nschedule debug curr = c0392548 next = c03927e8\ncurrent eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nnext eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nschedule debug curr = c03927e8 next = c0392698\ncurrent eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nnext eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nschedule debug curr = c0392698 next = c03923f8\ncurrent eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nnext eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nschedule debug curr = c03923f8 next = c03927e8\ncurrent eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15\nnext eip print 00800fef\n    user/priority.c:20: spin_delay&#43;15</pre>\n<p>当前有5个进程在运行priority.c中的spin_delay函数&#xff0c;该函数一直在循环执行第20行的语句&#xff0c;因此每次切换时因为时间片用完&#xff0c;每次的位置都是该行。</p>\n<p>通过打印各进程对应的proc_struct的指针&#xff0c;可以看到有多个进程在相互切换。</p>", "created": "2016-04-20T08:37:12Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0gl5kctugw3xi", "children": [], "tag_good_arr": [], "id": "in8lvt4dfrj5aj", "updated": "2016-04-20T08:37:12Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2013011356 董豪宇</p>\n<p>2013011302 李奕昕</p>\n<p>楼上在占坑.........</p>\n<p></p>\n<p>在proc_run里加这个?</p>\n<pre>cprintf(&#34;kernel: pid %d eip is 0x%08x =&gt; pid %d eip is 0x%08x\\n&#34;, prev-&gt;pid, prev-&gt;context.eip, next-&gt;pid, next-&gt;context.eip);\nif (prev-&gt;tf) {\n    cprintf(&#34;from: pid %d eip is 0x%08x\\n&#34;, prev-&gt;pid, prev-&gt;tf-&gt;tf_eip);\n}\nif (next-&gt;tf) {\n    cprintf(&#34;to: pid %d eip is 0x%08x\\n&#34;, next-&gt;pid, next-&gt;tf-&gt;tf_eip);\n}</pre>\n<p>如果说程序是用户态的话 那么从异常返回的时候应该会用tf下的eip, 但其他的情况的确想的不太清楚.... 比如内核中的程序自己比较无聊然后自己调用了schedule.....</p>", "created": "2016-04-20T08:37:16Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i242q8ug7vw40x", "children": [], "tag_good_arr": [], "id": "in8lvvv9tvv3om", "updated": "2016-04-20T08:37:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>乔奕 2013011324</p>\n<p>在proc_run一开始加入</p>\n<pre>cprintf(&#34;Process Switch Happened\\n&#34;);\nif(prev-&gt;tf)<br />    cprintf(&#34;From process %d %s %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip);\nif(next-&gt;tf)\n    cprintf(&#34;To process %d %s %x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);</pre>\n<p></p>", "created": "2016-04-20T08:51:09Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0gkdbms5ie20o", "children": [], "tag_good_arr": [], "id": "in8mdqxff7e1u8", "updated": "2016-04-20T08:51:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011366 尚智伟</p>\n<pre> if ((next = sched_class_pick_next()) != NULL) {\n        \tprint_stackframe();\n            sched_class_dequeue(next);\n        }</pre>\n<p>在sched.c里面的schedule()函数&#xff0c;在试图切换进程的时候低调用print_stackframe()打印程序运行的堆栈信息&#xff0c;以此来根据堆栈中的信息来跟踪程序的执行情况。</p>", "created": "2016-04-20T08:52:49Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ikvcvr0o2bs7m3", "children": [], "tag_good_arr": [], "id": "in8mfw1jpog2hl", "updated": "2016-04-20T08:52:49Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011509郭嘉丞</p>\n<p><a href=\"https://github.com/gjc13/ucore_os_lab/tree/lab6_spoc\">https://github.com/gjc13/ucore_os_lab/tree/lab6_spoc</a></p>\n<p>在schedule函数的切换前后增加了打印trapframe中的eip的代码</p>", "created": "2016-04-20T08:57:39Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ie7xy71bn7b1s2", "children": [], "tag_good_arr": [], "id": "in8mm3w2sud4jt", "updated": "2016-04-20T08:57:39Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>改写<tt>proc_run</tt>如下&#xff0c;<tt>make qemu</tt>即可看到结果</p>\n<pre>void<br />proc_run(struct proc_struct *proc) {<br />    if (proc != current) {<br />        bool intr_flag;<br />        struct proc_struct *prev = current, *next = proc;<br />        <br />        if (prev-&gt;tf) {<br />            cprintf(&#34;Before:\\n&#34;);<br />            print_debuginfo(prev-&gt;tf-&gt;tf_eip);<br />        }<br /><br />        local_intr_save(intr_flag);<br />        {<br />            current = proc;<br />            load_esp0(next-&gt;kstack &#43; KSTACKSIZE);<br />            lcr3(next-&gt;cr3);<br />            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));<br />            <br />        }<br />        <br />        if (next-&gt;tf) {<br />            cprintf(&#34;After:\\n&#34;);<br />            print_debuginfo(next-&gt;tf-&gt;tf_eip);<br />        }<br />        <br />        local_intr_restore(intr_flag);<br />    }<br />}</pre>\n<p>2012011355 王智默</p>\n<p>2012011379 高越</p>", "created": "2016-04-20T08:58:17Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i6w84pnmjCQ", "children": [], "tag_good_arr": [], "id": "in8mmwqrndm2np", "updated": "2016-04-20T08:58:17Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011412 杨明 2013011406 谢琛睿</p>\n<p>在sched.c中加入&#xff1a;</p>\n<pre>        if (next != current) {\n            if(current-&gt;tf!=NULL){\n                cprintf(&#34;pre eip: 0x%x\\n&#34;, current-&gt;tf-&gt;tf_eip);\n                print_debuginfo(current-&gt;tf-&gt;tf_eip);\n            }\n            if(next-&gt;tf!=NULL){\n                cprintf(&#34;nxt eip: 0x%x\\n&#34;, next-&gt;tf-&gt;tf_eip);\n                print_debuginfo(next-&gt;tf-&gt;tf_eip);\n\t    }\n            proc_run(next);\n        }</pre>\n<p>结果如下&#xff1a;</p>\n<pre>&#43;&#43; setup timer interrupts<br />nxt eip: 0xc010a6c0<br />    kern/process/entry.S:6: &lt;unknown&gt;&#43;0<br />pre eip: 0x0<br />    &lt;unknow&gt;: -- 0x00000000 --<br />nxt eip: 0xc010a6c0<br />    kern/process/entry.S:6: &lt;unknown&gt;&#43;0<br />kernel_execve: pid = 2, name = &#34;exit&#34;.<br />I am the parent. Forking the child...<br />I am parent, fork a child pid 3<br />I am the parent, waiting now..<br />pre eip: 0x8001d5<br />    user/libs/syscall.c:19: syscall&#43;72<br />nxt eip: 0x8001d5<br />    user/libs/syscall.c:19: syscall&#43;72<br />I am the child.<br />pre eip: 0x8001d5<br />    &lt;unknow&gt;: -- 0x008001d5 --<br />nxt eip: 0x8001d5<br />    &lt;unknow&gt;: -- 0x008001d5 --<br />waitpid 3 ok.<br />exit pass.<br />pre eip: 0x8001d5<br />    &lt;unknow&gt;: -- 0x008001d5 --<br />nxt eip: 0x0<br />    &lt;unknow&gt;: -- 0x00000000 --<br />all user-mode processes have quit.<br />init check memory pass.<br />kernel panic at kern/process/proc.c:460:<br />    initproc exit.</pre>\n<p></p>", "created": "2016-04-20T09:06:21Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0brpl1lbyui6", "children": [], "tag_good_arr": [], "id": "in8mxa4tf8p56s", "updated": "2016-04-20T09:06:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>proc_run()函数修改如下&#xff1a;</p>\n<pre>void\nproc_run(struct proc_struct *proc) {\n    if (proc != current) {\n        bool intr_flag;\n        struct proc_struct *prev = current, *next = proc;\n\tcprintf(&#34;Process Switch\\n&#34;);\n\tif(prev-&gt;tf){\n\t\tcprintf(&#34;from pid %d %s 0x%x\\n&#34;, prev-&gt;pid, prev-&gt;name, prev-&gt;tf-&gt;tf_eip);\n\t\tprint_debuginfo(prev-&gt;tf-&gt;tf_eip);\n\t}\n\tif(next-&gt;tf){\n\t\tcprintf(&#34;to pid %d %s 0x%x\\n&#34;, next-&gt;pid, next-&gt;name, next-&gt;tf-&gt;tf_eip);\n\t\tprint_debuginfo(next-&gt;tf-&gt;tf_eip);\t\n\t}\n        local_intr_save(intr_flag);\n        {\n            current = proc;\n            load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n            lcr3(next-&gt;cr3);\n            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n        }\n        local_intr_restore(intr_flag);\n    }\n}</pre>\n<p>输出结果如下&#xff1a;</p>\n<pre>...\nI am parent, fork a child pid 3\nI am the parent, waiting now..\nProcess Switch\nfrom pid 2 exit 0x8001d5\n    user/libs/syscall.c:19: syscall&#43;72\nto pid 3  0x8001d5\n    user/libs/syscall.c:19: syscall&#43;72\nI am the child.\n...</pre>\n<p>2013011355徐涵2013011339白家松</p>", "created": "2016-04-20T09:23:13Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i1bzj2xilgm4uk", "children": [], "tag_good_arr": [], "id": "in8niz5yfb130s", "updated": "2016-04-20T09:23:13Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>马志明 2013011395 王启圣2013011409</p>\n<p>在sched.c中加入如下部分代码</p>\n<pre>if (next != current) {\n    if (current-&gt;tf != NULL) {\n        cprintf(&#34;cur pid:%d, eip:0x%x&#34;, current-&gt;pid, current-&gt;tf-&gt;tf_eip);\n        print_debuginfo(current-&gt;tf-&gt;tf_eip);\n    }\n    if (next-&gt;tf != NULL) {\n        cprintf(&#34;nxt pid:%d, eip:0x%x&#34;, next-&gt;pid, next-&gt;tf-&gt;tf_eip);\n        print_debuginfo(next-&gt;tf-&gt;tf_eip);\n    }\n    proc_run(next);\n}</pre>\n<p>运行之后结果为</p>\n<pre>I am the parent, waiting now..<br />cur pid:2, eip:0x8001d5    user/libs/syscall.c:19: syscall&#43;72<br />nxt pid:3, eip:0x8001d5    user/libs/syscall.c:19: syscall&#43;72<br />I am the child.</pre>\n<p></p>", "created": "2016-04-20T09:23:47Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i21zpwab2z775p", "children": [], "tag_good_arr": [], "id": "in8njp9scoc5fq", "updated": "2016-04-20T09:23:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011297 杨青霖</p>\n<p>在proc_run开始处添加如下代码&#xff1a;</p>\n<pre>if(prev-&gt;tf)\n    cprintf(&#34;prev proc: %d %s %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip);\nif(next-&gt;tf)\n    cprintf(&#34;next proc: %d %s %x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);</pre>", "created": "2016-04-20T10:03:15Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i18riqkwrl225m", "children": [], "tag_good_arr": [], "id": "in8oygywfw72cd", "updated": "2016-04-20T10:03:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012080057 韩刘成</p>\n<p>在proc_run开始处添加如下代码&#xff1a;</p>\n<pre>cprintf(&#34;Process Switch Happened\\n&#34;);\nif(prev-&gt;tf)\n    cprintf(&#34;From process %d %s %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip);\nif(next-&gt;tf)\n    cprintf(&#34;To process %d %s %x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);</pre>\n<p></p>", "created": "2016-04-20T11:22:08Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ic226rq2vask0", "children": [], "tag_good_arr": [], "id": "in8rrwz3lp26o", "updated": "2016-04-20T11:22:08Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在sched.c的schedule()函数中&#xff0c;next != current切换时加入打印&#xff1a;</p>\n<pre>cprintf(&#34;Hahahaha---------\\n&#34;);\nif (current-&gt;tf != NULL)\n    cprintf(&#34;Current pid:%d, Ending eip:0x%x\\n&#34;, current-&gt;pid, current-&gt;tf-&gt;tf_eip);\nif (next-&gt;tf != NULL)\n    cprintf(&#34;Next pid:%d, Starting eip:0x%x\\n&#34;, next-&gt;pid, next-&gt;tf-&gt;tf_eip);</pre>\n<p>出现类似</p>\n<pre>Hahahaha---------\nCurrent pid:1, Ending eip:0x0\nNext pid:2, Starting eip:0xc01092ea</pre>\n<p>看到第一个中没有Current&#xff0c;最后一个没有Next。</p>\n<p>金嘉宇 2012080059</p>\n<p>章晔    2012011321</p>", "created": "2016-04-20T11:43:16Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i6ub5at2geM", "children": [], "tag_good_arr": [], "id": "in8sj3dkr5v5gw", "updated": "2016-04-20T11:43:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>俞寒轩 2012011333</p>\n<p>肖迪     2012011306</p>\n<p></p>\n<p>修改sched.c中的schedule函数的切换部分&#xff0c;将切换前两进程的context和tf中的eip信息输出&#xff1a;</p>\n<pre>if (next != current) \n{\n    cprintf(&#34;From %d to %d\\n&#34;, current-&gt;pid, next-&gt;pid);\n    if (current-&gt;tf) \n    {\n        cprintf(&#34;pre position: tf:0x%x  context:0x%x\\n&#34;, current-&gt;tf-&gt;tf_eip, (current-&gt;context).eip);\n    }\n    if (next-&gt;tf) \n    {\n        cprintf(&#34;next position: tf:0x%x  context:0x%x\\n&#34;, next-&gt;tf-&gt;tf_eip, (next-&gt;context).eip);\n    }\n    proc_run(next);\n}</pre>\n<p>得到输出如下</p>\n<pre>From 0 to 1\nnext position: tf:0xc010a7a3  context:0xc010aeb8\nFrom 1 to 2\npre position: tf:0x0  context:0xc010aeb8\nnext position: tf:0xc010a7a3  context:0xc010aeb8\nkernel_execve: pid = 2, name = &#34;exit&#34;.\nI am the parent. Forking the child...\nI am parent, fork a child pid 3\nI am the parent, waiting now..\nFrom 2 to 3\npre position: tf:0x8001d5  context:0xc010aeb8\nnext position: tf:0x8001d5  context:0xc010aeb8\nI am the child.\nFrom 3 to 2\npre position: tf:0x8001d5  context:0xc010aeb8\nnext position: tf:0x8001d5  context:0xc010aeab\nwaitpid 3 ok.\nexit pass.\nFrom 2 to 1\npre position: tf:0x8001d5  context:0xc010aeab\nnext position: tf:0x0  context:0xc010aeab</pre>\n<p>如果是中断造成的切换应该根据tf&#xff0c;若是同特权级之间的切换程序则是根据context</p>", "created": "2016-04-20T13:16:43Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ikvcvqz0jx17m1", "children": [], "tag_good_arr": [], "id": "in8vv9q3ovy38w", "updated": "2016-04-20T13:16:43Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>赖国堃 2012011372 徐捷2012011371</p>\n<p></p>\n<p>可以在sche.c的schedule函数中&#xff0c;</p>\n<p>当next != current的时候&#xff0c;调用debug函数&#xff0c;答应eip的值</p>\n<p>具体代码为</p>\n<p></p>\n<p>if (current-&gt;tf != NULL)<br /> cprintf(&#34;Current pid:%d, Ending eip:0x%x\\n&#34;, current-&gt;pid, current-&gt;tf-&gt;tf_eip);<br /> if (next-&gt;tf != NULL)<br /> cprintf(&#34;Next pid:%d, Starting eip:0x%x\\n&#34;, next-&gt;pid, next-&gt;tf-&gt;tf_eip);<br /> }</p>\n<p></p>\n<p>结果为</p>\n<p>Current pid:2, Ending eip:0x8001d5<br />Next pid:3, Starting eip:0x8001d5</p>", "created": "2016-04-20T14:04:50Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i6uiksj895B", "children": [], "tag_good_arr": [], "id": "in8xl4oxdy46zo", "updated": "2016-04-20T14:04:50Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011296 贺子松</p>\n<p>在proc_run函数开头加入如下代码&#xff1a;</p>\n<pre>if(prev-&gt;tf)\n    cprintf(&#34;from process pid&#xff1a;%d name:%s eip: %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip);\nif(next-&gt;tf)\n    cprintf(&#34;to process pid: %d name:%s eip%x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);</pre>\n<p></p>", "created": "2016-04-21T03:26:01Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i3qk2vs65x276j", "children": [], "tag_good_arr": [], "id": "in9q7gslf152fl", "updated": "2016-04-21T03:26:01Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>何乐 2013011351 郭栋2013011334</p>\n<p>修改proc_run:</p>\n<pre>void<br />proc_run(struct proc_struct *proc) {<br />    if (proc != current) {<br />        bool intr_flag;<br />        struct proc_struct *prev = current, *next = proc;<br />\tif(prev-&gt;tf) <br />            cprintf(&#34;from process pid&#xff1a;%d name:%s eip: %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip);<br />        if(next-&gt;tf)<br />            cprintf(&#34;to process pid: %d name:%s eip%x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);<br />        local_intr_save(intr_flag);<br />        {<br />            current = proc;<br />            load_esp0(next-&gt;kstack &#43; KSTACKSIZE);<br />            lcr3(next-&gt;cr3);<br />            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));<br />        }<br />        local_intr_restore(intr_flag);<br />    }<br />}</pre>\n<p></p>", "created": "2016-04-21T05:03:43Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0ccqbaxwdz75c", "children": [], "tag_good_arr": [], "id": "in9tp42h51y2ic", "updated": "2016-04-21T05:03:43Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>周恩泽 2012012617</p>\n<p>在sched.c的schedule函数中加入代码&#xff0c;打印切换前后进程信息即可&#xff1a;</p>\n<pre>        if (next != current) {\n            cprintf(&#34;schedule:\\n&#34;);\n            if (current) {\n                cprintf(&#34;current pid:%d name:%s\\n&#34;, current-&gt;pid, current-&gt;name);\n                if (current-&gt;tf) {\n                    print_debuginfo(current-&gt;tf-&gt;tf_eip);\n                }\n            }\n            if (next) {\n                cprintf(&#34;next pid:%d name:%s\\n&#34;, next-&gt;pid, next-&gt;name);\n                if (next-&gt;tf) {\n                    print_debuginfo(next-&gt;tf-&gt;tf_eip);\n                }\n            }\n\n            proc_run(next);\n        }</pre>\n<p>make qemu可看到结果</p>", "created": "2016-04-21T06:21:27Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ikvcvp62fcm7ka", "children": [], "tag_good_arr": [], "id": "in9wh2oztdu37o", "updated": "2016-04-21T06:21:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>krajna 2014010527</p>\n<p>修改proc_run()函数的代码&#xff0c;打印切换前后两个进程的tf-&gt;tf_eip打印出来</p>\n<p></p>\n<p>if(prev-&gt;tf!=NULL){<br /> cprintf(&#34;prev: %d %x\\n&#34;,prev-&gt;pid,prev-&gt;tf-&gt;tf_eip);<br /> print_debuginfo (prev-&gt;tf-&gt;tf_eip);<br /> }<br /> if(next-&gt;tf!=NULL){<br /> cprintf(&#34;next: %d %x\\n&#34;,next-&gt;pid,next-&gt;tf-&gt;tf_eip);<br /> print_debuginfo (next-&gt;tf-&gt;tf_eip);<br /> }</p>\n<p></p>\n<p>输出结果</p>\n<p>kernel_execve: pid = 2, name = &#34;exit&#34;.<br />I am the parent. Forking the child...<br />I am parent, fork a child pid 3<br />I am the parent, waiting now..<br />prev: 2 8001d5<br /> user/libs/syscall.c:19: syscall&#43;72<br />next: 3 8001d5<br /> user/libs/syscall.c:19: syscall&#43;72<br />I am the child.</p>", "created": "2016-04-21T06:47:28Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ikx8y1dzPrM", "children": [], "tag_good_arr": [], "id": "in9xej7fzy777l", "updated": "2016-04-21T06:47:28Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011307 黄必胜</p>\n<p>在<a href=\"https://github.com/chyyuu/ucore_os_lab/blob/master/labcodes_answer/lab6_result/kern/process/proc.c#L210\" target=\"_blank\">proc_run</a>函数中&#xff0c;在switch_to调用前&#xff0c;增加相应的调试信息输出。<br />修改后的函数如下&#xff1a;</p>\n<pre>void\nproc_run(struct proc_struct *proc) {\n    if (proc != current) {\n        bool intr_flag;\n        struct proc_struct *prev = current, *next = proc;\n        local_intr_save(intr_flag);\n        {\n            current = proc;\n            load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n            lcr3(next-&gt;cr3);\n            \n            if (prev-&gt;tf) {\n                cprintf(&#34;Prev proc info:\\n&#34;);\n                print_debuginfo(prev-&gt;tf-&gt;tf_eip);\n            }\n            if (next-&gt;tf) {\n                cprintf(&#34;Next proc info:\\n&#34;);\n                print_debuginfo(next-&gt;tf-&gt;tf_eip);\n            }           <br />\n            switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n        }\n        local_intr_restore(intr_flag);\n    }\n}</pre>\n<p></p>", "created": "2016-04-21T07:18:06Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i70lz5f0QKm", "children": [], "tag_good_arr": [], "id": "in9yhxhebgf60l", "updated": "2016-04-21T07:18:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>张殿炎2013011328 叶方轲2013011340</p>\n<p>在proc_run函数开头加入如下代码&#xff1a;</p>\n<pre>if(prev-&gt;tf)<br />\tcprintf(&#34;prev proc: %d %s %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip); <br />if(next-&gt;tf)<br />\tcprintf(&#34;next proc: %d %s %x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);</pre>\n<p></p>", "created": "2016-04-21T09:09:55Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i28skba6cd976f", "children": [], "tag_good_arr": [], "id": "ina2hqeujdr5gg", "updated": "2016-04-21T09:09:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012080060 甄显安   2012011308 陆喆</p>\n<p>在proc_run()中加入如下代码&#xff1a;</p>\n<pre>if (prev-&gt;tf) {\n\tcprintf(&#34;Prev %s, pid: %d, tf-&gt;eip: 0x%08x, context-&gt;eip: 0x%08x\\n&#34;, prev-&gt;name, prev-&gt;pid, prev-&gt;tf-&gt;tf_eip, (prev-&gt;context).eip);\n\tprint_debuginfo(prev-&gt;tf-&gt;tf_eip);\n}\nif (next-&gt;tf) {\n\tcprintf(&#34;Next %s, pid: %d, tf-&gt;eip: 0x%08x, context-&gt;eip: 0x%08x\\n&#34;, next-&gt;name, next-&gt;pid, next-&gt;tf-&gt;tf_eip, (next-&gt;context).eip);\n\tprint_debuginfo(next-&gt;tf-&gt;tf_eip);\n}</pre>\n<p>结果&#xff1a;</p>\n<pre>&#43;&#43; setup timer interrupts\nNext init, pid: 1, tf-&gt;eip: 0xc0109cdc, context-&gt;eip: 0xc010a483\n    kern/process/entry.S:6: &lt;unknown&gt;&#43;0\nPrev init, pid: 1, tf-&gt;eip: 0x00000000, context-&gt;eip: 0xc010a483\n    &lt;unknow&gt;: -- 0x00000000 --\nNext , pid: 2, tf-&gt;eip: 0xc0109cdc, context-&gt;eip: 0xc010a483\n    kern/process/entry.S:6: &lt;unknown&gt;&#43;0\nkernel_execve: pid = 2, name = &#34;exit&#34;.\nI am the parent. Forking the child...\nI am parent, fork a child pid 3\nI am the parent, waiting now..\nPrev exit, pid: 2, tf-&gt;eip: 0x008000fd, context-&gt;eip: 0xc010a483\n    user/libs/syscall.c:19: syscall&#43;72\nNext , pid: 3, tf-&gt;eip: 0x008000fd, context-&gt;eip: 0xc010a483\n    user/libs/syscall.c:19: syscall&#43;72\nI am the child.\nPrev , pid: 3, tf-&gt;eip: 0x008000fd, context-&gt;eip: 0xc010a483\n    &lt;unknow&gt;: -- 0x008000fd --\nNext exit, pid: 2, tf-&gt;eip: 0x008000fd, context-&gt;eip: 0xc010a46c\n    &lt;unknow&gt;: -- 0x008000fd --\nwaitpid 3 ok.\nexit pass.\nPrev exit, pid: 2, tf-&gt;eip: 0x008000fd, context-&gt;eip: 0xc010a46c\n    &lt;unknow&gt;: -- 0x008000fd --\nNext init, pid: 1, tf-&gt;eip: 0x00000000, context-&gt;eip: 0xc010a46c\n    &lt;unknow&gt;: -- 0x00000000 --\nall user-mode processes have quit.</pre>\n<p></p>", "created": "2016-04-21T11:04:52Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ikvcvnzpzq7j7", "children": [], "tag_good_arr": [], "id": "ina6ljx4mgb37m", "updated": "2016-04-21T11:04:52Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>&#xff08;更新于2016-04-27&#xff09;</p>\n<p>参考了上面的回应&#xff0c;可改写kern/schedule/sched.c中的schedule函数&#xff0c;打印stackframe、current、next的各种信息&#xff1a;</p>\n<p>&#xff08;还有proc_run(next)后的函数似乎不会被执行&#xff0c;switchto之后就返回到next的context的eip&#xff09;</p>\n<p></p>\n<pre>if (next != current) {<br />    {<br />        cprintf (&#34;print_stackframe() inside schedule():\\n&#34;);<br />        print_stackframe();<br /><br />        cprintf(&#34;current:\\n&#34;);<br />        cprintf (&#34;\\tpid:   \\t%d,           \\tproc name: \\t\\&#34;%s\\&#34; \\n&#34;, current-&gt;pid, current-&gt;name);<br />        cprintf (&#34;\\tcr3: \\t0x%08x, \\tkstack: \\t0x%08x \\n&#34;, current-&gt;cr3, current-&gt;kstack);<br />        if (current-&gt;parent == NULL){<br />            cprintf(&#34;\\tparent:\\tNo parent\\n&#34;);<br />        }else {<br />            cprintf(&#34;\\tparent:\\t%s (pid=%d)\\n&#34;, current-&gt;parent-&gt;name, current-&gt;parent-&gt;pid);<br />        }<br /><br />        if (current-&gt;tf == NULL){<br />            cprintf (&#34;\\tcurrent-&gt;tf = NULL\\n&#34;);<br />        }else{<br />            uintptr_t  eip=current-&gt;tf-&gt;tf_eip;<br />            cprintf (&#34;\\tcurrent-&gt;tf-&gt;tf_eip \\t= 0x%08x \\t&#34;, eip);<br />            print_debuginfo(eip);<br />        }<br /><br />        uintptr_t  eip2=(current-&gt;context).eip;<br />        cprintf (&#34;\\t(current-&gt;context).eip \\t= 0x%08x \\t&#34;, eip2);<br />        print_debuginfo(eip2);<br />    }<br />    {<br />        cprintf(&#34;\\nnext:\\n&#34;);<br />        cprintf (&#34;\\tpid:   \\t%d,          \\tproc name: \\t\\&#34;%s\\&#34; \\n&#34;, next-&gt;pid, next-&gt;name);<br />        cprintf (&#34;\\tcr3: \\t0x%08x, \\tkstack: \\t0x%08x \\n&#34;, next-&gt;cr3, next-&gt;kstack);<br />        if (next-&gt;parent == NULL){<br />            cprintf(&#34;\\tparent:\\tNo parent\\n&#34;);<br />        }else {<br />            cprintf(&#34;\\tparent:\\t%s (pid=%d)\\n&#34;, next-&gt;parent-&gt;name, next-&gt;parent-&gt;pid);<br />        }<br /><br />        if (next-&gt;tf == NULL){<br />            cprintf (&#34;\\tnext-&gt;tf = NULL\\n&#34;);<br />        }else{<br />            uintptr_t  eip=next-&gt;tf-&gt;tf_eip;<br />            cprintf (&#34;\\tnext-&gt;tf-&gt;tf_eip \\t= 0x%08x \\t&#34;, eip);<br />            print_debuginfo(eip);<br />        }<br /><br />        uintptr_t  eip2=(next-&gt;context).eip;<br />        cprintf (&#34;\\t(next-&gt;context).eip \\t= 0x%08x \\t&#34;, eip2);<br />        print_debuginfo(eip2);<br /><br />    }<br /><br />    cprintf (&#34;------------------------------------------------------\\n&#34;);<br /><br />    proc_run(next);<br />}</pre>\n<p></p>\n<p>输出&#xff1a;</p>\n<pre>&#43;&#43; setup timer interrupts\nprint_stackframe() inside schedule():\nebp:0xc012ff78 eip:0xc0101f67 args:0xc0110350 0xc012ff88 0x00000001 0x00000000 \n    kern/debug/kdebug.c:350: print_stackframe&#43;21\nebp:0xc012ffb8 eip:0xc010caac args:0xc01034b4 0x00000008 0xc012fff8 0xc01000b6 \n    kern/schedule/sched.c:98: schedule&#43;135\nebp:0xc012ffc8 eip:0xc010c46c args:0xc010db5c 0xc010db40 0x000031a4 0x00000000 \n    kern/process/proc.c:899: cpu_idle&#43;22\nebp:0xc012fff8 eip:0xc01000b6 args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 \n    kern/init/init.c:0: kern_init&#43;139\ncurrent:\n\tpid:   \t0,           \tproc name: \t&#34;idle&#34; \n\tcr3: \t0x002d5000, \tkstack: \t0xc012e000 \n\tparent:\tNo parent\n\tcurrent-&gt;tf = NULL\n\t(current-&gt;context).eip \t= 0x00000000 \t    &lt;unknow&gt;: -- 0x00000000 --\n\nnext:\n\tpid:   \t1,          \tproc name: \t&#34;init&#34; \n\tcr3: \t0x002d5000, \tkstack: \t0xc03b7000 \n\tparent:\tidle (pid=0)\n\tnext-&gt;tf-&gt;tf_eip \t= 0xc010a7a3 \t    kern/process/entry.S:6: &lt;unknown&gt;&#43;0\n\t(next-&gt;context).eip \t= 0xc010aeb8 \t    kern/process/proc.c:239: forkret&#43;0\n------------------------------------------------------\nprint_stackframe() inside schedule():\nebp:0xc03b8f3c eip:0xc0101f67 args:0xc0110350 0x00000000 0xc03b8f58 0x00000000 \n    kern/debug/kdebug.c:350: print_stackframe&#43;21\nebp:0xc03b8f7c eip:0xc010caac args:0x00000010 0x00000000 0x00000000 0xc010a7a3 \n    kern/schedule/sched.c:98: schedule&#43;135\nebp:0xc03b8fac eip:0xc010bf03 args:0x00000000 0x00000000 0x00000000 0xc03b8fd4 \n    kern/process/proc.c:746: do_wait&#43;221\nebp:0xc03b8fec eip:0xc010c126 args:0x00000000 0x00000000 0x00000010 0x00000000 \n    kern/process/proc.c:843: init_main&#43;113\ncurrent:\n\tpid:   \t1,           \tproc name: \t&#34;init&#34; \n\tcr3: \t0x002d5000, \tkstack: \t0xc03b7000 \n\tparent:\tidle (pid=0)\n\tcurrent-&gt;tf-&gt;tf_eip \t= 0x00000000 \t    &lt;unknow&gt;: -- 0x00000000 --\n\t(current-&gt;context).eip \t= 0xc010aeb8 \t    kern/process/proc.c:239: forkret&#43;0\n\nnext:\n\tpid:   \t2,          \tproc name: \t&#34;&#34; \n\tcr3: \t0x002d5000, \tkstack: \t0xc03be000 \n\tparent:\tinit (pid=1)\n\tnext-&gt;tf-&gt;tf_eip \t= 0xc010a7a3 \t    kern/process/entry.S:6: &lt;unknown&gt;&#43;0\n\t(next-&gt;context).eip \t= 0xc010aeb8 \t    kern/process/proc.c:239: forkret&#43;0\n------------------------------------------------------\nkernel_execve: pid = 2, name = &#34;exit&#34;.\nI am the parent. Forking the child...\nI am parent, fork a child pid 3\nI am the parent, waiting now..\nprint_stackframe() inside schedule():\nebp:0xc03bfe58 eip:0xc0101f67 args:0xc0110350 0xdaa50003 0xc03bfe98 0xc010afa7 \n    kern/debug/kdebug.c:350: print_stackframe&#43;21\nebp:0xc03bfe98 eip:0xc010caac args:0x00000003 0xafffff98 0x00000004 0x00000001 \n    kern/schedule/sched.c:98: schedule&#43;135\nebp:0xc03bfec8 eip:0xc010bf03 args:0x00000003 0xafffff98 0xc03bffb4 0x00000000 \n    kern/process/proc.c:746: do_wait&#43;221\nebp:0xc03bfef8 eip:0xc010cd47 args:0xc03bff24 0x0000000a 0x00000000 0x00000000 \n    kern/syscall/syscall.c:27: sys_wait&#43;42\nebp:0xc03bff48 eip:0xc010ce9d args:0x00000000 0x00000000 0x00000000 0x00000000 \n    kern/syscall/syscall.c:108: syscall&#43;117\nebp:0xc03bff78 eip:0xc0103d3e args:0xc03bffb4 0x00000000 0x00800020 0x0000001b \n    kern/trap/trap.c:217: trap_dispatch&#43;299\nebp:0xc03bffa8 eip:0xc0103e83 args:0xc03bffb4 0x00800335 0x00000003 0xafffff44 \n    kern/trap/trap.c:285: trap&#43;74\nebp:0xafffff44 eip:0xc0103ed8 args:0x00000003 0x00000003 0xafffff98 0xafffff78 \n    kern/trap/trapentry.S:24: &lt;unknown&gt;&#43;0\nebp:0xafffff58 eip:0x00800232 args:0x00000003 0xafffff98 0xafffff84 0x0000001f \n    user/libs/syscall.c:45: sys_wait&#43;31\nebp:0xafffff78 eip:0x00800335 args:0x00000003 0xafffff98 0x00000000 0x00000000 \n    user/libs/ulib.c:25: waitpid&#43;23\nebp:0xafffffa8 eip:0x008010a0 args:0x00000000 0x00000000 0x00000000 0x00000000 \n    user/exit.c:27: main&#43;191\nebp:0xafffffd8 eip:0x0080039c args:0x00000000 0x00000000 0x00000000 0x00000000 \n    user/libs/umain.c:7: umain&#43;10\ncurrent:\n\tpid:   \t2,           \tproc name: \t&#34;exit&#34; \n\tcr3: \t0x003c0000, \tkstack: \t0xc03be000 \n\tparent:\tinit (pid=1)\n\tcurrent-&gt;tf-&gt;tf_eip \t= 0x008001d5 \t    user/libs/syscall.c:19: syscall&#43;72\n\t(current-&gt;context).eip \t= 0xc010aeb8 \t    kern/process/proc.c:239: forkret&#43;0\n\nnext:\n\tpid:   \t3,          \tproc name: \t&#34;&#34; \n\tcr3: \t0x003d1000, \tkstack: \t0xc03cf000 \n\tparent:\texit (pid=2)\n\tnext-&gt;tf-&gt;tf_eip \t= 0x008001d5 \t    user/libs/syscall.c:19: syscall&#43;72\n\t(next-&gt;context).eip \t= 0xc010aeb8 \t    kern/process/proc.c:239: forkret&#43;0\n------------------------------------------------------\nI am the child.\nprint_stackframe() inside schedule():\nebp:0xc03d0e58 eip:0xc0101f67 args:0xc0110350 0xb0000000 0xc03d0e98 0xc010ca22 \n    kern/debug/kdebug.c:350: print_stackframe&#43;21\nebp:0xc03d0e98 eip:0xc010caac args:0x00000001 0x00000000 0xc03d0ec8 0xc0101812 \n    kern/schedule/sched.c:98: schedule&#43;135\nebp:0xc03d0ec8 eip:0xc010b64f args:0xfffefc7c 0x00000000 0xc03d0f18 0xc010c72b \n    kern/process/proc.c:512: do_exit&#43;423\nebp:0xc03d0ef8 eip:0xc010cce4 args:0xc03d0f24 0xc010c5a4 0xc03b6334 0xc03b6334 \n    kern/syscall/syscall.c:13: sys_exit&#43;24\nebp:0xc03d0f48 eip:0xc010ce9d args:0x00000000 0x00000000 0x00000000 0x00000000 \n    kern/syscall/syscall.c:108: syscall&#43;117\nebp:0xc03d0f78 eip:0xc0103d3e args:0xc03d0fb4 0x00000000 0x00000000 0x00000000 \n    kern/trap/trap.c:217: trap_dispatch&#43;299\nebp:0xc03d0fa8 eip:0xc0103e83 args:0xc03d0fb4 0xfffefc7c 0x0000000a 0xafffff48 \n    kern/trap/trap.c:285: trap&#43;74\nebp:0xafffff48 eip:0xc0103ed8 args:not valid addr afffff50, and  can not find it in vma\ntrapframe at 0xc03d0ddc\n  edi  0xfffefc7c\n  esi  0x0000000a\n  ebp  0xc03d0e58\n  oesp 0xc03d0dfc\n  ebx  0x008002e6\n  edx  0x00000000\n  ecx  0xc00b8000\n  eax  0xafffff50\n  ds   0x----0010\n  es   0x----0010\n  fs   0x----0000\n  gs   0x----0000\n  trap 0x0000000e Page Fault\n  err  0x00000000\n  eip  0xc0101fb1\n  cs   0x----0008\n  flag 0x00000086 PF,SF,IOPL=0\nkernel panic at kern/trap/trap.c:208:\n    handle pgfault failed in kernel mode. ret=-3</pre>", "created": "2016-04-21T13:29:41Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "im4yagyfl3chl", "children": [], "tag_good_arr": [], "id": "inabrsf04zn107", "updated": "2016-04-21T13:29:41Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>王苏 2013011301</p>\n<p>王哲 2013012443</p>\n<p></p>\n<p>在proc_run开始处添加下面的 代码&#xff1a;</p>\n<pre>if(prev-&gt;tf)\n    cprintf(&#34;prev proc: %d %s %x \\n &#34;,prev-&gt;pid,prev-&gt;name,prev-&gt;tf-&gt;tf_eip);\nif(next-&gt;tf)\n    cprintf(&#34;next proc: %d %s %x \\n &#34;,next-&gt;pid,next-&gt;name,next-&gt;tf-&gt;tf_eip);</pre>", "created": "2016-05-22T10:24:49Z", "bucket_order": 203, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0hjdkesg9c5z7", "children": [], "tag_good_arr": [], "id": "ioiftgp3id71m9", "updated": "2016-05-22T10:24:49Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "in8a2brn9j47cd", "updated": "2016-04-20T03:06:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#2spoc-理解调度算法支撑框架的执行过程\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/06-2-lab6-spoc-discussion.md#2spoc-理解调度算法支撑框架的执行过程</a></p>\n<p></p>\n<p>选择做“理解调度算法支撑框架的执行过程”的同学的回答结果写在此贴后面。</p>", "created": "2016-04-20T03:06:43Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>代码见: <a href=\"http://172.16.13.236/wzm_andy/ucore_lab/blob/master/labcodes_answer/lab6_result/kern/schedule/default_sched.c\">http://172.16.13.236/wzm_andy/ucore_lab/blob/master/labcodes_answer/lab6_result/kern/schedule/default_sched.c</a></p>\n<p>报告见: <a href=\"http://172.16.13.236/wzm_andy/ucore_lab/blob/master/labcodes_answer/lab6_result/report.md\">http://172.16.13.236/wzm_andy/ucore_lab/blob/master/labcodes_answer/lab6_result/report.md</a></p>\n<p></p>\n<p>王智默 2012011355</p>\n<p>高越 2012011379</p>", "created": "2016-04-20T09:08:31Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i6w84pnmjCQ", "children": [], "tag_good_arr": [], "id": "in8n02hz7gnko", "updated": "2016-04-20T09:08:31Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>高博</p>\n<p>2012012139</p>\n<p>赵涵</p>\n<p>2012011383</p>\n<p></p>\n<p>工程&#xff1a;</p>\n<p><a href=\"https://github.com/gaobo1993/os_course_spoc_exercises/tree/master/all/lab6_result\" target=\"_blank\">project</a></p>\n<p>主要更改&#xff1a;</p>\n<p><a href=\"https://github.com/gaobo1993/os_course_spoc_exercises/blob/master/all/lab6_result/kern/process/proc.c\" target=\"_blank\">proc.c</a>  <a href=\"https://github.com/gaobo1993/os_course_spoc_exercises/blob/master/all/lab6_result/kern/schedule/sched.c\" target=\"_blank\">sched.c</a></p>\n<p>报告&#xff1a;</p>\n<p><a href=\"https://github.com/gaobo1993/os_course_spoc_exercises/blob/master/all/lab6_result/report.md\" target=\"_blank\">Report</a></p>", "created": "2016-04-21T03:34:06Z", "bucket_order": 207, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "ic226rac4j5jw", "children": [], "tag_good_arr": [], "id": "in9qhv7mbmc2vi", "updated": "2016-04-21T03:34:06Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "in8a2sk75egf8", "updated": "2016-04-20T03:06:43Z", "config": {}}], "tag_good_arr": [], "id": "in8a0t7oklw2rf", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 27, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168570299, "default_anonymity": "no"}, "error": null, "aid": "kyv05397w401ks"}