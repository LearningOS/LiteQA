{"result": {"folders": ["课堂问答"], "nr": 304, "data": {"embed_links": []}, "created": "2015-04-15T06:04:41Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-15T06:04:41Z", "data": "i8ic2mpxngf5oa", "type": "create"}, {"to": "i8ic2mpvmk45o9", "uid": "i6uunp7jxDb", "anon": "no", "when": "2015-04-15T06:05:59Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6t1w87gRBD", "anon": "no", "when": "2015-04-15T06:07:29Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6roqnlkmtw", "anon": "no", "when": "2015-04-15T06:07:54Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6s09f3xHOf", "anon": "no", "when": "2015-04-15T06:10:58Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6ublqcaxvu6el", "anon": "no", "when": "2015-04-15T06:11:20Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i718aanx0OS", "anon": "no", "when": "2015-04-15T06:27:22Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-15T06:27:54Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6uunp7jxDb", "anon": "no", "when": "2015-04-15T06:29:32Z", "type": "feedback"}, {"to": "i8ic2mpvmk45o9", "uid": "i6rtbanwzcm5t6", "anon": "no", "when": "2015-04-15T06:32:55Z", "type": "feedback"}, {"to": "i8ic2mpvmk45o9", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-15T06:43:17Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6rtbanwzcm5t6", "anon": "no", "when": "2015-04-15T06:50:47Z", "type": "feedback"}, {"to": "i8ic2mpvmk45o9", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2015-04-15T06:52:10Z", "type": "feedback"}, {"to": "i8ic2mpvmk45o9", "uid": "i6uunp7jxDb", "anon": "no", "when": "2015-04-15T07:02:42Z", "type": "feedback"}, {"to": "i8ic2mpvmk45o9", "uid": "i7bfvegt8am5ir", "anon": "no", "when": "2015-04-15T07:05:10Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i7bq1v7feay2z9", "anon": "no", "when": "2015-04-15T07:10:46Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6vkh2uqu3V", "anon": "no", "when": "2015-04-15T07:12:46Z", "type": "followup"}, {"to": "i8ic2mpvmk45o9", "uid": "i6uaz13iyeM", "anon": "no", "when": "2015-04-15T08:00:30Z", "type": "followup"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "第13讲&#xff08;实验4&#xff09;的课堂问题回答", "created": "2015-04-15T06:04:41Z", "content": "<p>fork系统中父子进程的返回值是不一样的。</p>\n<p></p>\n<p>请在源代码中找到父子进程的返回值赋值语句&#xff0c;然后回复。</p>"}], "type": "note", "tags": ["instructor-note", "课堂问答"], "tag_good": [], "unique_views": 158, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>胡津铭 沈光耀</p>\n<p>父进程</p>\n<pre>proc-&gt;pid = get_pid();\nret = proc-&gt;pid;\nreturn ret;<br /><br />kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags):<br />return do_fork(clone_flags | CLONE_VM, 0, &amp;tf);<br /><br />syscall.c<br />sys_fork(uint32_t arg[])<br />return do_fork(0, stack, tf);<br /><br /></pre>\n<p>子进程</p>\n<pre>proc-&gt;tf-&gt;tf_regs.reg_eax = 0;</pre>\n<p></p>", "created": "2015-04-15T06:05:59Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6uunp7jxDb", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8ic4afvsm26ln", "updated": "2015-04-15T06:05:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>父进程</p>\n<pre>    ret = proc-&gt;pid;\nfork_out:\n    return ret;</pre>\n<p>王昊</p>", "created": "2015-04-15T06:07:29Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6t1w87gRBD", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8ic67t7zpn1za", "updated": "2015-04-15T06:07:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>父进程返回值在do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) 函数中</p>\n<p>    ret = proc-&gt;pid;</p>\n<p>fork_out:<br />    return ret;</p>\n<p>    所以父进程返回proc-&gt;pid为子进程id</p>\n<p></p>\n<p>子进程copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf)函数中</p>\n<p>    proc-&gt;tf-&gt;tf_regs.reg_eax = 0;</p>\n<p>    返回值在eax寄存器中保存</p>", "created": "2015-04-15T06:07:54Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6roqnlkmtw", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8ic6rsohf6ya", "updated": "2015-04-15T06:07:54Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>父进程</p>\n<p>tf-&gt;tf_regs.reg_eax = syscalls[num](arg);</p>", "created": "2015-04-15T06:10:58Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6s09f3xHOf", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>- 父进程在&#96;void syscall&#96;函数中&#96;tf-&gt;tf_regs.reg_eax = syscalls[num](arg);&#96;&#xff0c;调用&#96;sys_fork()&#96;&#xff0c;再调用&#96;do_fork()&#96;&#xff0c;返回值<br /><br />&#96;&#96;&#96;<br />    ret = proc-&gt;pid;<br />fork_out:<br />    return ret;。<br />&#96;&#96;&#96;<br /><br />- 子进程在&#96;do_fork()&#96;调用&#96;copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf)&#96;函数中&#96;proc-&gt;tf-&gt;tf_regs.reg_eax = 0;&#96;</p>", "created": "2015-04-15T06:32:55Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "feedback", "tag_good": [], "uid": "i6rtbanwzcm5t6", "children": [], "tag_good_arr": [], "id": "i8id2xlx1n96z9", "updated": "2015-04-15T06:32:55Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i8icap3pev2ly", "updated": "2015-04-15T06:10:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>刘鹤</p>\n<p></p>\n<p>父进程</p>\n<p>ret = proc-&gt;pid;</p>\n<p>return ret;</p>\n<p>子进程</p>\n<p>proc-&gt;tf-&gt;tf_regs.reg_eax = 0;</p>", "created": "2015-04-15T06:11:20Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6ublqcaxvu6el", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8icb6s1po140f", "updated": "2015-04-15T06:11:20Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011359 路云飞</p>\n<p>父进程返回值赋值语句&#xff1a;</p>\n<p>proc-&gt;pid = get_pid(); </p>\n<p>ret = proc-&gt;pid;</p>\n<p>子进程返回值赋值语句&#xff1a;</p>\n<p>proc-&gt;tf-&gt;tf_regs.reg_eax = 0;</p>", "created": "2015-04-15T06:27:22Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i718aanx0OS", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8icvt0fqms3ye", "updated": "2015-04-15T06:27:22Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>initproc的内核堆栈初始化在哪&#xff1f;找到后&#xff0c;请回复。</p>\n<p></p>", "created": "2015-04-15T06:27:54Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>胡津铭 沈光耀</p>\n<p></p>\n<p>IDLEPROC:</p>\n<p>idleproc-&gt;kstack = (uintptr_t)bootstack;</p>\n<p></p>\n<p>KERNEL_THREAD:</p>\n<p>setup_kstack(proc)</p>", "created": "2015-04-15T06:29:32Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "feedback", "tag_good": [], "uid": "i6uunp7jxDb", "children": [], "tag_good_arr": [], "id": "i8icyl1ja6k3bd", "updated": "2015-04-15T06:29:32Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i8icwh10ae92tb", "updated": "2015-04-15T06:27:54Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>在执行函数init_main和kernel_thread加跟踪信息&#xff0c;描述当前进程&#xff08;mm&#xff09;和线程信息&#xff08;pid&#xff09;。</p>", "created": "2015-04-15T06:43:17Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>陈振寰 李心成</p>\n<p></p>\n<p>=== kernel_thread mm: 0 ===<br />=== kernel_thread pid: 0 ===<br />ide 0:      10000(sectors), &#39;QEMU HARDDISK&#39;.<br />ide 1:     262144(sectors), &#39;QEMU HARDDISK&#39;.<br />SWAP: manager = fifo swap manager<br />BEGIN check_swap: count 31921, total 31921<br />setup Page Table for vaddr 0X1000, so alloc a page<br />setup Page Table vaddr 0~4MB OVER!<br />set up init env for check_swap begin!<br />page fault at 0x00001000: K/W [no page found].<br />page fault at 0x00002000: K/W [no page found].<br />page fault at 0x00003000: K/W [no page found].<br />page fault at 0x00004000: K/W [no page found].<br />set up init env for check_swap over!<br />write Virt Page c in fifo_check_swap<br />write Virt Page a in fifo_check_swap<br />write Virt Page d in fifo_check_swap<br />write Virt Page b in fifo_check_swap<br />write Virt Page e in fifo_check_swap<br />page fault at 0x00005000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2<br />write Virt Page b in fifo_check_swap<br />write Virt Page a in fifo_check_swap<br />page fault at 0x00001000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3<br />swap_in: load disk swap entry 2 with swap_page in vadr 0x1000<br />write Virt Page b in fifo_check_swap<br />page fault at 0x00002000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4<br />swap_in: load disk swap entry 3 with swap_page in vadr 0x2000<br />write Virt Page c in fifo_check_swap<br />page fault at 0x00003000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5<br />swap_in: load disk swap entry 4 with swap_page in vadr 0x3000<br />write Virt Page d in fifo_check_swap<br />page fault at 0x00004000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6<br />swap_in: load disk swap entry 5 with swap_page in vadr 0x4000<br />count is 5, total is 5<br />check_swap() succeeded!<br />&#43;&#43; setup timer interrupts<br />this initproc, pid = 1, name = &#34;init&#34;<br />To U: &#34;Hello world!!&#34;.<br />To U: &#34;en.., Bye, Bye. :)&#34;<br />=== init_main mm: 0 ===<br />=== init_main pid: 1 ===<br /><br /></p>", "created": "2015-04-15T06:50:47Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "feedback", "tag_good": [], "uid": "i6rtbanwzcm5t6", "children": [], "tag_good_arr": [], "id": "i8idpx36vyw3v9", "updated": "2015-04-15T06:50:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在完成实验5后&#xff0c;在用户态代码中再加一个跟踪信息&#xff0c;描述当前线程&#xff08;pid和ss:sp&#xff09;、当前地址空间&#xff08;mm和cr3&#xff09;</p>", "created": "2015-04-15T06:52:10Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "i8idrov9r3p6sk", "updated": "2015-04-15T06:52:10Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p> 胡津铭 沈光耀</p>\n<p> &#64;&#64; -0,0 &#43;1,97 &#64;&#64;<br /> (THU.CST) os is loading ...<br /> <br /> Special kernel symbols:<br />   entry  0xc010002a (phys)<br />   etext  0xc010b268 (phys)<br />   edata  0xc0128a90 (phys)<br />   end    0xc012bc18 (phys)<br /> Kernel executable memory footprint: 175KB<br /> ebp:0xc0127f38 eip:0xc0101e6a args:0x00010094 0x00000000 0xc0127f68 0xc01000d3 <br />     kern/debug/kdebug.c:308: print_stackframe&#43;21<br /> ebp:0xc0127f48 eip:0xc0102159 args:0x00000000 0x00000000 0x00000000 0xc0127fb8 <br />     kern/debug/kmonitor.c:129: mon_backtrace&#43;10<br /> ebp:0xc0127f68 eip:0xc01000d3 args:0x00000000 0xc0127f90 0xffff0000 0xc0127f94 <br />     kern/init/init.c:57: grade_backtrace2&#43;33<br /> ebp:0xc0127f88 eip:0xc01000fc args:0x00000000 0xffff0000 0xc0127fb4 0x0000002a <br />     kern/init/init.c:62: grade_backtrace1&#43;38<br /> ebp:0xc0127fa8 eip:0xc010011a args:0x00000000 0xc010002a 0xffff0000 0x0000001d <br />     kern/init/init.c:67: grade_backtrace0&#43;23<br /> ebp:0xc0127fc8 eip:0xc010013f args:0xc010b29c 0xc010b280 0x00003188 0x00000000 <br />     kern/init/init.c:72: grade_backtrace&#43;34<br /> ebp:0xc0127ff8 eip:0xc010007f args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 <br />     kern/init/init.c:32: kern_init&#43;84<br /> memory management: default_pmm_manager<br /> e820map:<br />   memory: 0009fc00, [00000000, 0009fbff], type = 1.<br />   memory: 00000400, [0009fc00, 0009ffff], type = 2.<br />   memory: 00010000, [000f0000, 000fffff], type = 2.<br />   memory: 07efe000, [00100000, 07ffdfff], type = 1.<br />   memory: 00002000, [07ffe000, 07ffffff], type = 2.<br />   memory: 00040000, [fffc0000, ffffffff], type = 2.<br /> check_alloc_page() succeeded!<br /> check_pgdir() succeeded!<br /> check_boot_pgdir() succeeded!<br /> -------------------- BEGIN --------------------<br /> PDE(0e0) c0000000-f8000000 38000000 urw<br />   |-- PTE(38000) c0000000-f8000000 38000000 -rw<br /> PDE(001) fac00000-fb000000 00400000 -rw<br />   |-- PTE(000e0) faf00000-fafe0000 000e0000 urw<br />   |-- PTE(00001) fafeb000-fafec000 00001000 -rw<br /> --------------------- END ---------------------<br /> use SLOB allocator<br /> check_slab() success<br /> kmalloc_init() succeeded!<br /> check_vma_struct() succeeded!<br /> page fault at 0x00000100: K/W [no page found].<br /> check_pgfault() succeeded!<br /> check_vmm() succeeded.<br /> kt mm=0,pid=0<br /> ide 0:      10000(sectors), &#39;QEMU HARDDISK&#39;.<br /> ide 1:     262144(sectors), &#39;QEMU HARDDISK&#39;.<br /> SWAP: manager = fifo swap manager<br /> BEGIN check_swap: count 31950, total 31950<br /> setup Page Table for vaddr 0X1000, so alloc a page<br /> setup Page Table vaddr 0~4MB OVER!<br /> set up init env for check_swap begin!<br /> page fault at 0x00001000: K/W [no page found].<br /> page fault at 0x00002000: K/W [no page found].<br /> page fault at 0x00003000: K/W [no page found].<br /> page fault at 0x00004000: K/W [no page found].<br /> set up init env for check_swap over!<br /> write Virt Page c in fifo_check_swap<br /> write Virt Page a in fifo_check_swap<br /> write Virt Page d in fifo_check_swap<br /> write Virt Page b in fifo_check_swap<br /> write Virt Page e in fifo_check_swap<br /> page fault at 0x00005000: K/W [no page found].<br /> swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2<br /> write Virt Page b in fifo_check_swap<br /> write Virt Page a in fifo_check_swap<br /> page fault at 0x00001000: K/W [no page found].<br /> swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3<br /> swap_in: load disk swap entry 2 with swap_page in vadr 0x1000<br /> write Virt Page b in fifo_check_swap<br /> page fault at 0x00002000: K/W [no page found].<br /> swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4<br /> swap_in: load disk swap entry 3 with swap_page in vadr 0x2000<br /> write Virt Page c in fifo_check_swap<br /> page fault at 0x00003000: K/W [no page found].<br /> swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5<br /> swap_in: load disk swap entry 4 with swap_page in vadr 0x3000<br /> write Virt Page d in fifo_check_swap<br /> page fault at 0x00004000: K/W [no page found].<br /> swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6<br /> swap_in: load disk swap entry 5 with swap_page in vadr 0x4000<br /> count is 5, total is 5<br /> check_swap() succeeded!<br /> &#43;&#43; setup timer interrupts<br /> init main: mm = 0, pid = 1<br /> this initproc, pid = 1, name = &#34;init&#34;<br /> To U: &#34;Hello world!!&#34;.<br /> To U: &#34;en.., Bye, Bye. :)&#34;<br /> kernel panic at kern/process/proc.c:355:<br />     process exit!!.<br /> <br /> Welcome to the kernel debug monitor!!<br /> Type &#39;help&#39; for a list of commands.</p>", "created": "2015-04-15T07:02:42Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "feedback", "tag_good": [], "uid": "i6uunp7jxDb", "children": [], "tag_good_arr": [], "id": "i8ie58qo7zke6", "updated": "2015-04-15T07:02:42Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i8idg9qqi8r2wd", "updated": "2015-04-15T06:43:17Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p>", "created": "2015-04-15T07:05:10Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i7bfvegt8am5ir", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8ie8ecvo5y5l8", "updated": "2015-04-15T07:05:10Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>周昊 2012011326</p>\n<p>楼华哲 2012011327</p>\n<p>李日灵 2012011332</p>\n<p></p>\n<p>第一题&#xff1a;</p>\n<p>调用kernel_thread函数&#xff0c;设置trapframe中的一些参数&#xff0c;如cs&#xff0c;ds&#xff0c;然后调用do_fork函数&#xff0c;设置pid&#xff0c;调用copy_thread设置context和trapframe的一些参数&#xff0c;并调用wakeup_proc函数将state设置成runnable</p>\n<p></p>\n<p>第二题&#xff1a;</p>\n<p>在setup_kstack函数中分配KSTACKPAGE大小的内存&#xff0c;并将proc_kstack设为该栈起始的虚地址</p>\n<p></p>\n<p>第三题&#xff1a;</p>\n<p>use SLOB allocator<br />kmalloc_init() succeeded!<br /> alloc_proc: proc pid 1 will init<br /> wakeup_proc: proc pid 1 will be waken up<br /> alloc_proc: proc pid 2 will init<br /> wakeup_proc: proc pid 2 will be waken up<br /> alloc_proc: proc pid 3 will init<br /> wakeup_proc: proc pid 3 will be waken up<br />proc_init:: Created kernel thread init_main--&gt; pid: 1, name: init1<br />proc_init:: Created kernel thread init_main--&gt; pid: 2, name: init2<br />proc_init:: Created kernel thread init_main--&gt; pid: 3, name: init3<br />&#43;&#43; setup timer interrupts<br /> schedule: proc pid 0 will be ready<br /> schedule: proc pid 1 will be running<br /> kernel_thread, pid = 1, name = init1<br /> schedule: proc pid 1 will be ready<br /> schedule: proc pid 2 will be running<br /> kernel_thread, pid = 2, name = init2<br /> schedule: proc pid 2 will be ready<br /> schedule: proc pid 3 will be running<br /> kernel_thread, pid = 3, name = init3<br /> schedule: proc pid 3 will be ready<br /> schedule: proc pid 1 will be running<br /> kernel_thread, pid = 1, name = init1 , arg init main1: Hello world!! <br /> schedule: proc pid 1 will be ready<br /> schedule: proc pid 2 will be running<br /> kernel_thread, pid = 2, name = init2 , arg init main2: Hello world!! <br /> schedule: proc pid 2 will be ready<br /> schedule: proc pid 3 will be running<br /> kernel_thread, pid = 3, name = init3 , arg init main3: Hello world!! <br /> schedule: proc pid 3 will be ready<br /> schedule: proc pid 1 will be running<br /> kernel_thread, pid = 1, name = init1 , en.., Bye, Bye. :)<br /> do_exit: proc pid 1 will exit<br /> do_exit: proc parent c02ff008<br /> do_exit: proc pid 1 will from PROC_RUNNABLE TO PROC_ZOMBIE<br /> schedule: proc pid 1 will be ready<br /> schedule: proc pid 2 will be running<br /> kernel_thread, pid = 2, name = init2 , en.., Bye, Bye. :)<br /> do_exit: proc pid 2 will exit<br /> do_exit: proc parent c02ff008<br /> do_exit: proc pid 2 will from PROC_RUNNABLE TO PROC_ZOMBIE<br /> schedule: proc pid 2 will be ready<br /> schedule: proc pid 3 will be running<br /> kernel_thread, pid = 3, name = init3 , en.., Bye, Bye. :)<br /> do_exit: proc pid 3 will exit<br /> do_exit: proc parent c02ff008<br /> do_exit: proc pid 3 will from PROC_RUNNABLE TO PROC_ZOMBIE<br /> schedule: proc pid 3 will be ready<br /> schedule: proc pid 0 will be running<br />do_wait: begin<br />do_wait: has kid find child pid1<br />do_wait: begin<br />do_wait: has kid find child pid2<br />do_wait: begin<br />do_wait: has kid find child pid3<br />do_wait: begin</p>", "created": "2015-04-15T07:10:46Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i7bq1v7feay2z9", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8iefm8cmh796", "updated": "2015-04-15T07:10:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>use SLOB allocator<br />check_slab() success<br />kmalloc_init() succeeded!<br />check_vma_struct() succeeded!<br />page fault at 0x00000100: K/W [no page found].<br />check_pgfault() succeeded!<br />check_vmm() succeeded.<br />cr3: 24c000<br />pid: 0<br />ide 0:      10000(sectors), &#39;QEMU HARDDISK&#39;.<br />ide 1:     262144(sectors), &#39;QEMU HARDDISK&#39;.<br />SWAP: manager = fifo swap manager<br />BEGIN check_swap: count 31950, total 31950<br />setup Page Table for vaddr 0X1000, so alloc a page<br />setup Page Table vaddr 0~4MB OVER!<br />set up init env for check_swap begin!<br />page fault at 0x00001000: K/W [no page found].<br />page fault at 0x00002000: K/W [no page found].<br />page fault at 0x00003000: K/W [no page found].<br />page fault at 0x00004000: K/W [no page found].<br />set up init env for check_swap over!<br />write Virt Page c in fifo_check_swap<br />write Virt Page a in fifo_check_swap<br />write Virt Page d in fifo_check_swap<br />write Virt Page b in fifo_check_swap<br />write Virt Page e in fifo_check_swap<br />page fault at 0x00005000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2<br />write Virt Page b in fifo_check_swap<br />write Virt Page a in fifo_check_swap<br />page fault at 0x00001000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3<br />swap_in: load disk swap entry 2 with swap_page in vadr 0x1000<br />write Virt Page b in fifo_check_swap<br />page fault at 0x00002000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4<br />swap_in: load disk swap entry 3 with swap_page in vadr 0x2000<br />write Virt Page c in fifo_check_swap<br />page fault at 0x00003000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5<br />swap_in: load disk swap entry 4 with swap_page in vadr 0x3000<br />write Virt Page d in fifo_check_swap<br />page fault at 0x00004000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6<br />swap_in: load disk swap entry 5 with swap_page in vadr 0x4000<br />count is 5, total is 5<br />check_swap() succeeded!<br />&#43;&#43; setup timer interrupts<br />cr3: 24c000<br />this initproc, pid = 1, name = &#34;init&#34;<br />To U: &#34;Hello world!!&#34;.<br />To U: &#34;en.., Bye, Bye. :)&#34;<br />kernel panic at kern/process/proc.c:355:<br />    process exit!!.<br /><br />Welcome to the kernel debug monitor!!<br />Type &#39;help&#39; for a list of commands.<br /><br /></p>", "created": "2015-04-15T07:12:46Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6vkh2uqu3V", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8iei686c476a6", "updated": "2015-04-15T07:12:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>董欣 滕爽</p>\n<p></p>\n<p>use SLOB allocator<br />check_slab() success<br />kmalloc_init() succeeded!<br />check_vma_struct() succeeded!<br />page fault at 0x00000100: K/W [no page found].<br />check_pgfault() succeeded!<br />check_vmm() succeeded.<br />this idleproc, pid = 0, name = &#34;idle&#34;<br />cr3: 24c000<br />ide 0: 10000(sectors), &#39;QEMU HARDDISK&#39;.<br />ide 1: 262144(sectors), &#39;QEMU HARDDISK&#39;.<br />SWAP: manager = fifo swap manager<br />BEGIN check_swap: count 31950, total 31950<br />setup Page Table for vaddr 0X1000, so alloc a page<br />setup Page Table vaddr 0~4MB OVER!<br />set up init env for check_swap begin!<br />page fault at 0x00001000: K/W [no page found].<br />page fault at 0x00002000: K/W [no page found].<br />page fault at 0x00003000: K/W [no page found].<br />page fault at 0x00004000: K/W [no page found].<br />set up init env for check_swap over!<br />write Virt Page c in fifo_check_swap<br />write Virt Page a in fifo_check_swap<br />write Virt Page d in fifo_check_swap<br />write Virt Page b in fifo_check_swap<br />write Virt Page e in fifo_check_swap<br />page fault at 0x00005000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2<br />write Virt Page b in fifo_check_swap<br />write Virt Page a in fifo_check_swap<br />page fault at 0x00001000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3<br />swap_in: load disk swap entry 2 with swap_page in vadr 0x1000<br />write Virt Page b in fifo_check_swap<br />page fault at 0x00002000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4<br />swap_in: load disk swap entry 3 with swap_page in vadr 0x2000<br />write Virt Page c in fifo_check_swap<br />page fault at 0x00003000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5<br />swap_in: load disk swap entry 4 with swap_page in vadr 0x3000<br />write Virt Page d in fifo_check_swap<br />page fault at 0x00004000: K/W [no page found].<br />swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6<br />swap_in: load disk swap entry 5 with swap_page in vadr 0x4000<br />count is 5, total is 5<br />check_swap() succeeded!<br />&#43;&#43; setup timer interrupts<br />this initproc, pid = 1, name = &#34;init&#34;<br />cr3: 24c000<br />To U: &#34;Hello world!!&#34;.<br />To U: &#34;en.., Bye, Bye. :)&#34;<br />kernel panic at kern/process/proc.c:354:<br /> process exit!!.</p>\n<p>Welcome to the kernel debug monitor!!<br />Type &#39;help&#39; for a list of commands.</p>", "created": "2015-04-15T08:00:30Z", "bucket_order": 265, "bucket_name": "Week 4/12 - 4/18", "type": "followup", "tag_good": [], "uid": "i6uaz13iyeM", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i8ig7kbffig1dx", "updated": "2015-04-15T08:00:30Z", "config": {}}], "tag_good_arr": [], "id": "i8ic2mpvmk45o9", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 14, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167608347, "default_anonymity": "no"}, "error": null, "aid": "kyuzkh0bs7d6l"}