{"result": {"history_size": 2, "folders": ["lab1"], "nr": 102, "data": {"embed_links": []}, "created": "2015-03-14T03:50:04Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "stud", "when": "2015-03-14T03:50:04Z", "data": "i78h68ni2b066m", "type": "create", "uid_a": "a_0"}, {"to": "i78h68ng36v66l", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-14T12:21:17Z", "data": "i78zfofrn413gr", "type": "i_answer"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-14T12:23:26Z", "data": "i78zifzo8zm3re", "type": "i_answer_update"}, {"to": "i78h68ng36v66l", "uid": "hs2sszm8hyt6iu", "anon": "no", "when": "2015-03-14T15:05:27Z", "type": "followup"}, {"uid": "hdjoucuyb836fq", "anon": "no", "when": "2015-03-16T00:54:54Z", "data": "i7b5soj5i267lw", "type": "i_answer_update"}, {"anon": "no", "uid": "j3fg4w5iNJN", "to": "i78h68ng36v66l", "type": "feedback", "when": "2017-09-24T01:18:59Z"}, {"anon": "stud", "uid_a": "a_1", "data": "komvbbh4g9s4ce", "type": "update", "when": "2021-05-13T12:28:30Z"}], "bucket_name": "Today", "history": [{"anon": "stud", "uid_a": "a_1", "subject": "关于lab1的SETGATE函数", "created": "2021-05-13T12:28:30Z", "content": "<p>在init_idt()函数中&#xff0c;lab1code_result里是这么写的&#xff1a;</p>\n<p></p>\n<p>SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);</p>\n<p></p>\n<p>对这个函数的参数使用不大理解&#xff0c;想请问老师和助教&#xff1a;</p>\n<p></p>\n<p>  &#xff08;1&#xff09; 为什么第二个参数是0&#xff08;代表是trap而不是interrupt&#xff09;&#xff0c;trap和interrupt的区别是什么&#xff1f;如果只为trap建立了idt&#xff0c;那interrupt的idt在哪里建立&#xff1f;</p>\n<p>  &#xff08;2&#xff09;第三个参数&#xff0c;用的是GD_KTEXT&#xff0c;是因为vector.S的开头是 “.text” 吗&#xff1f; 为什么GD_KTEXT在memlayout.h中是一个常量&#xff1f;这个段的选择址在编译前就确定了吗&#xff1f;还是和bootloader协商过&#xff1f;</p>\n<p>  &#xff08;3&#xff09;对于__vectors[]在vector.S中的定义&#xff0c;为什么每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数&#xff1f; </p>\n<p>  &#xff08;4&#xff09;在mmu.h的struct gatedesc的定义里&#xff0c;gd_dpl的位数是2&#xff0c;也就是说有4种不同的特权级。在memlayout.h中&#xff0c;DP_KERNEL和DP_USER分别是0和3&#xff0c;那1和2分别是什么&#xff1f;</p>\n<p>    </p>\n<p>谢谢&#xff01;</p>"}, {"anon": "stud", "uid_a": "a_0", "subject": "关于lab1的SETGATE函数", "created": "2015-03-14T03:50:04Z", "content": "<p>在init_idt()函数中&#xff0c;lab1code_result里是这么写的&#xff1a;</p>\n<p></p>\n<p>SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);</p>\n<p></p>\n<p>对这个函数的参数使用不大理解&#xff0c;想请问老师和助教&#xff1a;</p>\n<p></p>\n<p>  &#xff08;1&#xff09; 为什么第二个参数是0&#xff08;代表是trap而不是interrupt&#xff09;&#xff0c;trap和interrupt的区别是什么&#xff1f;如果只为trap建立了idt&#xff0c;那interrupt的idt在哪里建立&#xff1f;</p>\n<p>  &#xff08;2&#xff09;第三个参数&#xff0c;用的是GD_KTEXT&#xff0c;是因为vector.S的开头是 “.text” 吗&#xff1f; 为什么GD_KTEXT在memlayout.h中是一个常量&#xff1f;这个段的选择址在编译前就确定了吗&#xff1f;还是和bootloader协商过&#xff1f;</p>\n<p>  &#xff08;3&#xff09;对于__vectors[]在vector.S中的定义&#xff0c;为什么每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数&#xff1f; </p>\n<p>  &#xff08;4&#xff09;在mmu.h的struct gatedesc的定义里&#xff0c;gd_dpl的位数是2&#xff0c;也就是说有4种不同的特权级。在memlayout.h中&#xff0c;DP_KERNEL和DP_USER分别是0和3&#xff0c;那1和2分别是什么&#xff1f;</p>\n<p>    </p>\n<p>谢谢&#xff01;</p>"}], "type": "note", "tags": ["lab1", "student"], "tag_good": [{"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://cdn-uploads.piazza.com/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "melouver", "endorser": {}, "admin": false, "photo": null, "id": "j0hxs9xevOM", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "", "name": "Jialiang Cao", "endorser": {}, "admin": false, "photo": null, "id": "jh1ahmqehdv28y", "photo_url": null, "us": false, "facebook_id": null}, {"role": "student", "name": "liuyu", "endorser": {}, "admin": false, "photo": null, "id": "k6ngyr7kqun3oi", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "unique_views": 237, "children": [{"history_size": 3, "folders": [], "data": {"embed_links": []}, "created": "2015-03-14T12:21:17Z", "bucket_order": 3, "tag_endorse": [{"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://cdn-uploads.piazza.com/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "", "name": "Kun Wu", "endorser": {}, "admin": false, "photo": null, "id": "ir11nxvix457cj", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "melouver", "endorser": {}, "admin": false, "photo": null, "id": "j0hxs9xevOM", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "", "name": "Jialiang Cao", "endorser": {}, "admin": false, "photo": null, "id": "jh1ahmqehdv28y", "photo_url": null, "us": false, "facebook_id": null}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjoucuyb836fq", "subject": "", "created": "2015-03-16T00:54:54Z", "content": "<p>这些问题问得很好。不仔细琢磨&#xff0c;是问不出来的。</p>\n<p></p>\n<p>Q&#xff08;1&#xff09; 为什么第二个参数是0&#xff08;代表是trap而不是interrupt&#xff09;&#xff0c;trap和interrupt的区别是什么&#xff1f;如果只为trap建立了idt那interrupt的idt在哪里建立&#xff1f;</p>\n<p>A&#xff1a;因为将来应用程序的系统调用需要通过trap gate来实现。 在ucore labs中,trap用来实现系统调用&#xff0c;interrupt用来实现对外设中断的处理等。trap和intr都在idt处要建立。trap gate与interrupt gate的唯一区别&#xff0c;是调用interrupt gate里的handler前会清EFLAGS的IF位&#xff08;即关中断&#xff09;&#xff0c;而调用trap gate的handler时对IF位没有影响。</p>\n<p></p>\n<p>Q&#xff08;2&#xff09;第三个参数&#xff0c;用的是GD_KTEXT&#xff0c;是因为vector.S的开头是 “.text” 吗&#xff1f; 为什么GD_KTEXT在memlayout.h中是一个常量&#xff1f;这个段的选择址在编译前就确定了吗&#xff1f;还是和bootloader协商过&#xff1f;</p>\n<p>A&#xff1a;GD_KTEXT代表中断服务例程在内核代码段。vector.S的开头的 “.text” 是GNU assembly 语言中的一个表示&#xff1a;下面是代码 section。GD_KTEXT=8, 8是内核代码段的选择子&#xff0c;根据这个值&#xff08;即index&#xff09;可以定位到GDT的段描述符。这个段的选择子是ucore编码设定的&#xff0c;也可以理解在编译前就确定了。没有与bootloader协商&#xff0c;因为ucore调用gdt_init函数又初始化了一次GDT.</p>\n<p></p>\n<p>Q(3) 对于__vectors[]在vector.S中的定义&#xff0c;为什么每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数&#xff1f; </p>\n<p>A: 不是每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数。因为有些异常会产生错误码&#xff08;比如页访问错误异常&#xff09;&#xff0c;有些异常不产生&#xff0c;为了统一&#xff0c;对于不产生的会pushl 0。请仔细看看tools/vector.c &#xff08;生成 vectors.S&#xff09;&#xff0c;应该就了解了。http://pdos.csail.mit.edu/6.828/2011/lec/x86_idt.pdf 给出了每个中断向量是否有错误码。</p>\n<p></p>\n<p>Q&#xff08;4&#xff09;在mmu.h的struct gatedesc的定义里&#xff0c;gd_dpl的位数是2&#xff0c;也就是说有4种不同的特权级。在memlayout.h中&#xff0c;DP_KERNEL和DP_USER分别是0和3&#xff0c;那1和2分别是什么&#xff1f;</p>\n<p>A: Intel CPU设计时&#xff0c;认为设置4级特权级可以适应更多的应用方式。但当前的主流OS只用了两个特权级&#xff0c;内核态&#xff08;0级&#xff09;和用户态&#xff08;3级&#xff09;就满足了需求。1,2特权级一般就没啥人用了。</p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "", "created": "2015-03-14T12:23:26Z", "content": "<p>这些问题问得很好。不仔细琢磨&#xff0c;是问不出来的。</p>\n<p></p>\n<p>Q&#xff08;1&#xff09; 为什么第二个参数是0&#xff08;代表是trap而不是interrupt&#xff09;&#xff0c;trap和interrupt的区别是什么&#xff1f;如果只为trap建立了idt那interrupt的idt在哪里建立&#xff1f;</p>\n<p>A&#xff1a;因为将来应用程序的系统调用需要通过trap gate来实现。 在ucore labs中,trap用来实现系统调用&#xff0c;interrupt用来实现对外设中断的处理等。trap和intr都在idt处要建立。</p>\n<p></p>\n<p>Q&#xff08;2&#xff09;第三个参数&#xff0c;用的是GD_KTEXT&#xff0c;是因为vector.S的开头是 “.text” 吗&#xff1f; 为什么GD_KTEXT在memlayout.h中是一个常量&#xff1f;这个段的选择址在编译前就确定了吗&#xff1f;还是和bootloader协商过&#xff1f;</p>\n<p>A&#xff1a;GD_KTEXT代表中断服务例程在内核代码段。vector.S的开头的 “.text” 是GNU assembly 语言中的一个表示&#xff1a;下面是代码 section。GD_KTEXT=8, 8是内核代码段的选择子&#xff0c;根据这个值&#xff08;即index&#xff09;可以定位到GDT的段描述符。这个段的选择子是ucore编码设定的&#xff0c;也可以理解在编译前就确定了。没有与bootloader协商&#xff0c;因为ucore调用gdt_init函数又初始化了一次GDT.</p>\n<p></p>\n<p>Q(3) 对于__vectors[]在vector.S中的定义&#xff0c;为什么每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数&#xff1f; </p>\n<p>A: 不是每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数。因为有些异常会产生错误码&#xff08;比如页访问错误异常&#xff09;&#xff0c;有些异常不产生&#xff0c;为了统一&#xff0c;对于不产生的会pushl 0。请仔细看看tools/vector.c &#xff08;生成 vectors.S&#xff09;&#xff0c;应该就了解了。</p>\n<p></p>\n<p>Q&#xff08;4&#xff09;在mmu.h的struct gatedesc的定义里&#xff0c;gd_dpl的位数是2&#xff0c;也就是说有4种不同的特权级。在memlayout.h中&#xff0c;DP_KERNEL和DP_USER分别是0和3&#xff0c;那1和2分别是什么&#xff1f;</p>\n<p>A: Intel CPU设计时&#xff0c;认为设置4级特权级可以适应更多的应用方式。但当前的主流OS只用了两个特权级&#xff0c;内核态&#xff08;0级&#xff09;和用户态&#xff08;3级&#xff09;就满足了需求。1,2特权级一般就没啥人用了。</p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "", "created": "2015-03-14T12:21:17Z", "content": "<p>Q&#xff08;1&#xff09; 为什么第二个参数是0&#xff08;代表是trap而不是interrupt&#xff09;&#xff0c;trap和interrupt的区别是什么&#xff1f;如果只为trap建立了idt那interrupt的idt在哪里建立&#xff1f;</p>\n<p>A&#xff1a;因为将来应用程序的系统调用需要通过trap gate来实现。 在ucore labs中,trap用来实现系统调用&#xff0c;interrupt用来实现对外设中断的处理等。trap和intr都在idt处要建立。</p>\n<p></p>\n<p>Q&#xff08;2&#xff09;第三个参数&#xff0c;用的是GD_KTEXT&#xff0c;是因为vector.S的开头是 “.text” 吗&#xff1f; 为什么GD_KTEXT在memlayout.h中是一个常量&#xff1f;这个段的选择址在编译前就确定了吗&#xff1f;还是和bootloader协商过&#xff1f;</p>\n<p>A&#xff1a;GD_KTEXT代表中断服务例程在内核代码段。vector.S的开头的 “.text” 是GNU assembly 语言中的一个表示&#xff1a;下面是代码 section。GD_KTEXT=8, 8是内核代码段的选择子&#xff0c;根据这个值&#xff08;即index&#xff09;可以定位到GDT的段描述符。这个段的选择子是ucore编码设定的&#xff0c;也可以理解在编译前就确定了。没有与bootloader协商&#xff0c;因为ucore调用gdt_init函数又初始化了一次GDT.</p>\n<p></p>\n<p>Q(3) 对于__vectors[]在vector.S中的定义&#xff0c;为什么每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数&#xff1f; </p>\n<p>A: 不是每个idt的offset都要先pushl 0&#xff0c;再pushl相应的数。因为有些异常会产生错误码&#xff08;比如页访问错误异常&#xff09;&#xff0c;有些异常不产生&#xff0c;为了统一&#xff0c;对于不产生的会pushl 0。请仔细看看tools/vector.c &#xff08;生成 vectors.S&#xff09;&#xff0c;应该就了解了。</p>\n<p></p>\n<p>Q&#xff08;4&#xff09;在mmu.h的struct gatedesc的定义里&#xff0c;gd_dpl的位数是2&#xff0c;也就是说有4种不同的特权级。在memlayout.h中&#xff0c;DP_KERNEL和DP_USER分别是0和3&#xff0c;那1和2分别是什么&#xff1f;</p>\n<p>A: Intel CPU设计时&#xff0c;认为设置4级特权级可以适应更多的应用方式。但当前的主流OS只用了两个特权级&#xff0c;内核态&#xff08;0级&#xff09;和用户态&#xff08;3级&#xff09;就满足了需求。1,2特权级一般就没啥人用了。</p>\n<p></p>\n<p></p>"}], "type": "i_answer", "tag_endorse_arr": ["hcrrjuyequh4bt", "ir11nxvix457cj", "j0hxs9xevOM", "jh1ahmqehdv28y"], "children": [], "id": "i78zfofnppu3gq", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><strong>补充一下第一小问.</strong></p>\n<p>1. mmu.h中有说明, &#34;istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate&#34;, 所以0表示interrupt, 该问题便有错误.</p>\n<p>2. vectors的256个元素中, 0~31是保留的, 用于处理异常和NMI(不可屏蔽中断); 32~255由用户定义, 可以是设备中断或系统调用.</p>\n<p>3.  Interrupt Gate 和 Trap Gate,它们之间的唯一区别就是:当调用Interrupt Gate 时,Interrupt 会被 CPU 自动禁止;而调用 Trap Gate 时,CPU 则不会去禁止或打开中断,而是保留它原来的样子</p>\n<p>4. 我认为在这里应该根据vectors中的具体类型(trap或interrupt)分别初始化. lab1统一将第二个参数设置为interrupt, 是因为lab1暂时不用处理trap, 所以进行了简化处理. 类似情形在ucore labs中时常出现, 所以以后的lab会时常补充修正之前lab的代码.</p>\n<p></p>\n<p>这是我的考虑</p>", "created": "2015-03-14T15:05:27Z", "bucket_order": 328, "bucket_name": "Week 3/8 - 3/14", "type": "followup", "tag_good": [], "uid": "hs2sszm8hyt6iu", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>确实0是错的&#xff0c;之后实验会改成1</p>", "created": "2017-09-24T01:18:59Z", "bucket_order": 196, "bucket_name": "Week 9/17 - 9/23", "type": "feedback", "tag_good": [], "uid": "j3fg4w5iNJN", "children": [], "tag_good_arr": [], "id": "j7y22x0k35h3ve", "updated": "2017-09-24T01:18:59Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i795asqmmr930a", "updated": "2015-03-14T15:05:27Z", "config": {}}], "tag_good_arr": ["hcrrjuyequh4bt", "j0hxs9xevOM", "jh1ahmqehdv28y", "k6ngyr7kqun3oi"], "id": "i78h68ng36v66l", "config": {"has_emails_sent": 1}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 10, "num_favorites": 6, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167315997, "default_anonymity": "no"}, "error": null, "aid": "kyuze7fh9x93uc"}