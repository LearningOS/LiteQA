{"result": {"folders": ["2018", "课堂问答", "lecture6"], "nr": 1163, "data": {"embed_links": []}, "created": "2018-03-16T03:57:12Z", "bucket_order": 3, "no_answer_followup": 7, "change_log": [{"anon": "no", "uid": "hdjonbiyfs62ie", "data": "jetewquezey17i", "type": "create", "when": "2018-03-16T03:57:12Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jetewquc46d17h", "type": "followup", "when": "2018-03-16T06:48:16Z"}, {"anon": "no", "uid": "iswj8urcumf2o2", "to": "jetewquc46d17h", "type": "followup", "when": "2018-03-16T06:50:45Z"}, {"anon": "no", "uid": "je2ib5nk89v6ca", "to": "jetewquc46d17h", "type": "followup", "when": "2018-03-16T06:54:47Z"}, {"anon": "no", "uid": "im0vq5pac4t1xa", "to": "jetewquc46d17h", "type": "followup", "when": "2018-03-16T07:19:16Z"}, {"anon": "no", "uid": "iswj1pilsct7jy", "to": "jetewquc46d17h", "type": "followup", "when": "2018-03-16T12:49:29Z"}, {"anon": "no", "uid": "iswj1pilsct7jy", "to": "jetewquc46d17h", "type": "feedback", "when": "2018-03-19T12:19:31Z"}, {"anon": "no", "uid": "iswj1pilsct7jy", "to": "jetewquc46d17h", "type": "feedback", "when": "2018-03-19T12:20:08Z"}, {"anon": "no", "uid": "iswj8urcumf2o2", "to": "jetewquc46d17h", "type": "feedback", "when": "2018-03-19T12:53:20Z"}, {"anon": "no", "uid": "im0vq5pac4t1xa", "to": "jetewquc46d17h", "type": "feedback", "when": "2018-03-19T16:37:44Z"}, {"anon": "no", "uid": "je2ib5nk89v6ca", "to": "jetewquc46d17h", "type": "feedback", "when": "2018-03-23T04:24:49Z"}, {"anon": "no", "uid": "jsjp7j7mu8BB", "to": "jetewquc46d17h", "type": "followup", "when": "2019-03-14T01:25:59Z"}, {"anon": "no", "uid": "jslfact6jvaN", "to": "jetewquc46d17h", "type": "followup", "when": "2019-03-14T01:26:17Z"}, {"anon": "no", "uid": "jsjp7j7mu8BB", "to": "jetewquc46d17h", "type": "feedback", "when": "2019-03-18T01:50:37Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2018春季-第六讲课堂实践练习二", "created": "2018-03-16T03:57:12Z", "content": "<p>Virtual Memory with 256 Bytes of RAM&#xff1a;这是一个只有256字节内存的一个极小计算机系统。按作者的特征描述&#xff0c;它具备如下的功能。</p>\n<p></p>\n<ol><li>CPU的实现代码不多于500行&#xff1b;</li><li>支持14条指令、进程切换、虚拟存储和中断&#xff1b;</li><li>用C实现了一个小的操作系统微内核可以在这个CPU上正常运行&#xff1b;</li><li>实现了一个ANSI C89编译器&#xff0c;可生成在该CPU上运行代码&#xff1b;</li><li>该编译器支持链接功能&#xff1b;</li><li>用C89, Python, Java, Javascript这4种语言实现了该CPU的模拟器&#xff1b;</li><li>支持交叉编译&#xff1b;</li><li>所有这些只依赖标准C库。</li></ol>\n<p></p>\n<p>针对op-cpu的特征描述&#xff0c;请同学们通过代码阅读和执行对自己有兴趣的部分进行分析&#xff0c;给出你的分析结果和评价。</p>\n<p></p>\n<p><a href=\"https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/03-2-spoc-discussion.md#interactiveunderstand-vm\">https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/03-2-spoc-discussion.md#interactiveunderstand-vm</a></p>\n<p></p>"}], "type": "note", "tags": ["2018", "instructor-note", "lecture6", "课堂问答"], "tag_good": [], "unique_views": 132, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>魏钧宇 2015011263</p>\n<p></p>\n<p>我先仔细分析一下他的模拟器吧&#xff5e;下周五给出一个调研结果的报告</p>", "created": "2018-03-16T06:48:16Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jetl0qw7nzz64x", "updated": "2018-03-16T06:48:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>王延森 2015011285</p>\n<p></p>\n<p>支持14条指令、进程切换、虚拟存储和中断&#xff1b;</p>\n<p>我先看看这部分的设计吧。</p>", "created": "2018-03-16T06:50:45Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "iswj8urcumf2o2", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>做的时候我发现我做的这条其实综合了硬件与操作系统两个部分&#xff0c;所以以下内容我可能写的有点乱</p>\n<p></p>\n<p>指令&#xff1a;</p>\n<p>指令主要分为以下几类&#xff1a;</p>\n<p>算逻指令&#xff1a;</p>\n<ul><li>三寄存器&#xff1a;add, sub, mul, div, and, or</li><li>两寄存器&#xff1a;not(Rx = ~Ry), shr, shl</li><li>一寄存器&#43;立即数&#xff1a;ll</li></ul>\n<p>访存指令&#xff1a;</p>\n<ul><li>两寄存器&#xff1a;loa&#xff0c;sto</li></ul>\n<p>跳转指令&#xff1a;</p>\n<ul><li>两寄存器&#43;立即数&#xff1a;beq&#xff0c;blt</li></ul>\n<p>基本上需要的指令都实现了。我没有去看cpu的代码&#xff0c;但是说cpu只有500行&#xff0c;却实现了乘除法我觉得很不可思议&#xff0c;我觉得应该是没有硬件语言的描述的&#xff1f;&#xff08;等待读cpu代码的同学为我解答&#xff09;</p>\n<p></p>\n<p>进程切换&#xff1a;</p>\n<p>进程切换写的十分简单&#xff0c;在每个时钟中断到来的时候&#xff0c;储存当前进程信息&#xff0c;安排执行下一个进程。</p>\n<pre>case CLOCK_TICK_EVENT:{<br />\tsave_current_task(&amp;blocked_on_clock_tick_queue, BLOCKED_ON_CLOCK_TICK);<br />\tschedule_next_task();<br />\tbreak;<br />}</pre>\n<p>在这个系统里&#xff0c;进程有四个优先级&#xff0c;分别用四个循环队列维护&#xff0c;调度的算法是优先调用高优先级的进程&#xff0c;相同优先级的进程按照Round Robin算法调用。</p>\n<p></p>\n<p>虚拟存储&#xff1a;</p>\n<p>程序采用了两级页表的储存形式&#xff1a;</p>\n<pre>&#43;--------------------------&#43;&lt;-----------------------------32-bits--------------------------&gt;&#43;----------------&#43;\n| Paging (PT = Page Table) |&lt;--------11 bits-------&gt;|&lt;-------11 bits--------&gt;|&lt;--10 bits--&gt;| I = Initialized |\n|        Virtual Address:  | lvl 2 PT entry index   | lvl 1 PT entry index   | Byte Offset | R = Read        |\n|        Level 2 PT Entry: | High 22 bits of address of lvl 1 PT             | I---------  | W = Write       |\n|        Level 1 PT Entry: | High 22 bits of linear page address in memory   | I------RWX  | X = Execute     |\n&#43;--------------------------&#43;-------------------------------------------------&#43;-------------&#43;-----------------&#43;</pre>\n<p>这个表我觉得已经足够直观了。</p>\n<p>页表的初始化在<a href=\"https://github.com/RobertElderSoftware/recc/blob/master/kernel/kernel_impl.c#L367\" target=\"_blank\">k_kernel_init</a>函数中完成&#xff0c;相关函数有<a href=\"https://github.com/RobertElderSoftware/recc/blob/master/kernel/kernel_impl.c#L360\" target=\"_blank\">set_up_identity_kernel_mapping_for_region</a>&#xff0c;<a href=\"https://github.com/RobertElderSoftware/recc/blob/master/kernel/kernel_impl.c#L306\" target=\"_blank\">allocate_level_1_page_table</a>&#xff0c;<a href=\"https://github.com/RobertElderSoftware/recc/blob/master/kernel/kernel_impl.c#L323\" target=\"_blank\">allocate_level_2_page_table</a>&#xff0c;<a href=\"https://github.com/RobertElderSoftware/recc/blob/master/kernel/kernel_impl.c#L340\" target=\"_blank\">create_level_1_page_table_entry</a>&#xff0c;<a href=\"https://github.com/RobertElderSoftware/recc/blob/master/kernel/kernel_impl.c#L353\" target=\"_blank\">create_level_2_page_table_entry</a>。</p>\n<p>具体实现&#xff0c;包括缺页异常的处理都很朴素&#xff0c;希望让看os的同学讲一讲。</p>\n<p></p>\n<p>中断&#xff1a;</p>\n<p>首先必须要说的是&#xff0c;这个cpu的设计中包含了以下一些重要的特殊寄存器&#xff1a;</p>\n<pre>&#43;------------------------------------------------------------------------------------------------------------&#43;\n| Registers Overview                                                                                         |\n|                                                                                                            |\n| #0) PC (Program Counter) Points to next instruction.           #3) ZR (Zero Register)  Initialized to 0.   |\n| #1) SP (Stack Pointer)   Points to the top item on the stack.  #4) FR (Flags Register) Special CPU flags.  |\n| #2) FP (Frame Pointer)   Points to previous frame pointer.     #5) WR (Word Register)  Initialized to 4.   |\n|                                                                                                            |\n| At CPU startup, WR = 0x4, FR = 0x200.  All other registers are initialized to 0.                           |\n| Special registers #0 to #5 are PC, SP, FP, ZR, FR, WR.  General registers #6 to #511 are named r1 to r506. |\n&#43;------------------------------------------------------------------------------------------------------------&#43;</pre>\n<p>其中FR寄存器中的一些位与中断相关&#xff1a;</p>\n<pre>&#43;------------------------------------------------------------------------------------------------------------&#43;\n| Flags Register (FR) Description                                                                            |\n|                                                                                                            |\n| Bit 0:     Writing one to this bit halts the processor.  No further instructions or interrupts execute.    |\n| Bit 1:     Global Interrupt Enable.  All interrupts enabled when 1.  All interrupts disabled otherwise.    |\n| Bit 2:     When set to 1, atomically sets bit 1 of FR to 1; bit 2 of FR to 0; PC to [SP]; SP to SP &#43; WR.   |\n| Bit 3:     TIMER1 interrupt enable.  See TIMER1_PERIOD.                                                    |\n| Bit 4:     TIMER1 interrupt asserted.  CPU sets to 1.  User must set to 0.                                 |\n| Bit 5:     UART1_OUT interrupt enable.  Used for detecting when bit 9 of FR has been set by CPU.           |\n| Bit 6:     UART1_OUT interrupt asserted.  CPU sets to 1.  User must set to 0.                              |\n| Bit 7:     UART1_IN interrupt enable.  Used for detecting when bit 10 of FR has been set by CPU.           |\n| Bit 8:     UART1_IN interrupt asserted.  CPU sets to 1.  User must set to 0.                               |\n| Bit 9:     UART1_OUT ready.  Indicates if UART1_OUT is ready.  CPU sets to 1.  User must set 0.            |\n| Bit 10:    UART1_IN ready.  Indicates if UART1_IN contains input data.  CPU sets to 1.  User must set 0.   |\n| Bit 11:    DIV_ZERO interrupt asserted due to a division by 0.  CPU sets to 1.  User must set to 0.        |\n| Bit 12:    PAGE_FAULT_EXCEPTION interrupt asserted.  CPU sets to 1.  User must set to 0.                   |\n| Bit 13:    PAGE_FAULT_EXCEPTION interrupt enabled.  Enables or disables paging.  Ignores FR bit 1 state.   |\n| Bit 14-31  Unused.                                                                                         |\n| Handling an interrupt atomically sets bit 1 of FR to 0; SP to SP - WR; [SP] to PC; then PC to IRQ_HANDLER  |\n&#43;------------------------------------------------------------------------------------------------------------&#43;</pre>\n<p>当中断发生的时候&#xff0c;FR的对应位置将标志CPU的中断状态&#xff0c;同时利用几个特殊的寄存器记录当前状态(SP-&gt;SP-WR, [SP]-&gt;PC, PC-&gt;IRQ_HANDLER)</p>\n<p>这里的IRQ_HANDLER&#xff0c;我和看os的同学讨论了一下&#xff0c;是中断处理函数的入口&#xff0c;这就很奇怪了&#xff0c;PC是一个硬件上存在的寄存器&#xff0c;IRQ_HANDLER是操作系统实现的东西&#xff0c;这一步怎么赋过去的&#xff1f;这个硬件只有对现在的这个os才能使用&#xff1f;</p>\n<p></p>\n<p>总体看下来还是很迷的&#xff0c;感觉只是个软件上的东西&#xff0c;没有对应的硬件实现。不过如果能做成硬件实现应该也不错。</p>", "created": "2018-03-19T12:53:20Z", "bucket_order": 107, "bucket_name": "Week 3/18 - 3/24", "type": "feedback", "tag_good": [], "uid": "iswj8urcumf2o2", "children": [], "tag_good_arr": [], "id": "jey8dsczo9y6es", "updated": "2018-03-19T12:53:20Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jetl3xpi81n7p7", "updated": "2018-03-16T06:50:45Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>李凯文 2014011756</p>\n<p></p>\n<p>该编译器支持链接功能</p>", "created": "2018-03-16T06:54:47Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "je2ib5nk89v6ca", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>链接器的实现主要是在recc-implementation/link.c 和recc-implementation/link.h中&#xff0c;链接过程中&#xff0c;对要求固定位置和可变位置的文件进行了分别处理。</p>\n<p><img src=\"/img/1163-3217035144ca543c.png\" alt=\"\" /></p>\n<p>这里对固定位置的链接文件进行定位&#xff0c;当这些文件出现覆盖时通过assert报错</p>\n<p></p>\n<p><img src=\"/img/1163-4c7b594ffe1200de.png\" alt=\"\" /></p>\n<p></p>\n<p>将可变位置的文件插入到合适的位置&#xff0c;最后将剩下的文件插在最后&#xff08;代码为上图再向后的部分&#xff09;</p>\n<p></p>\n<p>另外&#xff0c;代码中还有检查symbol的声明和定义的函数&#xff0c;&#xff0c;如</p>\n<div>verify_symbol_declaration</div>\n<div>\n<div>add_internal_linker_symbol</div>\n<div>\n<div>set_symbol_l2_item_pointer</div>\n<div>\n<div>add_external_linker_symbol</div>\n<div>\n<div>get_absolute_symbol_offset</div>\n<div>\n<div>get_absolute_symbol</div>\n</div>\n<div>等&#xff0c;满足了相对地址寻址&#xff0c;绝对地址寻址等symbol的链接需要</div>\n<div></div>\n<div>整体的link工作在do_link中完成&#xff0c;由于代码太长而且繁杂&#xff0c;所以这里没有给出截图&#xff0c;该作者的此repo地址为https://github.com/RobertElderSoftware/recc</div>\n</div>\n</div>\n</div>\n</div>", "created": "2018-03-23T04:24:49Z", "bucket_order": 107, "bucket_name": "Week 3/18 - 3/24", "type": "feedback", "tag_good": [], "uid": "je2ib5nk89v6ca", "children": [], "tag_good_arr": [], "id": "jf3fz81a499615", "updated": "2018-03-23T04:24:49Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jetl94j6vnq2b2", "updated": "2018-03-16T06:54:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>王纪霆 2015011251</p>\n<p></p>\n<p>用C实现了一个小的操作系统微内核可以在这个CPU上正常运行.?...</p>", "created": "2018-03-16T07:19:16Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "im0vq5pac4t1xa", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>粗略地分析了一下&#xff0c;感觉很迷幻</p>\n<p>https://github.com/maoyuchaxue/os_course_exercises/blob/2018spring/all/recc-analyze-report.md</p>", "created": "2018-03-19T16:37:44Z", "bucket_order": 107, "bucket_name": "Week 3/18 - 3/24", "type": "feedback", "tag_good": [], "uid": "im0vq5pac4t1xa", "children": [], "tag_good_arr": [], "id": "jeygeddljeq710", "updated": "2018-03-19T16:37:44Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jetm4m9j84n4w3", "updated": "2018-03-16T07:19:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>分析os的实现</p>", "created": "2018-03-16T12:49:29Z", "bucket_order": 108, "bucket_name": "Week 3/11 - 3/17", "type": "followup", "tag_good": [], "uid": "iswj1pilsct7jy", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>简单的评价是&#xff1a;是一个较好的个人项目&#xff0c;但正因为如此&#xff0c;功能完备性和可扩展性不高。</p>\n<p></p>\n<p>操作系统内核的实现在<a href=\"https://github.com/RobertElderSoftware/recc/tree/master/kernel\">kernel</a>/kernel_impl.c中&#xff0c;它主要做了下面几件事&#xff1a;</p>\n<p></p>\n<p>1. 异常处理&#xff0c;包括时钟中断、页面缺失和串口中断。</p>\n<p>2. 多进程调度&#xff0c;直接按优先级调度。</p>\n<p>3. 串口信息收发&#xff0c;包括多进程同时访问时的睡眠等待。</p>\n<p>4. 虚拟地址到物理地址转换&#xff0c;使用二级页表。</p>\n<p></p>\n<p>此外&#xff0c;在filesystem.c&#xff08;这是一个用户程序&#xff09;中实现了一个模拟的文件系统。</p>\n<p></p>\n<p>它没有做下面几件事&#xff1a;</p>\n<p>1. 系统调用&#xff0c;这意味着用户程序也都是在核心态执行的</p>\n<p>2. 页面缺失处理。是的&#xff0c;它的handle_page_fault_exception中除了输出一些信息外什么也没做。也没有实现页面替换。</p>\n<p>3. 公平高效的调度算法</p>\n<p>4. 真正的文件系统</p>\n<p>5. 进程间共享&#xff08;当然&#xff0c;因为现在没啥权限控制&#xff0c;所以也可以直接访问别的进程的空间……&#xff09;</p>\n<p></p>\n<p>总的来说&#xff0c;这个实验基本实现了操作系统的核心功能&#xff1a;虚存映射和进程管理&#xff0c;但是还没有到一个基本可以使用的程度。特别是没有系统调用和页面替换&#xff0c;让操作系统失去了虚存管理和权限管理的功能。</p>\n<p></p>\n<p>计53 张天扬 2015011306</p>", "created": "2018-03-19T12:19:31Z", "bucket_order": 107, "bucket_name": "Week 3/18 - 3/24", "type": "feedback", "tag_good": [], "uid": "iswj1pilsct7jy", "children": [], "tag_good_arr": [], "id": "jey76av8tyi4c1", "updated": "2018-03-19T12:19:31Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>另外&#xff0c;我感觉他的编译器比这个os复杂多了……</p>", "created": "2018-03-19T12:20:08Z", "bucket_order": 107, "bucket_name": "Week 3/18 - 3/24", "type": "feedback", "tag_good": [], "uid": "iswj1pilsct7jy", "children": [], "tag_good_arr": [], "id": "jey7737uo7r4mc", "updated": "2018-03-19T12:20:08Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jetxxa2xpmw66o", "updated": "2018-03-16T12:49:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p>", "created": "2019-03-14T01:25:59Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jsjp7j7mu8BB", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>看了页缺失处理&#xff0c;等下写一下帖子</p>", "created": "2019-03-18T01:50:37Z", "bucket_order": 55, "bucket_name": "Week 3/17 - 3/23", "type": "feedback", "tag_good": [], "uid": "jsjp7j7mu8BB", "children": [], "tag_good_arr": [], "id": "jtdozl5ysdz4s0", "updated": "2019-03-18T01:50:37Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jt7yci7114f14a", "updated": "2019-03-14T01:25:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>占坑</p>", "created": "2019-03-14T01:26:17Z", "bucket_order": 56, "bucket_name": "Week 3/10 - 3/16", "type": "followup", "tag_good": [], "uid": "jslfact6jvaN", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jt7ycwmwxg07ha", "updated": "2019-03-14T01:26:17Z", "config": {}}], "tag_good_arr": [], "id": "jetewquc46d17h", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 8, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169274224, "default_anonymity": "no"}, "error": null, "aid": "kyv0k6eo3pf4jo"}