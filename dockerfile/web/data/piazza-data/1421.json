{"result": {"history_size": 2, "folders": ["lecture6", "课堂问答", "2020"], "nr": 1421, "data": {"embed_links": []}, "created": "2020-03-08T13:52:46Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "k6onsl9r7ic10z", "data": "k7j3jjsdvmy6jv", "type": "create", "when": "2020-03-08T13:52:46Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "k7o4sowovwq457", "type": "update", "when": "2020-03-12T02:26:43Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "k7j3jjsa5yj6ju", "type": "followup", "when": "2020-03-12T02:34:20Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "虚拟存储技术的硬件支持", "created": "2020-03-12T02:26:43Z", "content": "<p>实现虚拟存储器需要三方面的硬件支持&#xff1a; 1、请求分页/段的页表或段表机制&#xff1b; 请求分页存储管理是建立在分页存储管埋的基础上&#xff0c;并结合虚拟存储系统原理实现的&#xff0c;是目前常用的一种实现虚拟存储器的方式 2、缺页/段中断机构&#xff1b; 作用就是就是要访问的页不在主存&#xff0c;需要操作系统将其调入主存后再进行访问。在这个时候&#xff0c;被内存映射的文件实际上成了一个分页交换文件。 3、地址变换机构。 当进程要访问某个逻辑地址中的数据时&#xff0c;分页地址变换机构会自动地将有效地址(相对地址)分为页号页内地址两部分&#xff0c;再以页号为索引去检索页表。查找操作由硬件执行。在执行检索之前&#xff0c;先将页号与页表长度进行比较&#xff0c;如果页号大于或等于页表长度&#xff0c;则表示本次所访问的地址已超越进程的地址空间。于是&#xff0c;这一错误将被系统发现并产生一地址越界中断。若未出现越界错误&#xff0c;则将页表始址与页号和页表项长度的乘积相加&#xff0c;便得到该表项在页表中的位置&#xff0c;于是可从中得到该页的物理块号&#xff0c;将之装入物理地址寄存器中。与此同时&#xff0c;再将有效地址寄存器中的页内地址送入物理地址)寄存器的块内地址字段中。这样便完成了从逻辑地址到物理地址的变换。</p>\n<h4>MIPS32</h4>\n<p>虚拟地址转换为物理地址过程为&#xff1a;</p>\n<p>虚拟地址的高位(VPN)和当前程序的ASID送给TLB&#xff0c;与TLB中的所有entry表项同时进行匹配&#xff0c;匹配过程中如果有如下都满足的TLB表项&#xff0c;从中读取PFN,V,D域</p>\n<p>1.当前程序(进程)的ASID等于TLB表项中的ASID(EntryHi的Gbit置位的话&#xff0c;不比较ASID) 2.虚拟地址的bit63~62与TLB表项的R字段相同 3.虚拟地址的相应位域和TLB的VPN2相同,相应位域取决于PageMask寄存器设置的页表大小 注意最终转换是否成功取决于V,D域。如果V无效&#xff0c;该entry无效&#xff0c;产生TLB无效异常&#xff1b;如果D指示不可写&#xff0c;而有写操作会产生TLB修改异常。如果没有上述异常&#xff0c;即是TLB命中&#xff0c;命中entry的PFN和虚拟地址低位(1KBpage的话是低10bit&#xff0c;4KBpage的话低12bit)构成最终的物理地址。</p>\n<h4>x86</h4>\n<p>32位X86&#xff0c;虚拟地址空间通过一个段表&#xff08;段表不需要bit位索引&#xff09;和2层页表进行转化&#xff0c;前10个bit位用于索引第一层页表&#xff0c;中间10个bit位用于索引第二层页表&#xff0c;后12位是页内的偏移。每个页表的元素占用4个字节&#xff0c;页大小是4KB&#xff0c;一个物理页可以容纳第1层级页表和第二层级页表&#xff0c;第二层页表的个数取决于所属段的长度&#xff08;即第一层页表的元素的个数&#xff09;。</p>\n<p>64位X86&#xff0c;虚拟地址空间可以延伸到64位&#xff0c;为了简化地址转换&#xff0c;当前很多处理器只用了48位&#xff08;前16位没有使用&#xff09;&#xff0c;能够满足256TB的内存空间使用&#xff0c;采用段表和4层页表进行转换&#xff08;9个bit位&#43;9个bit位&#43;9个bit位&#43;9个bit位 &#43; 12个bit位&#xff0c;段表不需要bit位索引&#xff0c;前4个9bit位分别用于4层页表的索引&#xff0c;最后一个12bit用于页内偏移&#xff0c;总计48bit位&#xff09;&#xff0c;只有第一层页表是被填满的&#xff0c;其他三层页表只有对应虚拟空间地址被使用了才会被填充。为了优化&#xff0c;64位X86可以消除1个或者2个层级的页表。每个物理页的大小是4KB&#xff0c;第4层级的页表可以管理2MB&#xff0c;第3层级的页表可以管理1GB的数据&#xff0c;若操作系统分配了连续的2MB物理页&#xff0c;则可以省去第4层级的页表&#xff0c;让第三层的页表元素直接指向2MB的物理页&#xff0c;同样的&#xff0c;若操作系统分配了连续的1GB物理页&#xff0c;则可以省去第3、4层级的页表&#xff0c;让第2层级页表的元素直接指向1GB的物理页。这样做既可以节省页表存储的开销&#xff0c;还可以提高地址转换效率。</p>"}, {"anon": "no", "uid": "k6onsl9r7ic10z", "subject": "虚拟存储技术的硬件支持", "created": "2020-03-08T13:52:46Z", "content": "<p>实现虚拟存储器需要三方面的硬件支持&#xff1a; 1、请求分页/段的页表或段表机制&#xff1b; 请求分页存储管理是建立在分页存储管埋的基础上&#xff0c;并结合虚拟存储系统原理实现的&#xff0c;是目前常用的一种实现虚拟存储器的方式 2、缺页/段中断机构&#xff1b; 作用就是就是要访问的页不在主存&#xff0c;需要操作系统将其调入主存后再进行访问。在这个时候&#xff0c;被内存映射的文件实际上成了一个分页交换文件。 3、地址变换机构。 当进程要访问某个逻辑地址中的数据时&#xff0c;分页地址变换机构会自动地将有效地址(相对地址)分为页号页内地址两部分&#xff0c;再以页号为索引去检索页表。查找操作由硬件执行。在执行检索之前&#xff0c;先将页号与页表长度进行比较&#xff0c;如果页号大于或等于页表长度&#xff0c;则表示本次所访问的地址已超越进程的地址空间。于是&#xff0c;这一错误将被系统发现并产生一地址越界中断。若未出现越界错误&#xff0c;则将页表始址与页号和页表项长度的乘积相加&#xff0c;便得到该表项在页表中的位置&#xff0c;于是可从中得到该页的物理块号&#xff0c;将之装入物理地址寄存器中。与此同时&#xff0c;再将有效地址寄存器中的页内地址送入物理地址)寄存器的块内地址字段中。这样便完成了从逻辑地址到物理地址的变换。</p>\n<h4>MIPS32</h4>\n<p>虚拟地址转换为物理地址过程为&#xff1a;</p>\n<p>虚拟地址的高位(VPN)和当前程序的ASID送给TLB&#xff0c;与TLB中的所有entry表项同时进行匹配&#xff0c;匹配过程中如果有如下都满足的TLB表项&#xff0c;从中读取PFN,V,D域</p>\n<p>1.当前程序(进程)的ASID等于TLB表项中的ASID(EntryHi的Gbit置位的话&#xff0c;不比较ASID) 2.虚拟地址的bit63~62与TLB表项的R字段相同 3.虚拟地址的相应位域和TLB的VPN2相同,相应位域取决于PageMask寄存器设置的页表大小 注意最终转换是否成功取决于V,D域。如果V无效&#xff0c;该entry无效&#xff0c;产生TLB无效异常&#xff1b;如果D指示不可写&#xff0c;而有写操作会产生TLB修改异常。如果没有上述异常&#xff0c;即是TLB命中&#xff0c;命中entry的PFN和虚拟地址低位(1KBpage的话是低10bit&#xff0c;4KBpage的话低12bit)构成最终的物理地址。</p>\n<h4>x86</h4>\n<p>32位X86&#xff0c;虚拟地址空间通过一个段表&#xff08;段表不需要bit位索引&#xff09;和2层页表进行转化&#xff0c;前10个bit位用于索引第一层页表&#xff0c;中间10个bit位用于索引第二层页表&#xff0c;后12位是页内的偏移。每个页表的元素占用4个字节&#xff0c;页大小是4KB&#xff0c;一个物理页可以容纳第1层级页表和第二层级页表&#xff0c;第二层页表的个数取决于所属段的长度&#xff08;即第一层页表的元素的个数&#xff09;。</p>\n<p>64位X86&#xff0c;虚拟地址空间可以延伸到64位&#xff0c;为了简化地址转换&#xff0c;当前很多处理器只用了48位&#xff08;前16位没有使用&#xff09;&#xff0c;能够满足256TB的内存空间使用&#xff0c;采用段表和4层页表进行转换&#xff08;9个bit位&#43;9个bit位&#43;9个bit位&#43;9个bit位 &#43; 12个bit位&#xff0c;段表不需要bit位索引&#xff0c;前4个9bit位分别用于4层页表的索引&#xff0c;最后一个12bit用于页内偏移&#xff0c;总计48bit位&#xff09;&#xff0c;只有第一层页表是被填满的&#xff0c;其他三层页表只有对应虚拟空间地址被使用了才会被填充。为了优化&#xff0c;64位X86可以消除1个或者2个层级的页表。每个物理页的大小是4KB&#xff0c;第4层级的页表可以管理2MB&#xff0c;第3层级的页表可以管理1GB的数据&#xff0c;若操作系统分配了连续的2MB物理页&#xff0c;则可以省去第4层级的页表&#xff0c;让第三层的页表元素直接指向2MB的物理页&#xff0c;同样的&#xff0c;若操作系统分配了连续的1GB物理页&#xff0c;则可以省去第3、4层级的页表&#xff0c;让第2层级页表的元素直接指向1GB的物理页。这样做既可以节省页表存储的开销&#xff0c;还可以提高地址转换效率。</p>"}], "type": "note", "tags": ["lecture6", "student"], "tag_good": [{"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 153, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>在X86上虚拟存储访问时的页表项标志位修改是由硬件完成的&#xff0c;软件会在缺页异常时&#xff0c;参与页表和访问页面对应存储的分配回收和页表项初始化。</p>\n<p></p>\n<p>在MIPS上虚拟存储访问过程中的页表项标志修改是软件完成的。</p>", "created": "2020-03-12T02:34:20Z", "bucket_order": 81, "bucket_name": "Week 3/8 - 3/14", "type": "followup", "tag_good": [{"role": "student", "name": "Studymaker", "endorser": {}, "admin": false, "photo": null, "id": "ks1e0jxs40w71", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": ["ks1e0jxs40w71"], "no_answer": 0, "id": "k7o52htaa4d4d3", "updated": "2020-03-12T02:34:20Z", "config": {}}], "tag_good_arr": ["hdjonbiyfs62ie"], "id": "k7j3jjsa5yj6ju", "config": {"seen": {"1349": 2, "25": 4, "861": 5, "1312": 9, "1133": 1, "1198": 3, "1163": 6, "61": 0, "64": 7, "1181": 8}}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 2, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643170011023, "default_anonymity": "no"}, "error": null, "aid": "kyv0zyxbx049f"}