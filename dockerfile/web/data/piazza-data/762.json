{"result": {"folders": ["lecture9"], "nr": 762, "data": {"embed_links": []}, "created": "2016-04-03T06:12:21Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-04-03T06:12:21Z", "data": "imk681axqfk1ho", "type": "create"}, {"to": "imk681avaq51hn", "anon": "stud", "when": "2016-04-03T06:30:47Z", "type": "followup", "uid_a": "a_0"}, {"to": "imk681avaq51hn", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-04-03T06:45:49Z", "type": "feedback"}, {"to": "imk681avaq51hn", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-03T06:56:05Z", "data": "imk7sa38fyj5z1", "type": "i_answer"}, {"to": "imk681avaq51hn", "anon": "stud", "when": "2016-04-03T07:11:38Z", "type": "feedback", "uid_a": "a_0"}, {"to": "imk681avaq51hn", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-04-03T07:15:08Z", "type": "feedback"}, {"to": "imk681avaq51hn", "anon": "stud", "when": "2016-04-03T07:16:55Z", "type": "feedback", "uid_a": "a_0"}, {"to": "imk681avaq51hn", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-04-03T07:22:31Z", "type": "feedback"}, {"to": "imk681avaq51hn", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-03T08:15:26Z", "type": "followup"}, {"to": "imk681avaq51hn", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-03T08:17:36Z", "type": "feedback"}, {"to": "imk681avaq51hn", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-03T08:24:00Z", "type": "feedback"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0ayxqk6wry734", "subject": "Belady现象", "created": "2016-04-03T06:12:21Z", "content": "<p>关于belady现象其实原理课中讲的很浅&#xff0c;有人知道belady现象的本质是什么么&#xff1f;</p>\n<p>什么“置换算法和访问动态特征矛盾”我感觉实在太笼统了&#xff0c;看着它我完全举不出例子</p>\n<p>网上的资料大都是关于FIFO的&#xff0c;而且例子就那么一两个重复了好多遍的&#xff0c;栈式置换算法没有</p>\n<p>belady现象可以理解&#xff0c;但是什么算法有呢&#xff1f;CLOCK有没有&#xff0c;改进CLOCK有没有&#xff1f;</p>\n<p>有的话有没有例子呢&#xff1f;</p>"}], "type": "question", "tags": ["lecture9", "student"], "tag_good": [], "unique_views": 257, "children": [{"anon": "stud", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>似乎视频里的例子clock就有&#xff1f;</p>\n<p>改进的话不涉及写&#xff0c;不跟clock一样的了么。。。</p>", "created": "2016-04-03T06:30:47Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "followup", "tag_good": [], "uid_a": "a_0", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我验算了一下好像没有&#xff0c;物理页大小分别为3和4&#xff0c;初始认为是清空的</p>\n<p>如果方便的话能不能贴一下你计算的过程&#xff0c;谢谢&#xff01;</p>", "created": "2016-04-03T06:45:49Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [], "tag_good_arr": [], "id": "imk7f37ze683d3", "updated": "2016-04-03T06:45:49Z", "config": {}}, {"anon": "stud", "folders": [], "data": {"embed_links": null}, "subject": "<p>你验算的是fifo的belady那个例子用在clock上&#xff1f;</p>", "created": "2016-04-03T07:11:38Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid_a": "a_0", "children": [], "tag_good_arr": [], "id": "imk8c9rdzvwu2", "updated": "2016-04-03T07:11:38Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我验算的是9-4那个例子&#xff0c;初始时物理内存为空&#xff0c;3个物理页缺页8次&#xff0c;四个物理页缺页7次</p>", "created": "2016-04-03T07:15:08Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [], "tag_good_arr": [], "id": "imk8gs004ym26c", "updated": "2016-04-03T07:15:08Z", "config": {}}, {"anon": "stud", "folders": [], "data": {"embed_links": null}, "subject": "<p>那可以试试fifo出现belady那个</p>", "created": "2016-04-03T07:16:55Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid_a": "a_0", "children": [], "tag_good_arr": [], "id": "imk8j2e8tej2os", "updated": "2016-04-03T07:16:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>好像真是&#xff0c;虽然clock的ref位没有保持全1好像也退化成FIFO一样的效果了</p>", "created": "2016-04-03T07:22:31Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [], "tag_good_arr": [], "id": "imk8qa319jy21q", "updated": "2016-04-03T07:22:31Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "imk6vqordv63cb", "updated": "2016-04-03T06:30:47Z", "config": {}}, {"folders": [], "data": {"embed_links": []}, "children": [], "created": "2016-04-03T06:56:05Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "叶子鹏", "endorser": {}, "admin": false, "photo": null, "id": "i0f24oie8102cr", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "Long Haomin", "endorser": {}, "admin": false, "photo": null, "id": "i14g50r7ui12pn", "photo_url": null, "published": true, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "LuZhe", "endorser": {}, "admin": false, "photo": null, "id": "ikvcvnzpzq7j7", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}], "bucket_name": "Today", "id": "imk7sa33ih35z0", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "", "created": "2016-04-03T06:56:05Z", "content": "<p>我印象中&#xff0c;在国防科大的操作系统教材上有栈式置换算法不会出现belady现象的证明。</p>\n<p></p>\n<p>只要不是栈式置换算法&#xff0c;就一定会有belady现象。构造实例的方法是&#xff0c;对于指定的置换算法&#xff0c;在把所有已分配的页面用上后&#xff0c;访问一个新页&#xff0c;就会出现缺页&#xff1b;然后就可以构造一个序列&#xff0c;每次都访问刚被置换的页面。这个序列就应该是belady现象的实例。</p>\n<p></p>\n<p>建议有兴趣的同学&#xff0c;在本帖后面回复每种非栈式置换算法的belady现象实例。</p>"}], "type": "i_answer", "tag_endorse_arr": ["i0f24oie8102cr", "i14g50r7ui12pn", "ikvcvnzpzq7j7"], "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>这应该是一个后缀问题吧&#xff0c;栈是满足一个后缀性质的&#xff0c;而队列不满足。</p>\n<p>就是说长度为n的栈一定是长度为n&#43;1的栈的后缀。</p>\n<p>而队列没有这个后缀的性质&#xff0c;所以可能出现belady</p>", "created": "2016-04-03T08:15:26Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "followup", "tag_good": [], "uid": "i0f24oie8102cr", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>这个&#34;栈&#34;与“后缀”我是针对访问序列来说的。是针对最近最不常使用的算法来说的。</p>", "created": "2016-04-03T08:17:36Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "i0f24oie8102cr", "children": [], "tag_good_arr": [], "id": "imkap3sspld39d", "updated": "2016-04-03T08:17:36Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>直观上&#xff0c;就是这样解释的。还需要有一个严谨的证明。</p>", "created": "2016-04-03T08:24:00Z", "bucket_order": 231, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "imkaxceedoe52g", "updated": "2016-04-03T08:24:00Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "imkambf826e2o4", "updated": "2016-04-03T08:15:26Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "imk681avaq51hn", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 8, "num_favorites": 4, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168456708, "default_anonymity": "no"}, "error": null, "aid": "kyv02nlw9iu6wu"}