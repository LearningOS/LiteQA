{"result": {"folders": ["2018", "lecture9", "课堂问答"], "nr": 1175, "data": {"embed_links": []}, "created": "2018-03-26T02:19:04Z", "bucket_order": 3, "no_answer_followup": 6, "change_log": [{"anon": "no", "uid": "hdjonbiyfs62ie", "data": "jf7lt2a1nen140", "type": "create", "when": "2018-03-26T02:19:04Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jf7lt29yuuc13z", "type": "followup", "when": "2018-03-26T02:20:16Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jf7lt29yuuc13z", "type": "followup", "when": "2018-03-26T02:20:30Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jf7lt29yuuc13z", "type": "followup", "when": "2018-03-26T02:20:59Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "to": "jf7lt29yuuc13z", "type": "followup", "when": "2018-03-26T02:21:42Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:11:57Z"}, {"anon": "no", "uid": "it2wrxu13f13sy", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:12:19Z"}, {"anon": "no", "uid": "je2ib2uxxq069j", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:13:03Z"}, {"anon": "no", "uid": "iswj8urcumf2o2", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:13:29Z"}, {"anon": "no", "uid": "it58zzgs79f5bc", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:13:33Z"}, {"anon": "no", "uid": "iswj1pilsct7jy", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:13:37Z"}, {"anon": "no", "uid": "isvu5gl72p04ph", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:14:19Z"}, {"anon": "no", "uid": "je2ib2nv6rj69f", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-27T01:14:21Z"}, {"anon": "no", "uid": "it58zzgs79f5bc", "to": "jf7lt29yuuc13z", "type": "followup", "when": "2018-03-28T02:57:38Z"}, {"anon": "no", "uid": "iswj1pilsct7jy", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-29T09:54:45Z"}, {"anon": "no", "uid": "iswj8urcumf2o2", "to": "jf7lt29yuuc13z", "type": "followup", "when": "2018-03-29T10:59:37Z"}, {"anon": "no", "uid": "isvxeq6bspf1vn", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-29T13:42:18Z"}, {"anon": "no", "uid": "je2ib2nv6rj69f", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-30T03:44:47Z"}, {"anon": "no", "uid": "isvu5gl72p04ph", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-30T04:36:18Z"}, {"anon": "no", "uid": "it2wrxu13f13sy", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2018-03-30T05:22:51Z"}, {"anon": "no", "uid": "jshne3teufu4qt", "to": "jf7lt29yuuc13z", "type": "feedback", "when": "2019-03-25T03:22:59Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2018春季-第九讲课堂实践练习", "created": "2018-03-26T02:19:04Z", "content": "<p>根据你的&#96;学号 mod 4&#96;的结果值&#xff0c;确定选择四种页面置换算法&#xff08;0&#xff1a;LRU置换算法&#xff0c;1:改进的clock 页置换算法&#xff0c;2&#xff1a;工作集页置换算法&#xff0c;3&#xff1a;缺页率置换算法&#xff09;中的一种来设计一个应用程序&#xff08;可基于python, ruby, C, C&#43;&#43;&#xff0c;LISP等&#xff09;模拟实现&#xff0c;并给出测试用例和测试结果。请参考如python代码或独自实现。</p>\n<p></p>\n<p>题目&#xff1a;<br /><a href=\"https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/04-2-spoc-discussion.md#%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98%E7%9B%AE\">https://github.com/chyyuu/os_course_exercises/blob/2018spring/all/04-2-spoc-discussion.md#%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98%E7%9B%AE</a></p>\n<p></p>"}], "type": "note", "tags": ["2018", "instructor-note", "lecture9", "课堂问答"], "tag_good": [], "unique_views": 175, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>选择“0&#xff1a;LRU置换算法”的同学&#xff0c;请在此处回复。</p>", "created": "2018-03-26T02:20:16Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2015011285 王延森</p>", "created": "2018-03-27T01:13:29Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "iswj8urcumf2o2", "children": [], "tag_good_arr": [], "id": "jf8ywkrat7q3dg", "updated": "2018-03-27T01:13:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2015011293 黄帅</p>", "created": "2018-03-27T01:13:33Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "it58zzgs79f5bc", "children": [], "tag_good_arr": [], "id": "jf8ywodn2bl4u5", "updated": "2018-03-27T01:13:33Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2016011388 潘庆霖</p>", "created": "2019-03-25T03:22:59Z", "bucket_order": 54, "bucket_name": "Week 3/24 - 3/30", "type": "feedback", "tag_good": [], "uid": "jshne3teufu4qt", "children": [], "tag_good_arr": [], "id": "jtnsdc43pb44di", "updated": "2019-03-25T03:22:59Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jf7lum1fseh1zc", "updated": "2018-03-26T02:20:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>选择“1:改进的clock 页置换算法”的同学&#xff0c;请在此处回复。</p>", "created": "2018-03-26T02:20:30Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2015010137&#xff0c;路橙</p>", "created": "2018-03-27T01:12:19Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "it2wrxu13f13sy", "children": [], "tag_good_arr": [], "id": "jf8yv36xrr23l6", "updated": "2018-03-27T01:12:19Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2015011306 张天扬</p>", "created": "2018-03-27T01:13:37Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "iswj1pilsct7jy", "children": [], "tag_good_arr": [], "id": "jf8ywr1hfk34w6", "updated": "2018-03-27T01:13:37Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>#include&lt;bits/stdc&#43;&#43;.h&gt;\nusing namespace std;\nstruct Page\n{\n    int pgnum;\n    bool view, dirty;\n    Page(){view=dirty=false;pgnum=-1;}\n}a[100];\nint n = 15, cur=1;\nint pgfault = 0;\nvoid work(int pgnum, int write)\n{\n    for(int i = 1; i &lt;= n; &#43;&#43;i)\n        if(a[i].pgnum == pgnum)\n        {\n            a[i].view = true;\n            if(write == 1)\n                a[i].dirty = 1;\n            return;\n        }\n    while(true)\n    {\n        if(a[cur].pgnum == -1)\n        {\n            a[cur].pgnum = pgnum;\n            a[cur].view = true;\n            if(write == 1)\n                a[cur].dirty = 1;\n            break;\n        }\n        if(a[cur].view == false &amp;&amp; a[cur].dirty == false)\n        {\n            a[cur].pgnum = pgnum;\n            a[cur].view = true;\n            if(write == 1)\n                a[cur].dirty = 1;\n            break;\n        }\n        else if(a[cur].view == false &amp;&amp; a[cur].dirty == true)\n        {\n            a[cur].dirty = false;\n        }\n        else if(a[cur].view == true &amp;&amp; a[cur].dirty == false)\n        {\n            a[cur].view = false;\n        }\n        else if(a[cur].view == true &amp;&amp; a[cur].dirty == true)\n        {\n            a[cur].view = false;\n        }\n        &#43;&#43;cur;\n        if(cur &gt; n)\n            cur = 1;\n    }\n    &#43;&#43;pgfault;\n}\nint main()\n{\n    srand(time(NULL));\n    int cnt = 0;\n    work(3, 0);\n    work(1, 1);\n    work(4, 0);\n    work(2, 1);\n    work(5, 0);\n    work(2, 0);\n    work(1, 1);\n    work(2, 0);\n    work(3, 0);\n    work(4, 0);\n    printf(&#34;%d\\n&#34;, pgfault);\n    for(int i = 1; i &lt;= 100; &#43;&#43;i)\n        for(int j = i; j &lt;= min(i&#43;17, 100); &#43;&#43;j)\n        {\n            work(j, rand()&amp;1);\n            &#43;&#43;cnt;\n        }\n    printf(&#34;%d: %d\\n&#34;, cnt, pgfault);\n}</pre>\n<p>在这个测试用例中&#xff08;具有很强的空间局部性&#xff09;&#xff0c;页缺失数随页面个数的变化规律&#xff1a;</p>\n<p>n=50: 102</p>\n<p>n=20: 110</p>\n<p>n=17: 316</p>\n<p>n=15: 725</p>\n<p>n=13: 1110</p>\n<p>n=10: 1560</p>\n<p>n=8: 1597</p>\n<p>可以看到在这个用例中&#xff0c;当分配的页面数量在10到20之间时&#xff0c;页缺失数会随着页面数量有极大的变化。而不在这个范围内时则影响很小。</p>", "created": "2018-03-29T09:54:45Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "iswj1pilsct7jy", "children": [], "tag_good_arr": [], "id": "jfccenf5cryd", "updated": "2018-03-29T09:54:45Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>#include &lt;iostream&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\nusing namespace std;\n\n#define PRESENT_FLAG 0x1\n#define VIEW_FLAG 0x2\n#define DIRTY_FLAG 0x4\n#define TOTAL_TABLE 20\n\nvoid increase(int &amp;num) {\n    num = (num &#43; 1) % TOTAL_TABLE;\n}\n\nstruct Page_table\n{\n    int pageNum;\n    int flag;\n\n    void set_present() {\n        flag |= PRESENT_FLAG;\n    }\n\n    void clear_present() {\n        flag &amp;= ~PRESENT_FLAG;\n    }\n\n    void set_view()\n    {\n        flag |= VIEW_FLAG;\n    }\n\n    void clear_view()\n    {\n        flag &amp;= ~VIEW_FLAG;\n    }\n\n    void set_dirty()\n    {\n        flag |= DIRTY_FLAG;\n    }\n\n    void clear_dirty()\n    {\n        flag &amp;= ~DIRTY_FLAG;\n    }\n\n    bool is_present() {\n        return (flag &amp; PRESENT_FLAG);\n    }\n\n    bool is_viewed() {\n        return (flag &amp; VIEW_FLAG);\n    }\n\n    bool is_written() {\n        return (flag &amp; DIRTY_FLAG);\n    }\n\n    void swap_out() {\n        cout &lt;&lt; &#34;swap out &#34; &lt;&lt; pageNum &lt;&lt; endl;\n        if(is_written()) {\n            cout &lt;&lt; &#34;written &#34; &lt;&lt; pageNum &lt;&lt; endl;\n        }\n        clear_present();\n    }\n\n    int take_in(int pgnum, bool write) {\n        cout &lt;&lt; &#34;swap in &#34; &lt;&lt; pgnum &lt;&lt; endl;\n        pageNum = pgnum;\n        set_present();\n        set_view();\n        if(write) {\n            set_dirty();\n        }\n        return 0;\n    }\n\n    Page_table() {\n        pageNum = -1;\n        flag = 0;\n    }\n};\n\nPage_table tables[TOTAL_TABLE];\nint cur = 0;\nint pg_fault_num = 0;\n\nint visit_page(int pageNum, bool write) {\n    for (int i = 0; i &lt; TOTAL_TABLE; i&#43;&#43;) {\n        if(tables[i].pageNum == pageNum &amp;&amp; tables[i].is_present()) {\n            tables[i].set_view();\n            if (write) {\n                tables[i].set_dirty();\n            }\n            return 0;\n        }\n    }\n    pg_fault_num&#43;&#43;;\n    int begin = cur;\n    while (true) {\n        if(!tables[cur].is_present()) {\n            tables[cur].take_in(pageNum, write);\n            increase(cur);\n            return 0;\n        }\n        increase(cur);\n        if (begin == cur) {\n            break;\n        }\n    }\n    while (true) {\n        if(!tables[cur].is_viewed() &amp;&amp; !tables[cur].is_written()) {\n            tables[cur].swap_out();\n            tables[cur].take_in(pageNum, write);\n            increase(cur);\n            return 0;\n        }\n        if (!tables[cur].is_viewed() &amp;&amp; tables[cur].is_written()) {\n            tables[cur].clear_dirty();\n        }\n        if (tables[cur].is_viewed() &amp;&amp; !tables[cur].is_written()) {\n            tables[cur].clear_view();\n        }\n        if (tables[cur].is_viewed() &amp;&amp; tables[cur].is_written()) {\n            tables[cur].clear_view();\n        }\n        increase(cur);\n    }\n}\n\nint main()\n{\n    srand(time(NULL));\n    int cnt = 0;\n    visit_page(3, 0);\n    visit_page(1, 1);\n    visit_page(4, 0);\n    visit_page(2, 1);\n    visit_page(5, 0);\n    visit_page(2, 0);\n    visit_page(1, 1);\n    visit_page(2, 0);\n    visit_page(3, 0);\n    visit_page(4, 0);\n    cout &lt;&lt; pg_fault_num &lt;&lt; endl;\n    for(int i = 1; i &lt;= 100; &#43;&#43;i)\n    {\n        for(int j = i; j &lt;= min(i&#43;17, 100); &#43;&#43;j)\n        {\n            visit_page(j, rand()&amp;1);\n            &#43;&#43;cnt;\n        }\n    }\n    cout &lt;&lt; cnt &lt;&lt; &#34;:&#34; &lt;&lt; pg_fault_num &lt;&lt; endl;\n\n    return 0;\n}</pre>\n<p></p>\n<p>使用了和张天扬一样的测例&#xff0c;但由于是随机测例&#xff0c;看不出来有没有bug&#xff08;</p>\n<p>n=50: 101</p>\n<p>n=20: 103</p>\n<p>n=17: 305</p>\n<p>n=15: 854</p>\n<p>n=13: 1315</p>\n<p>n=10: 1580</p>\n<p>n=8: 1600</p>", "created": "2018-03-30T05:22:51Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "it2wrxu13f13sy", "children": [], "tag_good_arr": [], "id": "jfdi4u0lfhb38l", "updated": "2018-03-30T05:22:51Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jf7lux5z9z1258", "updated": "2018-03-26T02:20:30Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>选择“2&#xff1a;工作集页置换算法”的同学&#xff0c;请在此处回复。</p>", "created": "2018-03-26T02:20:59Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>徐子涵 2015011300</p>", "created": "2018-03-27T01:14:19Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "isvu5gl72p04ph", "children": [], "tag_good_arr": [], "id": "jf8yxnokuno436", "updated": "2018-03-27T01:14:19Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>柴华君　2015011377</p>\n<p></p>", "created": "2018-03-27T01:14:21Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "je2ib2nv6rj69f", "children": [], "tag_good_arr": [], "id": "jf8yxpe6uq64bb", "updated": "2018-03-27T01:14:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>#include &lt;iostream&gt;<br />using namespace std;<br /><br />#define N 100<br />#define M 4<br />// 访问页  工作集  当前元素工作集中是否存在<br />int page[N] = {0, 2, 4, 3, 3, 2, 7, 8, 9, 0, 8, 9};<br />int work_set[N] = {0}, flag_pre[N] = {0}; <br />int set_num = 0;  //工作集大小<br />int store[M] = {0, 2, 3, 1};<br /><br />void work_set_window(int t, int delta){  //求解工作集<br />\tset_num = 0;  //构建工作表  初始化<br />\tfor(int i = 0; i &lt; N; i&#43;&#43;){<br />\t\tflag_pre[i] = 0;<br />\t\twork_set[i] = 0;<br />\t}<br /><br />\tfor(int i = t - 1; i &gt;= t - delta; i--){<br />\t\tif(i &lt; 0)<br />\t\t\tbreak;<br />\t\tif(flag_pre[page[i]] == 0){  //该页未在工作集中<br />\t\t\tflag_pre[page[i]] = 1;<br />\t\t\twork_set[set_num] = page[i];<br />\t\t\tset_num&#43;&#43;;<br />\t\t}<br />\t}\t<br />}<br /><br />int main(){<br />\tint delta = 4;<br /><br />\tfor(int i = 0; i &lt; 12; i&#43;&#43;){<br />\t\tint lack_flag = 0;  //缺页标志 0是 1否<br />\t\tfor(int j = 0; j &lt; M; j&#43;&#43;){<br />\t\t\tif(page[i] == store[j])<br />\t\t\t\tlack_flag = 1;<br />\t\t}<br />\t\tif(lack_flag){<br />\t\t\twork_set_window(i, delta);<br />\t\t\tcout &lt;&lt; i &lt;&lt; &#34;  hit&#34; &lt;&lt; endl;<br />\t\t\tcout &lt;&lt; &#34;work_set is &#34;;<br />\t\t\tfor(int k = 0; k &lt; set_num; k&#43;&#43;)<br />\t\t\t\tcout &lt;&lt; work_set[k] &lt;&lt; &#34; &#34;;<br />\t\t\tcout &lt;&lt; endl;<br />\t\t\tcout &lt;&lt; &#34;store is &#34; ;<br />\t\t\tfor(int k = 0; k &lt; M; k&#43;&#43;)<br />\t\t\t\tcout &lt;&lt; store[k] &lt;&lt; &#34; &#34;; <br />\t\t\tcout &lt;&lt; endl;<br />\t\t\tcontinue;  <br />\t\t}<br />\t\telse{<br />\t\t\tcout &lt;&lt; i &lt;&lt; &#34;  miss&#34;;<br /> \t\t\twork_set_window(i, delta);  //求解工作集&#xff0c;准备替换<br /> \t\t\tcout &lt;&lt; &#34;work_set is &#34;;<br /> \t\t\tfor(int k = 0; k &lt; set_num; k&#43;&#43;)<br />\t\t\t\tcout &lt;&lt; work_set[k] &lt;&lt; &#34; &#34;;<br />\t\t\tcout &lt;&lt; endl;<br />\t\t\tcout &lt;&lt; &#34;store is &#34; ;<br />\t\t\tfor(int k = 0; k &lt; M; k&#43;&#43;)<br />\t\t\t\tcout &lt;&lt; store[k] &lt;&lt; &#34; &#34;;<br />\t\t\tcout &lt;&lt; endl;<br />\t\t\tint re_flag;<br />\t\t\tfor(int j = 0; j &lt; M; j&#43;&#43;){<br />\t\t\t\tre_flag = 1;  //替换标志 0 失败 1 成功<br />\t\t\t\tfor(int k = 0; k &lt; set_num; k&#43;&#43;){<br />\t\t\t\t\tif(store[j] == work_set[k]){<br />\t\t\t\t\t\tre_flag = 0;<br />\t\t\t\t\t\tcontinue;<br />\t\t\t\t\t}<br />\t\t\t\t}<br />\t\t\t\tif(re_flag){<br />\t\t\t\t\tstore[j] = page[i];<br />\t\t\t\t\tbreak;<br />\t\t\t\t}<br /><br />\t\t\t}<br />\t\t\tif(!re_flag)<br />\t\t\t\tfor(int j = 0; j &lt; M; j&#43;&#43;){<br />\t\t\t\t\tif(store[j] == work_set[set_num -1])<br />\t\t\t\t\t\tstore[j] = page[i];<br />\t\t\t\t}<br />\t\t}<br />\t}<br />\treturn 0;<br />}</pre>\n<p>测试样例&#xff1a;</p>\n<p>物理页数&#xff1a; 4  工作集 delta&#xff1a;4 内存访问序列&#xff1a;[0, 2, 4, 3, 3, 2, 7, 8, 9, 0, 8, 9]</p>\n<p>测试结果&#xff1a;</p>\n<pre>0  hit\nwork_set is\nstore is 0 2 3 1\n1  hit\nwork_set is 0\nstore is 0 2 3 1\n2  misswork_set is 2 0\nstore is 0 2 3 1\n3  misswork_set is 4 2 0\nstore is 0 2 4 1\n4  hit\nwork_set is 3 4 2 0\nstore is 0 2 4 3\n5  hit\nwork_set is 3 4 2\nstore is 0 2 4 3\n6  misswork_set is 2 3 4\nstore is 0 2 4 3\n7  misswork_set is 7 2 3\nstore is 7 2 4 3\n8  misswork_set is 8 7 2 3\nstore is 7 2 8 3\n9  misswork_set is 9 8 7 2\nstore is 7 2 8 9\n10  hit\nwork_set is 0 9 8 7\nstore is 7 0 8 9\n11  hit\nwork_set is 8 0 9\nstore is 7 0 8 9</pre>\n<p></p>", "created": "2018-03-30T03:44:47Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "je2ib2nv6rj69f", "children": [], "tag_good_arr": [], "id": "jfdempmrown1ah", "updated": "2018-03-30T03:44:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p><a href=\"https://gist.github.com/otowa-kotori/5b905070a12dc9e2e13aa29f5351c96c\" target=\"_blank\">https://gist.github.com/otowa-kotori/5b905070a12dc9e2e13aa29f5351c96c</a></p>", "created": "2018-03-30T04:36:18Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "isvu5gl72p04ph", "children": [], "tag_good_arr": [], "id": "jfdggytfodp10r", "updated": "2018-03-30T04:36:18Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jf7lvj5ily82fj", "updated": "2018-03-26T02:20:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>选择“3&#xff1a;缺页率置换算法”的同学&#xff0c;请在此处回复。</p>", "created": "2018-03-26T02:21:42Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>魏钧宇 2015011263</p>", "created": "2018-03-27T01:11:57Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "id": "jf8yum368m53a7", "updated": "2018-03-27T01:11:57Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>郑远航 2015011339</p>\n<p>见<a href=\"https://github.com/oscourse-tsinghua/os2018-ZYH111/blob/master/os_course_exercises/04-2-spoc-discussion.md\" target=\"_blank\">https://github.com/oscourse-tsinghua/os2018-ZYH111/blob/master/os_course_exercises/04-2-spoc-discussion.md</a></p>", "created": "2018-03-27T01:13:03Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "je2ib2uxxq069j", "children": [], "tag_good_arr": [], "id": "jf8yw1cpfsz50q", "updated": "2018-03-27T01:13:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<pre>import sys\n\nwork_set = []\naccess_list = []\nthreshold = 0\n\ndef load(file_name):\n    file_object = open(file_name,&#39;r&#39;)\n    items = file_object.readline().split()\n    ans = []\n    for item in items:\n        ans.append(int(item))\n    return ans\n\nif __name__ == &#34;__main__&#34;:\n    threshold = int(sys.argv[1])\n    access_list = load(&#34;access_list&#34;)\n    hit_time = 0\n    last_time = 0\n    access_time = 0\n    for i in access_list:\n        print(&#34;------Start to access %d------&#34;%i)\n        find = 0\n        for j in work_set:\n            if j[0] == i:\n                print(&#34;Page Hit!&#34;)\n                hit_time = hit_time &#43; 1\n                j[1] = 1\n                find = 1\n                break\n        if find == 0:\n            print(&#34;Page Fault!&#34;)\n            if (access_time - last_time &gt;= threshold):\n                print(&#34;Start to delete&#34;)\n                remove_list = []\n                for j in work_set:\n                    print(&#34;Now check %d&#34;%j[0])\n                    if j[1] == 0:\n                        print(&#34;Delete Page %d&#34;%j[0])\n                        remove_list.append(j)\n                    else:\n                        j[1] = 0\n                for k in remove_list:\n                    work_set.remove(k)\n            else:\n                print(&#34;Will not delete&#34;)\n            \n            print(&#34;Add Page %d&#34;%i)\n            work_set.append([i,0])\n            last_time = access_time\n        c = &#34;&#34;\n        for i in work_set:\n            c = c &#43; &#34; &#34; &#43; str(i)\n        print(&#34;Now Work Set: %s&#34;%c)\n        print(&#34;------Access End------\\n&#34;)\n        access_time = access_time &#43; 1\n    \n    print(&#34;Hit time: %d access time: %d Hit rate: %s&#34;%(hit_time, access_time, str(float(hit_time) / access_time)))\n\n\n测试用例&#xff1a;\n1 2 3 4 5 3 2 4 2 3 6 19 21 6 19 21\n\n测试结果&#xff1a;\nvictors-MacBook-Pro:page_test victor$ python page.py 2\n------Start to access 1------\nPage Fault!\nWill not delete\nAdd Page 1\nNow Work Set:  [1, 0]\n------Access End------\n------Start to access 2------\nPage Fault!\nWill not delete\nAdd Page 2\nNow Work Set:  [1, 0] [2, 0]\n------Access End------\n------Start to access 3------\nPage Fault!\nWill not delete\nAdd Page 3\nNow Work Set:  [1, 0] [2, 0] [3, 0]\n------Access End------\n------Start to access 4------\nPage Fault!\nWill not delete\nAdd Page 4\nNow Work Set:  [1, 0] [2, 0] [3, 0] [4, 0]\n------Access End------\n------Start to access 5------\nPage Fault!\nWill not delete\nAdd Page 5\nNow Work Set:  [1, 0] [2, 0] [3, 0] [4, 0] [5, 0]\n------Access End------\n------Start to access 3------\nPage Hit!\nNow Work Set:  [1, 0] [2, 0] [3, 1] [4, 0] [5, 0]\n------Access End------\n------Start to access 2------\nPage Hit!\nNow Work Set:  [1, 0] [2, 1] [3, 1] [4, 0] [5, 0]\n------Access End------\n------Start to access 4------\nPage Hit!\nNow Work Set:  [1, 0] [2, 1] [3, 1] [4, 1] [5, 0]\n------Access End------\n------Start to access 2------\nPage Hit!\nNow Work Set:  [1, 0] [2, 1] [3, 1] [4, 1] [5, 0]\n------Access End------\n------Start to access 3------\nPage Hit!\nNow Work Set:  [1, 0] [2, 1] [3, 1] [4, 1] [5, 0]\n------Access End------\n------Start to access 6------\nPage Fault!\nStart to delete\nDelete Page 1\nDelete Page 5\nAdd Page 6\nNow Work Set:  [2, 0] [3, 0] [4, 0] [6, 0]\n------Access End------\n------Start to access 19------\nPage Fault!\nWill not delete\nAdd Page 19\nNow Work Set:  [2, 0] [3, 0] [4, 0] [6, 0] [19, 0]\n------Access End------\n------Start to access 21------\nPage Fault!\nWill not delete\nAdd Page 21\nNow Work Set:  [2, 0] [3, 0] [4, 0] [6, 0] [19, 0] [21, 0]\n------Access End------\n------Start to access 6------\nPage Hit!\nNow Work Set:  [2, 0] [3, 0] [4, 0] [6, 1] [19, 0] [21, 0]\n------Access End------\n------Start to access 19------\nPage Hit!\nNow Work Set:  [2, 0] [3, 0] [4, 0] [6, 1] [19, 1] [21, 0]\n------Access End------\n------Start to access 21------\nPage Hit!\nNow Work Set:  [2, 0] [3, 0] [4, 0] [6, 1] [19, 1] [21, 1]\n------Access End------\nHit time: 8 access time: 16 Hit rate: 0.5</pre>", "created": "2018-03-29T13:42:18Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "feedback", "tag_good": [], "uid": "isvxeq6bspf1vn", "children": [], "tag_good_arr": [], "id": "jfckj9h6f7rk", "updated": "2018-03-29T13:42:18Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jf7lwgoaopa4js", "updated": "2018-03-26T02:21:42Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>python3实现&#xff1a;</p>\n<pre>phypageframesize = 4<br />addrList = [2,0,3,1,4,1,0,1,2,3]<br /><br />def lookForPages():<br />\tmemory = []\t\t# include pages in memory<br />\tcnt = 0\t\t\t# current visit time<br />\tdict_ref = {}\t# last ref-time of pages<br />\tmiss = 0\t\t# page-fault time<br />\tfor nStr in addrList:<br />\t\tcnt &#43;= 1<br />\t\tprint(&#34;[%d]look for page[%d]&#34;%(cnt,nStr))<br />\t\tif(not nStr in memory):\t# page fault<br />\t\t\tmiss &#43;= 1<br />\t\t\tprint(&#34;page fault[%d]&#34;%miss)<br />\t\t\tif(len(memory) &lt; phypageframesize):\t# add a page directly<br />\t\t\t\tmemory.append(nStr)<br />\t\t\telse:\t# need to swap out a pages<br />\t\t\t\t# find the idx with smallest ref-time in dict_ref<br />\t\t\t\t# (so it hasn&#39;t been visit for the longest time)<br />\t\t\t\tmin = 100<br />\t\t\t\tfor idx in range(len(memory)):<br />\t\t\t\t\tif(dict_ref[memory[idx]] &lt; min):<br />\t\t\t\t\t\tidx_final = idx<br />\t\t\t\t\t\tmin = dict_ref[memory[idx]]<br />\t\t\t\t# replace the page at idx_final by the new page<br />\t\t\t\tmemory[idx_final] = nStr<br />\t\t# update the last-ref-time of nStr<br />\t\tdict_ref[nStr] = cnt<br />\t\t<br />\t\tprint(&#34;\\nmemory:&#34;)<br />\t\tfor page in memory:<br />\t\t\tprint(&#34;page[%d] last-ref[%d]&#34;%(page, dict_ref[page]))<br />\t\tprint()<br />\tprint(&#34;Total: %d, miss: %d&#34;%(len(addrList), miss))<br /><br />if __name__ == &#39;__main__&#39;:<br />\tlookForPages()</pre>\n<p>测试用例&#xff1a;</p>\n<pre>物理页面数 4<br />内存访问序列 [2,0,3,1,4,1,0,1,2,3]</pre>\n<p>测试结果&#xff1a;</p>\n<pre>C:\\Users\\Shine\\Desktop\\OS\\os_course_exercises\\all\\04-2-spoc-discussion&gt;python 04-2-LRU.py\n[1]look for page[2]\npage fault[1]\n\nmemory:\npage[2] last-ref[1]\n\n[2]look for page[0]\npage fault[2]\n\nmemory:\npage[2] last-ref[1]\npage[0] last-ref[2]\n\n[3]look for page[3]\npage fault[3]\n\nmemory:\npage[2] last-ref[1]\npage[0] last-ref[2]\npage[3] last-ref[3]\n\n[4]look for page[1]\npage fault[4]\n\nmemory:\npage[2] last-ref[1]\npage[0] last-ref[2]\npage[3] last-ref[3]\npage[1] last-ref[4]\n\n[5]look for page[4]\npage fault[5]\n\nmemory:\npage[4] last-ref[5]\npage[0] last-ref[2]\npage[3] last-ref[3]\npage[1] last-ref[4]\n\n[6]look for page[1]\n\nmemory:\npage[4] last-ref[5]\npage[0] last-ref[2]\npage[3] last-ref[3]\npage[1] last-ref[6]\n\n[7]look for page[0]\n\nmemory:\npage[4] last-ref[5]\npage[0] last-ref[7]\npage[3] last-ref[3]\npage[1] last-ref[6]\n\n[8]look for page[1]\n\nmemory:\npage[4] last-ref[5]\npage[0] last-ref[7]\npage[3] last-ref[3]\npage[1] last-ref[8]\n\n[9]look for page[2]\npage fault[6]\n\nmemory:\npage[4] last-ref[5]\npage[0] last-ref[7]\npage[2] last-ref[9]\npage[1] last-ref[8]\n\n[10]look for page[3]\npage fault[7]\n\nmemory:\npage[3] last-ref[10]\npage[0] last-ref[7]\npage[2] last-ref[9]\npage[1] last-ref[8]\n\nTotal: 10, miss: 7</pre>", "created": "2018-03-28T02:57:38Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "it58zzgs79f5bc", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jfai2diqzfr5gz", "updated": "2018-03-28T02:57:38Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>python2实现</p>\n<pre>import sys\n\npage_list = []\ntime = 0\npage_fault_num = 0\n\ndef info_page_list():\nfor page in page_list:\n    print &#34;\\tPage NO: %d, Last use: %d&#34; % (page[&#39;NO&#39;], page[&#39;time&#39;])\n\ndef hit(pos):\n    global time\n    global page_fault_num\n    page_list[pos][&#39;time&#39;] = time\nprint &#34;time: %d&#34; % time\n    time &#43;= 1\n    print &#34;page hit! hit page %d, total page fault num: %d&#34; % (page_list[pos][&#39;NO&#39;], page_fault_num)\n    info_page_list()\n\ndef swap(pos, page_NO):\n    global time\n    global page_fault_num\n    swap_out_page = page_list[pos][&#39;NO&#39;]\n    page_list[pos][&#39;NO&#39;] = page_NO\n    page_list[pos][&#39;time&#39;] = time\nprint &#34;time: %d&#34; % time\n    time &#43;= 1\n    print &#34;page fault! swap out page %d, swap in page %d, total page fault num: %d&#34; % (swap_out_page, page_NO, page_fault_num)\n    info_page_list()\n\ndef find_page(page_NO):\n    length = len(page_list)\n    pos = 0\n    earliest_use = -1\n    for i in range(length):\n        if page_list[i][&#39;NO&#39;] == page_NO:\n            hit(i)\n            return\n        if (earliest_use == -1) or (earliest_use &gt; page_list[i][&#39;time&#39;]):\n            pos = i\n            earliest_use = page_list[i][&#39;time&#39;]\n    global page_fault_num\n    global time\n    page_fault_num &#43;= 1\n    if length &lt; page_list_size:\n        page_list.append({&#39;NO&#39;: page_NO, &#39;time&#39;: time})\n    print &#34;time: %d&#34; % time\n        print &#34;page fault! load page %d, total page fault num: %d&#34; % (page_NO, page_fault_num)\n        info_page_list()\n        time &#43;= 1\n    else:\n        swap(pos, page_NO)\n\nif __name__ == &#39;__main__&#39;:\n    page_list_size = int(sys.argv[1])\n    page_fault_num = 0\n    page_to_feed = [1, 2, 3, 4, 1, 5, 6, 3, 2, 5]\n    for i in range(len(page_to_feed)):\n        find_page(page_to_feed[i])</pre>\n<p>测试时&#xff0c;最大页面数4&#xff0c;页访问序列1 2 3 4 1 5 6 3 2 5</p>\n<p>输出结果为:</p>\n<pre>time: 0\npage fault! load page 1, total page fault num: 1\n\tPage NO: 1, Last use: 0\ntime: 1\npage fault! load page 2, total page fault num: 2\n\tPage NO: 1, Last use: 0\n\tPage NO: 2, Last use: 1\ntime: 2\npage fault! load page 3, total page fault num: 3\n\tPage NO: 1, Last use: 0\n\tPage NO: 2, Last use: 1\n\tPage NO: 3, Last use: 2\ntime: 3\npage fault! load page 4, total page fault num: 4\n\tPage NO: 1, Last use: 0\n\tPage NO: 2, Last use: 1\n\tPage NO: 3, Last use: 2\n\tPage NO: 4, Last use: 3\ntime: 4\npage hit! hit page 1, total page fault num: 4\n\tPage NO: 1, Last use: 4\n\tPage NO: 2, Last use: 1\n\tPage NO: 3, Last use: 2\n\tPage NO: 4, Last use: 3\ntime: 5\npage fault! swap out page 2, swap in page 5, total page fault num: 5\n\tPage NO: 1, Last use: 4\n\tPage NO: 5, Last use: 5\n\tPage NO: 3, Last use: 2\n\tPage NO: 4, Last use: 3\ntime: 6\npage fault! swap out page 3, swap in page 6, total page fault num: 6\n\tPage NO: 1, Last use: 4\n\tPage NO: 5, Last use: 5\n\tPage NO: 6, Last use: 6\n\tPage NO: 4, Last use: 3\ntime: 7\npage fault! swap out page 4, swap in page 3, total page fault num: 7\n\tPage NO: 1, Last use: 4\n\tPage NO: 5, Last use: 5\n\tPage NO: 6, Last use: 6\n\tPage NO: 3, Last use: 7\ntime: 8\npage fault! swap out page 1, swap in page 2, total page fault num: 8\n\tPage NO: 2, Last use: 8\n\tPage NO: 5, Last use: 5\n\tPage NO: 6, Last use: 6\n\tPage NO: 3, Last use: 7\ntime: 9\npage hit! hit page 5, total page fault num: 8\n\tPage NO: 2, Last use: 8\n\tPage NO: 5, Last use: 9\n\tPage NO: 6, Last use: 6\n\tPage NO: 3, Last use: 7</pre>\n<p></p>", "created": "2018-03-29T10:59:37Z", "bucket_order": 106, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "iswj8urcumf2o2", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "jfceq2hexyvw6", "updated": "2018-03-29T10:59:37Z", "config": {}}], "tag_good_arr": [], "id": "jf7lt29yuuc13z", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 10, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169320841, "default_anonymity": "no"}, "error": null, "aid": "kyv0l6dlfqmfh"}