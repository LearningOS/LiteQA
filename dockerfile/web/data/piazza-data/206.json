{"result": {"folders": ["exam"], "nr": 206, "data": {"embed_links": []}, "created": "2015-03-30T06:37:01Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-30T06:37:01Z", "data": "i7vi6kk2hde7kp", "type": "create"}, {"to": "i7vi6kjwhef7ko", "uid": "i6xgf2t8N7w", "anon": "no", "when": "2015-03-30T06:38:11Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6uji18l8j51ob", "anon": "no", "when": "2015-03-30T06:38:36Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i7bfq2txxyw689", "anon": "no", "when": "2015-03-30T06:51:46Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6unpz8nUza", "anon": "no", "when": "2015-03-30T07:03:13Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6tawpo5Fm8", "anon": "no", "when": "2015-03-30T07:03:22Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6uuk6b68du319", "anon": "no", "when": "2015-03-30T07:05:27Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6un4iacNGX", "anon": "no", "when": "2015-03-30T07:07:37Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6utvrywozd2vd", "anon": "no", "when": "2015-03-30T07:08:30Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6ub3fzxa6a4ze", "anon": "no", "when": "2015-03-30T07:18:58Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6t7mzhbhwF", "anon": "no", "when": "2015-03-30T07:23:15Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i6vi7mt1I4G", "anon": "no", "when": "2015-03-30T07:28:42Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "i6ur9e69wzy61w", "anon": "no", "when": "2015-03-30T07:38:37Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "i7bg4v1keqE", "anon": "no", "when": "2015-03-30T08:10:50Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "i6ut6cjo5lj4aa", "anon": "no", "when": "2015-03-30T09:44:06Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i70lz5f0QKm", "anon": "no", "when": "2015-03-30T09:49:58Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "i71ev8heKQi", "anon": "no", "when": "2015-03-30T10:28:59Z", "type": "followup"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T14:54:02Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:01:11Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:04:43Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:28:38Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:33:49Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:36:14Z", "type": "feedback"}, {"to": "i7vi6kjwhef7ko", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:39:52Z", "type": "feedback"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-01T15:42:52Z", "data": "i7ywk8wqk1j4tp", "type": "update"}, {"to": "i7vi6kjwhef7ko", "uid": "i6vi7mt1I4G", "anon": "no", "when": "2015-04-02T03:55:30Z", "type": "feedback"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-16T02:43:12Z", "data": "i8jkbdjlkb86at", "type": "update"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-04-16T02:46:37Z", "data": "i8jkfr5qtnh24d", "type": "update"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec9-spoc(w4l2) Q2: 新的页替换算法实现", "created": "2015-04-16T02:46:37Z", "content": "<p>工作集页置换算法</p>\n<p>优胜者:</p>\n<p>覃伟 2012011278<br />徐天宇 2012011275<br />韩慧阳 2012011276<br />闵延泽 2012011291</p>\n<p></p>\n<p>扩展clock页面置换算法</p>\n<p>优胜者: &#xff1f;</p>\n<p></p>\n<p>缺页率页面置换算法</p>\n<p>优胜者: &#xff1f;</p>\n<p></p>\n<p></p>\n<p>可能他们的算法也有错误&#xff0c;请告诉我&#xff0c;这样你也会有加分的可能&#xff01;</p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec9-spoc(w4l2) Q2: 新的页替换算法实现", "created": "2015-04-16T02:43:12Z", "content": "<p>优胜者</p>\n<p>覃伟 2012011278<br />徐天宇 2012011275<br />韩慧阳 2012011276<br />闵延泽 2012011291</p>\n<p></p>\n<p>可能他们的算法也有错误&#xff0c;请告诉我。</p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec9-spoc Q2: 新的页替换算法实现", "created": "2015-04-01T15:42:52Z", "content": "<p>优胜者</p>\n<p>覃伟 2012011278<br />徐天宇 2012011275<br />韩慧阳 2012011276<br />闵延泽 2012011291</p>\n<p></p>\n<p>可能他们的算法也有错误&#xff0c;请告诉我。</p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec9-spoc Q2: 新的页替换算法实现", "created": "2015-03-30T06:37:01Z", "content": "<p></p>"}], "type": "note", "tags": ["exam", "instructor-note"], "tag_good": [], "unique_views": 150, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "计21战裕隆 2012011388 LRU c&#43;&#43;\n#include\n\nusing namespace std;\nint window_size=5;\nint my_time=0;\nint current[6];\nint last_visit[11];\n\nvoid show_result()\n{\n\tcout&lt;&lt;&#34;current page is :&#34;&lt;&gt;page;\n\t\tif(page==-1)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tbool found=false;\n\t\tfor(int i=1;i&lt;=5;i&#43;&#43;)\n\t\t{\n\t\t\tif(current[i]==page)\n\t\t\t{\n\t\t\t\tfound=true;\n\t\t\t}\n\t\t}\n\t\tif(found==true)\n\t\t{\n\t\t\tchange_visit(page);\n\t\t}\n\t\telse if(found==false)\n\t\t{\n\t\t\tchange_current(page);\n\t\t\tchange_visit(page);\n\t\t}\n\t\tshow_result();\n\t}\n\tsystem(&#34;pause&#34;);\n\treturn 0;\n}", "created": "2015-03-30T06:38:11Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6xgf2t8N7w", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>不能编译&#xff0c;实现不全。</p>", "created": "2015-04-01T14:54:02Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7yutg7i1sesc", "updated": "2015-04-01T14:54:02Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vi82q9hwm79l", "updated": "2015-03-30T06:38:11Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>裴中煜 2012010685</p>\n<p>李若愚 2012011353</p>\n<p>楼华哲 2012011327</p>\n<p>李日灵 2012011332</p>\n<p>周昊    2012011326</p>\n<p></p>\n<p>改进的clock算法</p>\n<p>代码</p>\n<pre>#!/usr/bin/env python\n# coding: utf-8\n\nclass Page():\n    \n    def __init__(self, index):\n        self.ref = 0     # reference\n        self.mod = 0     # modify\n        self.idx = index\n\n\ndef test_clock(memory_size=8, access_list=[]):\n\n    in_page = []\n    memory = {}\n    head = 0\n    pattern = [(0,0), (0,1), (1,0), (1,1)]\n    # modify pattern\n    change_pattern = {(0,0) : (0,0), (0,1) : (0,0), (1,0) : (0,0), (1,1) : (0,1)}\n    miss = 0\n\n    for i in range(memory_size):\n        in_page.append(Page(i))\n        memory[i] = i\n    \n    #Start resolve\n    for access in access_list:\n        print &#39;access :&#39; &#43; str(access)\n        if access[0] in memory.keys():\n            # page in memory\n            if access[1] == &#39;r&#39;:\n                in_page[memory[access[0]]].ref = 1\n            else:\n                in_page[memory[access[0]]].mod = 1\n        else:\n            # page not in memory\n            print &#39;page fault: head=%d&#39; % head\n            miss &#43;= 1\n            while True:\n                p = (in_page[head].ref, in_page[head].mod)\n                if p == (0,0):\n                    break\n                else:\n                    # give it a second chance\n                    p = (in_page[head].ref, in_page[head].mod)\n                    p = change_pattern[p]\n                    in_page[head].ref = p[0]\n                    in_page[head].mod = p[1]\n                head = (head &#43; 1) % memory_size\n\n            # swap the victim\n            idx = in_page[head].idx\n            memory.pop(idx)\n            print &#39;victim is %d&#39; % idx\n            memory[access[0]] = head\n            if access[1] == &#39;r&#39;:\n                in_page[head].ref = 1\n                in_page[head].mod = 0\n            else:\n                in_page[head].ref = 0\n                in_page[head].mod = 1\n    return miss\n\nif __name__ == &#39;__main__&#39;:\n    memory_size = 8\n    access_list = [(0,&#39;r&#39;), (1,&#39;r&#39;), (3, &#39;w&#39;), (10, &#39;w&#39;), (2, &#39;r&#39;), (5, &#39;w&#39;), (9, &#39;r&#39;), (0, &#39;w&#39;), (11, &#39;r&#39;)]\n    miss = test_clock(memory_size, access_list)\n    print &#39;miss=%d&#39; % miss\n\n</pre>\n<p></p>", "created": "2015-03-30T06:38:36Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6uji18l8j51ob", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>下面的代码有误&#xff0c;在write mem的时候&#xff0c;ref 和mod都要置&#xff11;</p>\n<pre>           if access[1] == &#39;r&#39;:\n                in_page[memory[access[0]]].ref = 1\n            else:\n                in_page[memory[access[0]]].mod = 1</pre>", "created": "2015-04-01T15:01:11Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7yv2ndqngr4nj", "updated": "2015-04-01T15:01:11Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>下面的代码也有误</p>\n<p>print &#39;victim is %d&#39; % idx<br /> memory[access[0]] = head<br /> if access[1] == &#39;r&#39;:<br /> in_page[head].ref = 1<br /> in_page[head].mod = 0<br /> else:<br /> in_page[head].ref = 1<br /> in_page[head].mod = 1</p>", "created": "2015-04-01T15:04:43Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7yv76g35b83rw", "updated": "2015-04-01T15:04:43Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vi8lpfn8u7go", "updated": "2015-03-30T06:38:36Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>覃伟 2012011278</p>\n<p>徐天宇 2012011275</p>\n<p>韩慧阳 2012011276</p>\n<p>闵延泽 2012011291</p>\n<p></p>\n<p>工作集页置换算法</p>\n<p></p>\n<p>代码为&#xff1a;</p>\n<p></p>\n<pre>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\nusing namespace std;\n\nchar read[10]={&#39;c&#39;, &#39;c&#39;, &#39;d&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;, &#39;c&#39;, &#39;e&#39;, &#39;a&#39;, &#39;d&#39;};\n\nbool work[10];\nbool oldwork[10];\nint worksize = 0;\n\nint window = 4;\n\nbool lack;\n\nint main()\n{\n\tfor(int i=0; i&lt;10; i&#43;&#43;)\n\t{\n\t\t//lack?\n\t\tlack = 0;\n\t\tint readpage = read[i]-&#39;a&#39;;\n\t\tif(work[readpage] == 0)\n\t\t\tlack = 1;\n\t\t\n\t\t//插入新页\n\t\t\n\t\t//update work &amp; oldwork:\t\n\t\tfor(int j=0; j&lt;10; j&#43;&#43;)\n\t\t{\n\t\t\toldwork[j] = work[j];\n\t\t\twork[j]= 0;\n\t\t}\n\t\twork[readpage] = 1;\n\t\tfor(int q=1; (q&lt;window) &amp;&amp; (i-q&gt;=0); q&#43;&#43;)\n\t\t\twork[read[i-q]-&#39;a&#39;] = 1;\n\t\t\t\n\t\t//进行页替换\n\t\tfor(int j=0; j&lt;10; j&#43;&#43;)\n\t\t\tif(oldwork[j] &amp;&amp; !work[j])\n\t\t\t\t;//剔除页\n\t\t\n\t\t//work size:\n\t\tworksize = 0;\n\t\tfor(int j=0; j&lt;10; j&#43;&#43;)\n\t\t\tif(work[j])\n\t\t\t\tworksize &#43;&#43;;\n\t\t\t\t\n\t\tcout &lt;&lt; i&#43;1 &lt;&lt; &#34;:\\tvisit &#34; &lt;&lt; read[i] &lt;&lt; &#34; \\tlack? &#34; &lt;&lt; lack &lt;&lt; &#34; \\tsize: &#34; &lt;&lt; worksize &lt;&lt; &#34; \\t&#34;;\n\t\tfor(int j=0; j&lt;10; j&#43;&#43;)\n\t\t\tif(work[j])\n\t\t\t\tcout &lt;&lt; (char)(j&#43;&#39;a&#39;) &lt;&lt; &#34; &#34;;\n\t\tcout &lt;&lt; endl;\n\t}\n\treturn 0;\n}</pre>\n<p></p>", "created": "2015-03-30T06:51:46Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i7bfq2txxyw689", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>貌似做对了。</p>", "created": "2015-04-01T15:28:38Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7yw1xv7ana4jo", "updated": "2015-04-01T15:28:38Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vipjvbsm35d8", "updated": "2015-03-30T06:51:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011303 李国豪</p>\n<p>2012080059 金嘉宇</p>\n<p></p>\n<p>缺页率替换算法</p>\n<p></p>\n<pre>WINDOW_SIZE = 2\n\ndef main():\n    sequence = [&#39;c&#39;, &#39;c&#39;, &#39;d&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;, &#39;c&#39;, &#39;e&#39;, &#39;a&#39;, &#39;d&#39;]\n    pages = set([&#39;a&#39;, &#39;d&#39;, &#39;e&#39;])\n    last_fault = -1\n    page_trace = set()\n    print &#39;initial ==&gt; &#39;,\n    print pages\n    for i in range(len(sequence)):\n        page = sequence[i]\n        print &#39;visit&#39;,\n        print page,\n        if page not in pages:\n            if last_fault &gt;= 0 and i - last_fault &gt; WINDOW_SIZE:\n                new_pages = set()\n                for each in pages:\n                    if each in page_trace:\n                        new_pages.add(each)\n                pages = new_pages\n            last_fault = i\n            page_trace = set()\n            pages.add(page)\n        page_trace.add(page)\n        print &#39;==&gt; &#39;,\n        print pages\n\n\nif __name__ == &#39;__main__&#39;:\n    main()</pre>\n<p></p>", "created": "2015-03-30T07:03:13Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6unpz8nUza", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>缺少对缺页中断的统计</p>", "created": "2015-04-01T15:33:49Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7yw8m61xxe7ex", "updated": "2015-04-01T15:33:49Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vj4a2tviu3hz", "updated": "2015-03-30T07:03:13Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>张梦豪 2012011401 改进的clock 页置换算法</p>\n<p>#include&lt;iostream&gt;<br />#include&lt;stdlib.h&gt;<br />#include&lt;ctime&gt;</p>\n<p>using namespace std;<br />#define M 2<br />int const A = 4;<br />int count = 0;<br />int Inside[A];<br />int const PageCount =10;<br />int Page[PageCount];<br />int insert = 0;<br />int suiji = 0;<br />int state[A];<br />int state2[A][M];<br />double lost = 0.0;</p>\n<p>//判断页面是否已经被修改<br />bool change(){<br /> if((rand()%2&#43;1) == 1 ){<br /> cout&lt;&lt;&#34;该页面被修改&#34;&lt;&lt;endl;<br /> return true;<br /> }<br /> else<br /> return false;<br />}</p>\n<p>//用于改进型clock置换算法&#xff0c;检测页号是否在内存中并把访问位和修改位置1<br />bool isInside2(int num){<br /> for(int i = 0; i &lt; A; i&#43;&#43;){<br /> if(Inside[i] == Page[num]){<br /> if(change()){<br /> state2[i][0] = 1;<br /> state2[i][1] = 1;<br /> }<br /> else{<br /> state2[i][0] = 1;<br /> }<br /> return true;<br /> }<br /> }<br /> return false;<br />}</p>\n<p>//用于改进型clock置换算法&#xff0c;判断内存中第几个需要被置换<br />int whichpage(){<br /> int j;</p>\n<p>for(j=0; j &lt; A;j&#43;&#43;){<br /> if(state2[j][0] == 0&amp;&amp;state2[j][1] == 0){<br /> return j;<br /> }<br /> }<br /> for(j=0; j &lt; A;j&#43;&#43; ){<br /> if(state2[j][0] == 0&amp;&amp;state2[j][1] == 1){<br /> return j;<br /> }<br /> state2[j][0] = 0 ;<br /> }<br /> for(j=0; j &lt; A;j&#43;&#43; ){<br /> state2[j][0] = 0 ;<br /> }<br /> return whichpage();<br />}</p>\n<p>//改进型clock置换算法<br />void LCLOCK(int num){<br /> int j;</p>\n<p>if(isInside2(num)){<br /> cout&lt;&lt;&#34;命中&#34;&lt;&lt;endl;<br /> for(int i=0 ; i &lt;A; i&#43;&#43;)<br /> cout&lt;&lt;Inside [i]&lt;&lt;&#34; &#34;;<br /> cout&lt;&lt;endl;<br /> }<br /> else<br /> if(count == A){<br /> lost&#43;&#43;;<br /> j =whichpage();<br /> Inside[j] = Page[num];<br /> state2[j][0] = 1;<br /> for(int i=0 ; i &lt;A; i&#43;&#43;)<br /> cout&lt;&lt;Inside [i]&lt;&lt;&#34; &#34;; <br /> cout&lt;&lt;endl; <br /> }</p>\n<p>else{<br /> Inside[count] = Page[num];<br /> count&#43;&#43;;<br /> for(int i=0 ; i &lt;A; i&#43;&#43;)<br /> cout&lt;&lt;Inside [i]&lt;&lt;&#34; &#34;;<br /> cout&lt;&lt;endl;<br /> }<br />}</p>\n<p>int main(){<br /> cout&lt;&lt;&#34;默认的页号访问顺序为&#34;&lt;&lt;endl;<br /> for(int i = 0; i &lt; PageCount; i&#43;&#43;){<br /> Page[i] =rand()%9 &#43; 1;<br /> cout&lt;&lt;Page[i]&lt;&lt;&#34; &#34;;<br /> }<br /> cout&lt;&lt;endl;<br /> <br /> lost = 0;<br /> count = 0;<br /> for(int m = 0; m &lt; A; m&#43;&#43;){<br /> for(int n = 0; n &lt; 2;n&#43;&#43;)<br /> state2[m][n] = 0;<br /> }<br /> for(int j = 0; j &lt; A; j&#43;&#43;){<br /> Inside[j] = 0;<br /> }<br /> for(int i = 0; i &lt; PageCount; i&#43;&#43;){<br /> cout&lt;&lt;&#34;读入Page[&#34;&lt;&lt;i&lt;&lt;&#34;]=&#34;&lt;&lt;Page[i]&lt;&lt;endl;<br /> LCLOCK(i);<br /> }<br /> cout&lt;&lt;&#34;\\n页面访问次数&#34;&lt;&lt;PageCount&lt;&lt;&#34;\\n缺页中断次数&#34;&lt;&lt;lost&lt;&lt;&#34;\\n缺页率&#34;&lt;&lt;lost/PageCount&lt;&lt;&#34;\\n&#34;&lt;&lt;endl;<br /> <br /> return 0;<br />}</p>\n<p></p>", "created": "2015-03-30T07:03:22Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6tawpo5Fm8", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>看不到对写的处理</p>", "created": "2015-04-01T15:36:14Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7ywbq7co6662m", "updated": "2015-04-01T15:36:14Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vj4gybcvr2zq", "updated": "2015-03-30T07:03:22Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>王轩2012011369</p>\n<p>石伟男2012011367</p>\n<p></p>\n<p>struct CacheNode {<br />    int key;<br />    int value;<br />    CacheNode(int k, int v) :key(k), value(v){}<br />};<br /><br />class LRUCache{<br />    <br />  public:<br />    LRUCache(int capacity) {<br />      this-&gt;capacity = capacity;<br />    }<br />    int get(int key) {<br />        if (cacheMap.find(key) == cacheMap.end()) return -1;<br />        cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]); <br />        cacheMap[key] = cacheList.begin();<br />        return cacheMap[key]-&gt;value;<br />    }<br />    void set(int key, int value) {<br />        if (cacheMap.find(key) == cacheMap.end()) {<br />        if (cacheList.size() == capacity) { <br />&#xfffc;           cacheMap.erase(cacheList.back().key);<br />            cacheList.pop_back();<br />        }<br />        cacheList.push_front(CacheNode(key, value)); <br />        cacheMap[key] = cacheList.begin();<br />        } else {<br />            cacheList.splice(cacheList.begin(), cacheList, cacheMap[key]); <br />            cacheMap[key] = cacheList.begin();<br />        }  <br />    }<br />  private:<br />      list&lt;CacheNode&gt; cacheList;<br />      unordered_map&lt;int, list&lt;CacheNode&gt;::iterator&gt; cacheMap;<br />      int capacity;<br />};<br /><br />class ClockCache {<br />      list&lt;CacheNode&gt; cacheList;<br />      int capacity;<br /><br />};</p>", "created": "2015-03-30T07:05:27Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6uuk6b68du319", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7vj752vpq43lm", "updated": "2015-03-30T07:05:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>计22 黄杰 2012011272</p>\n<p>计22 袁源 2012011294</p>\n<p>计24 杜鹃 2012011354</p>\n<p>计24 王妍 2012011352</p>\n<p></p>\n<p>改进的clock算法&#xff1a;</p>\n<p></p>\n<pre>mem = [1,2,3,4]\nbit0 = [0,0,0,0]\nbit_write= [0,0,0,0]\nask = [3,1,4,2,5,2,1,2,3,4]\nask_write = [0,1,0,1,0,0,1,0,0,0]\npointer = 0\nget = False\nmmax = 3\n\nfor i in ask:\n\tget = False\n\tfor j in range(0,mmax):\n\t\tif(mem[j]==ask[i]):\n\t\t\tprint &#34;the ref is in mem!&#34;\n\t\t\tget = True\n\t\t\tbreak \n\t\n\twhile get==False:\n\t\tif bit0[pointer]==0 and bit_write[pointer]==0:\n\t\t\tmem[pointer] = ask[i]\n\t\t\tbit_write[pointer] = ask_write[i]\n\t\t\tbit0[pointer] = 1\n\t\t\tget = True\n\t\t\tprint &#34;found ! the mem now is :&#34;\n\t\t\tprint mem\n\t\t\tprint &#34;the reference bit :&#34;\n\t\t\tprint bit0\n\t\t\tprint &#34;the write bit :&#34;\n\t\t\tprint bit_write\n\t\t\tpointer &#43;= 1\n\t\t\tif pointer==mmax :\n\t\t\t\tpointer = 0\n\t\t\tbreak\n\t\tif bit0[pointer]==1:\n\t\t\tbit0[pointer]=0\n\t\t\tpointer&#43;=1\n\t\t\tif pointer==mmax :\n\t\t\t\tpointer = 0\n\t\t\tbreak\n\t\tif bit_0[pointer]==0 and bit_write[pointer] ==1:\n\t\t\tbit_write[pointer]=0\n\t\t\tpointer &#43;= 1\n\t\t\tif pointer==mmax :\n\t\t\t\tpointer = 0\n\t\t\tbreak\n</pre>\n<p></p>", "created": "2015-03-30T07:07:37Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6un4iacNGX", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>package testjava;\n\nimport java.lang.String;\nimport java.util.ArrayList;\nimport java.util.HashSet;\n\nclass Pair {\n    String name;\n    int time;\n    boolean cited;\n    Pair(String name, int time) {\n        this.name = name;\n        this.time = time;\n        cited = false;\n    }\n}\n\nclass Replace {\n\n\tHashSet&lt;Pair&gt; set = null;\n    int time_cur, time_last;\n    int window_size;\n    \n    Replace(int W) {\n        set = new HashSet&lt;Pair&gt;();\n        window_size = W;\n    }\n\n    int now_time = 0;\n    \n    Pair add(String name) {\n    \ttime_cur &#43;&#43;;\n        // exist\n        for (Pair p : set) {\n            if (p.name.equals(name)) {\n                p.cited = true;\n                System.out.println(&#34;exist: &#34; &#43; p.name);\n                return p;\n            }\n        }\n        \n        // not\n        if (time_last!=0 &amp;&amp; time_cur - time_last &gt; window_size) {\n            ArrayList&lt;Pair&gt; list = new ArrayList&lt;Pair&gt;();\n        \tSystem.out.print(&#34;out: &#34;);\n            for (Pair p : set) {\n                if (! p.cited) {\n                \tSystem.out.print(&#34; &#34;&#43; p.name);\n                \tlist.add(p);\n                } else {\n                    p.cited = false;\n                }\n            }\n            System.out.println(&#34;\\n&#34;);\n            for (Pair p : list) {\n            \tset.remove(p);\n            }\n        }\n        Pair p = new Pair(name, time_cur);\n        System.out.println(&#34;add: &#34; &#43; p.name);\n        set.add(p);\n        time_last = time_cur;\n        return p;\n    }\n    \n    static public void main(String args[]) {\n    \n    \tReplace work = new Replace(2);\n    \twork.add(&#34;a&#34;);\n    \twork.add(&#34;e&#34;);\n    \twork.add(&#34;d&#34;);\n    \twork.add(&#34;c&#34;);\n    \twork.add(&#34;c&#34;);\n    \twork.add(&#34;d&#34;);\n    \twork.add(&#34;d&#34;);\n    \twork.add(&#34;b&#34;);\n    \twork.add(&#34;c&#34;);\n    \twork.add(&#34;e&#34;);\n    \twork.add(&#34;c&#34;);\n    \twork.add(&#34;e&#34;);\n    \twork.add(&#34;a&#34;);\n    \twork.add(&#34;d&#34;);\n    }\n}<br /><br />测试为课件所示例子<br />add: a\nadd: e\nadd: d\nadd: c\nexist: c\nexist: d\nexist: d\nout:  a e\nadd: b\nexist: c\nadd: e\nexist: c\nexist: e\nout:  d b\nadd: a\nadd: d</pre>\n<p></p>", "created": "2015-03-30T07:28:42Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "i6vi7mt1I4G", "children": [], "tag_good_arr": [], "id": "i7vk11d9uriyo", "updated": "2015-03-30T07:28:42Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>工作集置换算法&#xff1a;</p>\n<p><br />addrlist = [0,1,2,3,0,2,3,6,2,1,4,2,3,1,2]<br />t = 4<br /><br />window = []<br />workset = set([])<br /><br />print &#34;visit sequence :   &#34;<br />print addrlist<br />print &#34;window size :&#34;<br />print t<br />print &#34;Memory resident: &#34;<br />for i in addrlist:<br />    if i in workset:<br />        print &#34;HIT&#34;<br />    else:<br />        print &#34;MISS&#34;<br />    if ( len(window) &lt; t  ):<br />        window.append(i)<br />        workset.add(i)<br />        print workset<br /><br />    else:<br />        del window[0]<br />        window.append(i)<br />        workset = set([])<br />        for k in range(0, t):<br />            workset.add(window[k])<br />        print workset</p>\n<p></p>\n<p>测试结果&#xff1a;</p>\n<p>visit sequence :   <br />[0, 1, 2, 3, 0, 2, 3, 6, 2, 1, 4, 2, 3, 1, 2]<br />window size :<br />4<br />Memory resident: <br />MISS<br />set([0])<br />MISS<br />set([0, 1])<br />MISS<br />set([0, 1, 2])<br />MISS<br />set([0, 1, 2, 3])<br />HIT<br />set([0, 1, 2, 3])<br />HIT<br />set([0, 2, 3])<br />HIT<br />set([0, 2, 3])<br />MISS<br />set([0, 2, 3, 6])<br />HIT<br />set([2, 3, 6])<br />MISS<br />set([1, 2, 3, 6])<br />MISS<br />set([1, 2, 4, 6])<br />HIT<br />set([1, 2, 4])<br />MISS<br />set([1, 2, 3, 4])<br />HIT<br />set([1, 2, 3, 4])<br />HIT<br />set([1, 2, 3])<br /><br /></p>", "created": "2015-03-30T08:10:50Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "i7bg4v1keqE", "children": [], "tag_good_arr": [], "id": "i7vlj85pr9q210", "updated": "2015-03-30T08:10:50Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>貌似合理</p>", "created": "2015-04-01T15:39:52Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "i7ywgeecx6x7hc", "updated": "2015-04-01T15:39:52Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>所以是做了一个就算优胜嘛QAQ</p>", "created": "2015-04-02T03:55:30Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "i6vi7mt1I4G", "children": [], "tag_good_arr": [], "id": "i7zmqf9kr363x9", "updated": "2015-04-02T03:55:30Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vj9xttppk47c", "updated": "2015-03-30T07:07:37Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>陈天昱 李心田 杨皓 章浚源</p>\n<p></p>\n<p></p>\n<pre># LRU simulation in python\n\nclass Page:\n    index = int()\n    mod = int()\n\n    def __init__(self, index, mod):\n        self.index = index\n        self.mod = mod\n\nMAX_LEN = 5\n        \ndef visitPage(page_list, index):\n    found = False\n    for i in range(len(page_list)):\n        if(page_list[i].index == index):\n            found = True\n            for i in range(len(page_list)):\n                if page_list[i].index != index:\n                    page_list[i].mod &#43;= 1\n                else:\n                    page_list[i].mod = 0\n            break\n\n    if not found:\n        # get the index of the oldest page\n        m = -1\n        ind = -1\n        for i in range(len(page_list)):\n            if page_list[i].mod &gt; m:\n                m = page_list[i].mod\n                ind = i\n\n        if len(page_list) &gt;= MAX_LEN:\n            page_list.pop(ind)\n        page_list.append(Page(index, 0))\n        for i in range(len(page_list)):\n            if page_list[i].index != index:\n                page_list[i].mod &#43;= 1\n        \ndef showList(page_list):\n    for page in page_list:\n        print &#39;index: %d; \\t mod: %d &#39; %(page.index, page.mod)\n    print &#39;\\n&#39;\n\n                \ndef test():\n    page_list = list()\n    for i in range(1, 6):\n        visitPage(page_list, i)\n        showList(page_list)\n\n    visitPage(page_list, 3)\n    showList(page_list)\n    visitPage(page_list, 1)\n    showList(page_list)\n    visitPage(page_list, 6)\n    showList(page_list)\n\n\nif __name__ == &#39;__main__&#39;:\n    test()</pre>\n<p></p>", "created": "2015-03-30T07:08:30Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6utvrywozd2vd", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7vjb2mdhlu55r", "updated": "2015-03-30T07:08:30Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011486 张洵恺</p>\n<p>2012011487 徐梓哲</p>\n<p></p>\n<p>工作集算法</p>\n<p></p>\n<pre>inputs = list(raw_input())\nn = len(inputs)\nws = {}\nows = {}\nwindow = 4\n\nfor i in range(n):\n    e = inputs[i]\n    is_lack = False\n    if ws.get(e, 0) == 0:\n        is_lack = True\n    ows = ws\n    ws = {e : 1}\n    for q in range(min(window, i)):\n        ws[inputs[i - q]] = 1\n\n    </pre>\n<p>还没写完</p>", "created": "2015-03-30T07:18:58Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6ub3fzxa6a4ze", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7vjoin750xz", "updated": "2015-03-30T07:18:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>计21 周界 2012011394</p>\n<p>计21 张光耀 2012011403</p>\n<p></p>\n<p>工作集置换算法</p>\n<p></p>\n<pre>if __name__ == &#39;__main__&#39;:\n    address = raw_input()\n    addrList = address.strip(&#39;\\r\\n&#39;).split(&#39;,&#39;)\n\n    window = 4\n    time = 0\n    workSet = {}\n    for item in addrList:\n        n = int(item)\n        time &#43;= 1\n        print &#34;Access %d at time %d:&#34; % (n, time)\n        if n in workSet:\n            print &#34;hit&#34;\n            workSet[n] = time\n            for item in workSet.items():\n                if time - item[1] &gt;= window:\n                    workSet.pop(item[0])\n        else:\n            print &#34;miss&#34;\n            workSet[n] = time\n\n        print &#34;WorkSet Now:&#34;\n        for item in workSet.items():\n            print item[0]</pre>\n<p></p>", "created": "2015-03-30T07:23:15Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6t7mzhbhwF", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>计21 杨俊 2012011400</p>\n<p>计21 马晓斌 2012011402</p>\n<p>计21 战裕隆 2012011388</p>\n<p>计21 王振 2012011397</p>\n<p></p>\n<pre>LFU\n#include &lt;iostream&gt;\n#define SPACE 4\nusing namespace std;\nchar a[100]={&#34; &#34;};\nint number[100]={0}; \nint index=0;\nvoid show(){\n\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\tcout&lt;&lt;a[i]&lt;&lt;&#34; &#34;; \n\t}\n\tcout&lt;&lt;endl;\n\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\tcout&lt;&lt;number[i]&lt;&lt;&#34; &#34;; \n\t} \n\tcout&lt;&lt;endl;\n}\nint main(){\n\tint flag=1,num=0;\n\tchar f;\n\twhile(flag){\n\t\tcin&gt;&gt;f&gt;&gt;num;\n\t\tif(f!=&#39;a&#39; &amp;&amp; f!=&#39;b&#39; &amp;&amp; f!=&#39;c&#39; &amp;&amp; f!=&#39;d&#39; &amp;&amp; f!=&#39;e&#39;){\n\t\t\tcout&lt;&lt;&#34;wrong input&#34;&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(index&lt;SPACE){\n\t\t\tint flag1=0;\n\t\t\tfor(int i=0;i&lt;index;i&#43;&#43;){\n\t\t\t\tif(a[i]==f){\n\t\t\t\t\tnumber[i]&#43;=num;\n\t\t\t\t\tflag1=1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag1==1) continue;\n\t\t\ta[index]=f;\n\t\t\tnumber[index&#43;&#43;]=num;\n\t\t}else {\n\t\t\tint flag1=0;\n\t\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\tif(a[i]==f){\n\t\t\t\t\tflag1=1;\n\t\t\t\t\tnumber[i]&#43;=num;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag1==0){\n\t\t\t\tint flag2=0;\n\t\t\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\t\tif(number[i]&lt;number[flag2]){\n\t\t\t\t\t\tflag2=i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ta[flag2]=f;\n\t\t\t\tnumber[flag2]=num;\t\n\t\t\t}\n\t\t}\n\t\tshow();\n\t}\n\treturn 0;\n} \n-----------------------------------------------------------------------------------\nLRU\n#include &lt;iostream&gt;\n#define SPACE 4\nusing namespace std;\nchar a[100]={&#34; &#34;};\nint index=0;\nvoid show(){\n\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\tcout&lt;&lt;a[i]&lt;&lt;&#34; &#34;; \n\t}\n\tcout&lt;&lt;endl;\n}\nint main(){\n\tint flag=1;\n\tchar f;\n\twhile(flag){\n\t\tcin&gt;&gt;f;\n\t\tif(f!=&#39;a&#39; &amp;&amp; f!=&#39;b&#39; &amp;&amp; f!=&#39;c&#39; &amp;&amp; f!=&#39;d&#39; &amp;&amp; f!=&#39;e&#39;){\n\t\t\tcout&lt;&lt;&#34;wrong input&#34;&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t}\n\t\tif(index&lt;SPACE){\n\t\t\ta[index&#43;&#43;]=f;\n\t\t}else {\n\t\t\tint flag1=0;\n\t\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\tif(a[i]==f){\n\t\t\t\t\tflag1=1;\n\t\t\t\t\tfor(int j=i;j&lt;SPACE-1;j&#43;&#43;){\n\t\t\t\t\t\ta[j]=a[j&#43;1];\n\t\t\t\t\t}\n\t\t\t\t\ta[SPACE-1]=f;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag1==0){\n\t\t\t\tfor(int i=1;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\t\ta[i-1]=a[i];\n\t\t\t\t}\n\t\t\t\ta[SPACE-1]=f;\t\n\t\t\t}\n\t\t}\n\t\tshow();\n\t}\n\treturn 0;\n} \n-----------------------------------------------------------------------------------\nPFF\n#include &lt;iostream&gt;\n#define SPACE 4\n#define GAP 2\nusing namespace std;\nchar a[100]={&#39; &#39;};\nchar record[100]={&#39; &#39;};\nint number[100]={0}; \nint index=0;\nint last=-1;\nvoid show(){\n\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\tcout&lt;&lt;a[i]&lt;&lt;&#34; &#34;; \n\t}\n\tcout&lt;&lt;endl;\n}\nint main(){\n\tint flag=1;\n\tchar f;\n\twhile(flag){\n\t\tcin&gt;&gt;f;\n\t\trecord[index]=f;\n\t\tif(f!=&#39;a&#39; &amp;&amp; f!=&#39;b&#39; &amp;&amp; f!=&#39;c&#39; &amp;&amp; f!=&#39;d&#39; &amp;&amp; f!=&#39;e&#39;){\n\t\t\tcout&lt;&lt;&#34;wrong input&#34;&lt;&lt;endl;\n\t\t\tcontinue;\n\t\t}\n\t\tint flag1=0;\n\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\tif(f==a[i]){\n\t\t\t\tflag1=1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(flag1==0){\n\t\t\tif(index-last&lt;=2 ){\n\t\t\t\t\tint flag[SPACE]={0};\n\t\t\t\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\t\t\tfor(int j=last;j&lt;=index;j&#43;&#43;){\n\t\t\t\t\t\t\tif(a[i]==record[j]){\n\t\t\t\t\t\t\t\tflag[i]&#43;&#43;;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\t\t\tif(flag[i]==0){\n\t\t\t\t\t\t\ta[i]=&#39; &#39;;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tfor(int i=0;i&lt;SPACE;i&#43;&#43;){\n\t\t\t\t\tif(a[i]==&#39; &#39;){\n\t\t\t\t\t\ta[i]=f;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlast=index;\n\t\t}\n\t\tindex&#43;&#43;;\n\t\tshow();\n\t}\n\treturn 0;\n} \n-----------------------------------------------------------------------------------\n工作集\n\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n\nusing namespace std;\n\n\n#define SPACE 10\nint work[SPACE] = {0};\nint memo[SPACE] = {0};\n\nvoid printMemo()\n{\n    printf(&#34;memo: &#34;);\n    for (int i = 0; i &lt; SPACE; i&#43;&#43;) {\n        printf(&#34;%d &#34;,memo[i]);\n    }\n    printf(&#34;\\n&#34;);\n}\nvoid printWork()\n{\n    printf(&#34;work: &#34;);\n    for (int i = 0; i &lt; SPACE; i&#43;&#43;) {\n        printf(&#34;%d &#34;,work[i]);\n    }\n    printf(&#34;\\n&#34;);\n}\n\nint newPage(unsigned nPage)\n{\n    //鏇存柊宸ヤ綔闆?\n    for (int i = 0; i &lt; SPACE-1; i&#43;&#43;) {\n        work[i] = work[i&#43;1];\n    }\n    work[SPACE -1] = nPage;\n    \n    //鑻ュ凡鍦ㄥ唴瀛樹腑涓嶇敤鏇挎崲\n    for (int i = 0; i &lt; SPACE; i&#43;&#43;)\n        if (memo[i] == nPage) {\n            return i;//杩斿洖鍐呭瓨鍦板潃\n        }\n    \n    //鏌ユ壘鏇挎崲\n    int out = 0;\n    int match = 0;\n    for (int i = 0; i &lt; SPACE; i&#43;&#43;) {//鏌ユ壘绗竴涓笉鍦ㄥ伐浣滈泦涓殑鍐呭瓨椤?\n        match = 0;\n        for (int j = 0; j &lt; SPACE; j&#43;&#43;) {\n            if (memo[i] == work[j]) {\n                match = 1;\n            }\n        }\n        if (! match) {\n            memo[i] = nPage;\n            return out;//杩斿洖鍐呭瓨鍦板潃\n        }\n    }\n    return -1;\n}\n\nint main(int argc, const char * argv[]) {\n    for (int i = 0; i &lt; 10; i&#43;&#43;) {//鍒濆鍖栧唴瀛樹腑娌℃湁浠讳綍椤?鍗抽〉鍙烽兘涓鸿礋鏁?\n        memo[i] = -i-1;\n    }\n    for (int i = 0; i &lt; 10; i&#43;&#43;) {//椤哄簭璁块棶0-9鍙烽〉\n        newPage(i);\n    }\n    printMemo();\n    printf(&#34;visit 10 11 --------------------\\n&#34;);\n    newPage(10);//璁块棶10鍙烽〉\n    newPage(11);\n    printMemo();//鏌ョ湅鍐呭瓨涓〉鍙?\n    printf(&#34;visit 2 --------------------\\n&#34;);\n    newPage(2);\n    printWork();//鏌ョ湅宸ヤ綔闆?\n    printMemo();\n    printf(&#34;visit 2 2 --------------------\\n&#34;);\n    newPage(2);\n    newPage(2);\n    printWork();\n    printMemo();\n    printf(&#34;visit 1 --------------------\\n&#34;);\n    newPage(1);\n    printWork();\n    printMemo();\n    \n}</pre>\n<p></p>", "created": "2015-03-30T07:38:37Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "feedback", "tag_good": [], "uid": "i6ur9e69wzy61w", "children": [], "tag_good_arr": [], "id": "i7vkdt08j7g4u7", "updated": "2015-03-30T07:38:37Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7vju16lr4urx", "updated": "2015-03-30T07:23:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>韦福超 2012011392</p>\n<p>LRU算法实现</p>\n<p>代码&#xff08;LRU.cpp):</p>\n<pre><code>  #include &lt;stdio.h&gt;\n\n  #define N 5\n\n  struct Page{\n      int val;\n      Page* prev;\n      Page* next;\n      Page(int v=-1 ,Page* p=NULL, Page* n=NULL)\n          :val(v),prev(p),next(n){}\n  };\n\n  Page* p_header;\n  Page* p_tail;\n  int size = 0;\n\n  Page* insert(Page* ptr, int val)\n  {\n       return ptr-&gt;prev =ptr-&gt;prev-&gt;next = new Page(val,ptr-&gt;prev,ptr);\n  }\n\n  Page* erase(Page* ptr)\n  {\n      ptr-&gt;prev-&gt;next = ptr-&gt;next;\n      ptr-&gt;next-&gt;prev = ptr-&gt;prev;\n      Page* n = ptr-&gt;next;\n      delete ptr;\n      return n;\n  }\n\n  void swap(Page* p1,Page* p2)\n  {\n      int val = p1-&gt;val;\n      p1-&gt;val=p2-&gt;val;\n      p2-&gt;val=val;\n  }\n\n  void LRU(int val)\n  {\n      Page* ptr;\n      for(ptr = p_header-&gt;next;ptr!=p_tail;ptr=ptr-&gt;next)\n          if(ptr-&gt;val == val)\n              break;\n      if(ptr != p_tail)\n      {\n          for(Page* p=ptr;p!=p_tail-&gt;prev;p=p-&gt;next)        \n              swap(p,p-&gt;next);\n      }\n      else\n      {\n          if(size!=N)\n          {\n              insert(p_tail,val);\n              size&#43;&#43;;\n          }\n          else\n          {\n             erase(p_header-&gt;next);\n             insert(p_tail,val);\n          }\n      }\n  }\n\n  void printList()\n  {\n      for(Page* p=p_header-&gt;next ;p!=p_tail; p=p-&gt;next)\n          printf(&#34;%d &#34;,p-&gt;val);\n      printf(&#34;\\n&#34;);\n  }\n\n  int main()\n  {\n      p_header = new Page;\n      p_tail = new Page;\n      p_header-&gt;next=p_tail;\n      p_tail-&gt;prev=p_header;   \n      size=0;\n      int d;\n      while(true)\n      {\n          scanf(&#34;%d&#34;,&amp;d);\n          if(d==-1)\n              return 0;\n          LRU(d);\n          printList();\n      }\n      return 0;\n  }\n</code></pre>\n<p>测试结果&#xff08;这里用的是整型数&#xff0c;不是课件里的字母&#xff09;&#xff1a;</p>\n<pre><code>  1\n  1 \n  2\n  1 2 \n  3\n  1 2 3 \n  4\n  1 2 3 4 \n  5\n  1 2 3 4 5 \n  6\n  2 3 4 5 6 \n  3\n  2 4 5 6 3 \n  5\n  2 4 6 3 5 \n  2\n  4 6 3 5 2 \n  9\n  6 3 5 2 9 \n  3\n  6 5 2 9 3 \n  4\n  5 2 9 3 4 \n  1\n  2 9 3 4 1 \n  2\n  9 3 4 1 2 \n  1\n  9 3 4 2 1 </code></pre>", "created": "2015-03-30T09:44:06Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i6ut6cjo5lj4aa", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7vov6b414z3lr", "updated": "2015-03-30T09:44:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011307 黄必胜</p>\n<p>缺页率缺失算法实现&#xff1a;</p>\n<pre># MRA: Missing Replacement Algorithm\nimport random\n\naddresses = []\nn_addr = 100000\nmax_addr = 15\npageframesize = 5\n\n# Generate Addresses\nfor i in range(0, n_addr):\n    addresses.append(random.randint(0,max_addr))\n\nmemory = [] # addresses in memory \nref = []    # reference record\nhits = 0\nmiss = 0\n\nT = 3\ninterval = 0\nfor addr in addresses:\n    try:\n        idx = memory.index(addr)\n        \n        hits &#43;= 1\n        interval &#43;= 1\n        ref[idx] = 1\n    except:\n        idx = -1\n        miss = miss &#43; 1\n        if interval &gt; T:  # too rare, clear non-using pages\n            for i in range(len(memory) - 1, -1, -1):\n                if not ref[i]:\n                    del ref[i]\n                    del memory[i]\n        if len(memory) &gt;= pageframesize:# must replace one\n            del ref[0]\n            del memory[0]\n        \n        memory.append(addr)\n        ref.append(0)\n        interval = 0\n        for r in ref:\n            r = 0\n    #print addr, &#39;\\t&#39;, memory\nprint &#39;Hit Rate: &#39;, float(hits) / n_addr</pre>\n<p></p>", "created": "2015-03-30T09:49:58Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i70lz5f0QKm", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7vp2plrquf54t", "updated": "2015-03-30T09:49:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>计22班 应杰夫 2012011293</p>\n<p>改进clock置换法</p>\n<p></p>\n<pre>#include&lt;iostream&gt;\n#include&lt;stdlib.h&gt;\n\nusing namespace std;\n#define M 2\nint const A = 4;//Pages\nint count = 0;\nint Inside[A];\nint const PageCount   =10;//Total page\nint Page[PageCount];\nint state[A];//clock state\nint state2[A][M];// A:pos M:revise\ndouble lost = 0.0;\n\nbool isInside(int num){\n\tfor(int i = 0; i &lt; A; i&#43;&#43;){\n\t\tif(Inside[i] == Page[num]){\n\t\t\tstate[i] = 1;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nbool change(){\n\tif((rand()%2&#43;1) == 1 ){\n\t\tcout&lt;&lt;&#34;Changed&#34;&lt;&lt;endl;\n\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\n\nbool isInside2(int num){\n\tfor(int i = 0; i &lt; A; i&#43;&#43;){\n\t\tif(Inside[i] == Page[num]){\n\t\t\tif(change()){\n\t\t\t\tstate2[i][0] = 1;\n\t\t\t\tstate2[i][1] = 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstate2[i][0] = 1;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint whichpage(){\n\tint j;\n\n\tfor(j=0; j &lt; A;j&#43;&#43;){\n        if(state2[j][0] == 0&amp;&amp;state2[j][1] == 0){\n\t\t\treturn j;\n\t\t}\n\t}\n\tfor(j=0; j &lt; A;j&#43;&#43; ){\n        if(state2[j][0] == 0&amp;&amp;state2[j][1] == 1){\n\t\t\treturn j;\n\t\t}\n\t\tstate2[j][0] = 0 ;\n\t}\n\tfor(j=0; j &lt; A;j&#43;&#43; ){\n\t\tstate2[j][0] = 0 ;\n\t}\n\treturn whichpage();\n}\n\nvoid LCLOCK(int num){\n\tint j;\n\n\tif(isInside2(num)){\n\t\tcout&lt;&lt;&#34;Hit&#34;&lt;&lt;endl;\n\t\tfor(int i=0 ; i &lt;A; i&#43;&#43;)\n\t\t\t\n        cout&lt;&lt;&#34;Block&#34;&lt;&lt;i&lt;&lt;&#34;#content:&#34;&lt;&lt;Inside [i]&lt;&lt;endl;\n\t}\n\telse\n\t\tif(count == A){\n\t\t\tlost&#43;&#43;;\n\t\t\tj =whichpage();\n\t\t\tInside[j] = Page[num];\n\t\t\tstate2[j][0] = 1;\n\t\t\tfor(int i=0 ; i &lt;A; i&#43;&#43;)\n\t\t\t\n           cout&lt;&lt;&#34;Block&#34;&lt;&lt;i&lt;&lt;&#34;#content:&#34;&lt;&lt;Inside [i]&lt;&lt;endl;\n\t\t\t\n\t\t}\n\n\t\telse{\n\t\t\tInside[count] = Page[num];\n\t\t\tcount&#43;&#43;;\n\t\t\tfor(int i=0 ; i &lt;A; i&#43;&#43;)\n\t\t\tcout&lt;&lt;&#34;Block&#34;&lt;&lt;i&lt;&lt;&#34;#content:&#34;&lt;&lt;Inside [i]&lt;&lt;endl;\n\t\t}\n}\n\nint main()\n{\n  char ch ;\n  for(int i = 0; i &lt; PageCount; i&#43;&#43;){\n\t    Page[i] =rand()%9 &#43; 1;\n\t\tcout&lt;&lt;Page[i]&lt;&lt;&#34; &#34;;\n\t}\n  cout&lt;&lt;endl;\n\n  lost = 0;\n  count = 0;\n  for(int m = 0; m &lt; A; m&#43;&#43;)\n  {\n  \tfor(int n = 0; n &lt; 2;n&#43;&#43;)\n\tstate2[m][n] = 0;\n  }\n  for(int j = 0; j &lt; A; j&#43;&#43;)\n  \tInside[j] = 0;\n\t\n  for(int i = 0; i &lt; PageCount; i&#43;&#43;)\n  {\n    cout&lt;&lt;&#34;read Page[&#34;&lt;&lt;i&lt;&lt;&#34;]=&#34;&lt;&lt;Page[i]&lt;&lt;endl;\n    LCLOCK(i);\n  }\n  cout&lt;&lt;&#34;\\nTimes&#34;&lt;&lt;PageCount&lt;&lt;&#34;\\nBreak times&#34;&lt;&lt;lost&lt;&lt;&#34;\\nPercentage&#34;&lt;&lt;lost/(PageCount)&lt;&lt;&#34;\\n&#34;&lt;&lt;endl;\n  \n  return 0;\n}</pre>\n<p></p>", "created": "2015-03-30T10:28:59Z", "bucket_order": 269, "bucket_name": "Week 3/29 - 4/4", "type": "followup", "tag_good": [], "uid": "i71ev8heKQi", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i7vqgw4zlh759j", "updated": "2015-03-30T10:28:59Z", "config": {}}], "tag_good_arr": [], "id": "i7vi6kjwhef7ko", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 19, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167473121, "default_anonymity": "no"}, "error": null, "aid": "kyuzhko144b2oi"}