{"result": {"folders": ["lecture15", "课堂问答"], "nr": 810, "data": {"embed_links": []}, "created": "2016-04-18T05:33:48Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-04-18T05:33:48Z", "data": "in5kg8wilbs3ru", "type": "create"}, {"uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-04-18T05:35:15Z", "data": "in5ki461qty67b", "type": "update"}, {"to": "in5kg8wgluf3rt", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-18T07:48:56Z", "type": "followup"}, {"to": "in5kg8wgluf3rt", "uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-04-18T09:59:48Z", "type": "feedback"}, {"to": "in5kg8wgluf3rt", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-20T05:08:57Z", "type": "feedback"}, {"uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-05-21T09:10:55Z", "data": "iogxqksfjmx5ar", "type": "update"}, {"to": "in5kg8wgluf3rt", "uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-05-21T09:29:06Z", "type": "feedback"}, {"to": "in5kg8wgluf3rt", "uid": "i0d7xnweuzw2k2", "anon": "no", "when": "2016-05-24T02:12:35Z", "type": "feedback"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0c9nvk0xzc2n3", "subject": "优先级继承 和 优先级天花板 算法的解释", "created": "2016-05-21T09:10:55Z", "content": "<p>参考&#xff1a;</p>\n<p> <a href=\"http://www.csie.ntu.edu.tw/~r95093/papers/Priority%20Inheritance%20Protocols%20An%20Approach%20to%20Real-Time%20Synchronization.pdf\">&#34;Priority Inheritance Protocols: An Approach to Real-Time Synchronization&#34;</a></p>\n<p><a href=\"http://www.embedded.com/design/configurable-systems/4024970/How-to-use-priority-inheritance\" target=\"_blank\"> &#34;how to use priority inheritance&#34;</a></p>\n<p></p>\n<p>首先让我来定义一下几个概念&#xff08;自己乱定的&#xff09;&#xff1a;</p>\n<p></p>\n<p>资源S&#xff1a;一个抽象概念&#xff0c;任何时候下&#xff0c;一个资源最多属于一个进程。若资源不属于任何继承&#xff0c;则称该资源为自由的。进程只会主动释放资源。&#xff08;其实就是锁&#xff09;</p>\n<p></p>\n<p>进程 J 申请资源S&#xff1a;进程 J 申请获得资源S。</p>\n<p></p>\n<p>进程 J 被进程 J‘  阻塞&#xff1a;进程 J 需要获得某资源S后&#xff0c;才能继续执行&#xff0c;但是现在资源S属于进程J’&#xff0c;所以进程J进入等待状态。</p>\n<p></p>\n<p>所运行的系统是一个基于优先级的单处理机抢占系统。</p>\n<p></p>\n<p>优先级继承&#xff1a;</p>\n<p>    </p>\n<p>     当进程A 被进程B 阻塞&#xff0c;且进程A的优先级比较高时&#xff0c;把进程 B 的优先级提升到与A一样的优先级。</p>\n<p></p>\n<p>优先级天花板&#xff1a;</p>\n<p></p>\n<p>     这个算法有两种&#xff0c;分别是<b>Original Ceiling Priority Protocol</b> (OCPP) and <b>Immediate Ceiling Priority Protocol</b> (ICPP)。向勇老师上课说的天花板算法&#xff0c;应该是OCPP。</p>\n<p>     </p>\n<p>     定义每一个资源S的天花板优先级&#xff1a;可能申请获得该资源的所有进程中&#xff0c;优先级最大的进程的优先级。</p>\n<p></p>\n<p>     ICPP&#xff1a;</p>\n<p>             当一个进程获得某资源后&#xff0c;优先级上升成该资源的天花板优先级。</p>\n<p></p>\n<p>     OCPP&#xff1a;</p>\n<p>             当进程A 因为资源S&#xff0c;把进程B 阻塞时&#xff0c;进程A的优先级上升成资源S的天花板优先级。</p>\n<p></p>\n<p>             并且一个进程A在申请获得某资源时&#xff0c;必须满足自身优先级高于所有的、不是自由的资源的天花板优先级&#xff0c;若不满足&#xff0c;即存在某资源S被另一进程B占有&#xff0c;且该资源S的天花板优先级高于进程A的优先级&#xff0c;则把进程B的优先级升到进程A的优先级&#xff0c;并且执行进程B&#xff0c;进程A进入等待&#xff0c;没有申请到资源S。</p>\n<p></p>\n<p>             至于资源S的天花板优先级怎么知道&#xff0c;即如何知道哪些进程有可能会使用这个资源&#xff0c;直接看看每个进程的代码就知道啦啦啦~&#xff08;需要静态分析&#xff0c;听起来就工作量很大&#xff09;</p>\n<p></p>\n<p>瞎比比了这么多&#xff0c;让我们来脑补一下这些算法的优缺点。</p>\n<p></p>\n<p>优先级继承&#xff1a;额外开销适不多&#xff0c;有死锁。</p>\n<p></p>\n<p>ICPP&#xff1a;额外开销应该最多&#xff0c;没有死锁。</p>\n<p></p>\n<p>OCPP: 额外开销比ICPP少&#xff0c;也没有死锁。</p>\n<p></p>\n<p>至于响应时间、等待时间&#xff0c;分析起来比较麻烦&#xff0c;还要分平均情况&#xff0c;最坏情况&#xff0c;我不写了。</p>\n<p>     </p>\n<p>至于死锁&#xff0c;老师上课没说&#xff0c;那我也不整理了&#xff0c;大家YY一下吧&#xff0c;OCPP后面那一坨就是为了没有死锁。</p>\n<p></p>\n<p>对了&#xff0c;临界区就是critical section [会心一笑]。</p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "i0c9nvk0xzc2n3", "subject": "优先级继承 和 优先级天花板 算法的解释", "created": "2016-04-18T05:35:15Z", "content": "<p>参考&#xff1a;</p>\n<p> <a href=\"http://www.csie.ntu.edu.tw/~r95093/papers/Priority%20Inheritance%20Protocols%20An%20Approach%20to%20Real-Time%20Synchronization.pdf\">&#34;Priority Inheritance Protocols: An Approach to Real-Time Synchronization&#34;</a></p>\n<p><a href=\"http://www.embedded.com/design/configurable-systems/4024970/How-to-use-priority-inheritance\" target=\"_blank\"> &#34;how to use priority inheritance&#34;</a></p>\n<p></p>\n<p>首先让我来定义一下几个概念&#xff08;自己乱定的&#xff09;&#xff1a;</p>\n<p></p>\n<p>资源S&#xff1a;一个抽象概念&#xff0c;任何时候下&#xff0c;一个资源最多属于一个进程。若资源不属于任何继承&#xff0c;则称该资源为自由的。进程只会主动释放资源。&#xff08;其实就是锁&#xff09;</p>\n<p></p>\n<p>进程 J 申请资源S&#xff1a;进程 J 申请获得资源S。</p>\n<p></p>\n<p>进程 J 被进程 J‘  阻塞&#xff1a;进程 J 需要获得某资源S后&#xff0c;才能继续执行&#xff0c;但是现在资源S属于进程J’&#xff0c;所以进程J进入等待状态。</p>\n<p></p>\n<p>所运行的系统是一个基于优先级的单处理机抢占系统。</p>\n<p></p>\n<p>优先级继承&#xff1a;</p>\n<p>    </p>\n<p>     当进程A 把进程B 阻塞&#xff0c;且进程A的优先级比较高时&#xff0c;把进程 B 的优先级提升到与A一样的优先级。</p>\n<p></p>\n<p>优先级天花板&#xff1a;</p>\n<p></p>\n<p>     这个算法有两种&#xff0c;分别是<b>Original Ceiling Priority Protocol</b> (OCPP) and <b>Immediate Ceiling Priority Protocol</b> (ICPP)。向勇老师上课说的天花板算法&#xff0c;应该是OCPP。</p>\n<p>     </p>\n<p>     定义每一个资源S的天花板优先级&#xff1a;可能申请获得该资源的所有进程中&#xff0c;优先级最大的进程的优先级。</p>\n<p></p>\n<p>     ICPP&#xff1a;</p>\n<p>             当一个进程获得某资源后&#xff0c;优先级上升成该资源的天花板优先级。</p>\n<p></p>\n<p>     OCPP&#xff1a;</p>\n<p>             当进程A 因为资源S&#xff0c;把进程B 阻塞时&#xff0c;进程A的优先级上升成资源S的天花板优先级。</p>\n<p></p>\n<p>             并且一个进程A在申请获得某资源时&#xff0c;必须满足自身优先级高于所有的、不是自由的资源的天花板优先级&#xff0c;若不满足&#xff0c;即存在某资源S被另一进程B占有&#xff0c;且该资源S的天花板优先级高于进程A的优先级&#xff0c;则把进程B的优先级升到进程A的优先级&#xff0c;并且执行进程B&#xff0c;进程A进入等待&#xff0c;没有申请到资源S。</p>\n<p></p>\n<p>             至于资源S的天花板优先级怎么知道&#xff0c;即如何知道哪些进程有可能会使用这个资源&#xff0c;直接看看每个进程的代码就知道啦啦啦~&#xff08;需要静态分析&#xff0c;听起来就工作量很大&#xff09;</p>\n<p></p>\n<p>瞎比比了这么多&#xff0c;让我们来脑补一下这些算法的优缺点。</p>\n<p></p>\n<p>优先级继承&#xff1a;额外开销适不多&#xff0c;有死锁。</p>\n<p></p>\n<p>ICPP&#xff1a;额外开销应该最多&#xff0c;没有死锁。</p>\n<p></p>\n<p>OCPP: 额外开销比ICPP少&#xff0c;也没有死锁。</p>\n<p></p>\n<p>至于响应时间、等待时间&#xff0c;分析起来比较麻烦&#xff0c;还要分平均情况&#xff0c;最坏情况&#xff0c;我不写了。</p>\n<p>     </p>\n<p>至于死锁&#xff0c;老师上课没说&#xff0c;那我也不整理了&#xff0c;大家YY一下吧&#xff0c;OCPP后面那一坨就是为了没有死锁。</p>\n<p></p>\n<p>对了&#xff0c;临界区就是critical section [会心一笑]。</p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "i0c9nvk0xzc2n3", "subject": "优先级继承 和 优先级天花板 算法的解释", "created": "2016-04-18T05:33:48Z", "content": "<p>参考&#xff1a;</p>\n<p> <a href=\"http://www.csie.ntu.edu.tw/~r95093/papers/Priority%20Inheritance%20Protocols%20An%20Approach%20to%20Real-Time%20Synchronization.pdf\">&#34;Priority Inheritance Protocols: An Approach to Real-Time Synchronization&#34;</a></p>\n<p><a href=\"http://www.embedded.com/design/configurable-systems/4024970/How-to-use-priority-inheritance\" target=\"_blank\"> &#34;how to use priority inheritance&#34;</a></p>\n<p></p>\n<p>首先让我来定义一下几个概念&#xff08;自己乱定的&#xff09;&#xff1a;</p>\n<p></p>\n<p>资源S&#xff1a;一个抽象概念&#xff0c;任何时候下&#xff0c;一个资源最多属于一个进程。若资源不属于任何继承&#xff0c;则称该资源为自由的。进程只会主动释放资源。&#xff08;其实就是锁&#xff09;</p>\n<p></p>\n<p>进程 J 申请资源S&#xff1a;进程 J 申请获得资源S。</p>\n<p></p>\n<p>进程 J 被进程 J‘  阻塞&#xff1a;进程 J 需要获得某资源S后&#xff0c;才能继续执行&#xff0c;但是现在资源S属于进程J’&#xff0c;所以进程J进入等待状态。</p>\n<p></p>\n<p>所运行的系统是一个基于优先级的单处理机抢占系统。</p>\n<p></p>\n<p>优先级继承&#xff1a;</p>\n<p>    </p>\n<p>     当进程A 把进程B 阻塞&#xff0c;且进程A的优先级比较高时&#xff0c;把进程 B 的优先级提升到与A一样的优先级。</p>\n<p></p>\n<p>优先级天花板&#xff1a;</p>\n<p></p>\n<p>     这个算法有两种&#xff0c;分别是<b>Original Ceiling Priority Protocol</b> (OCPP) and <b>Immediate Ceiling Priority Protocol</b> (ICPP)。向勇老师上课说的天花板算法&#xff0c;应该是OCPP。</p>\n<p>     </p>\n<p>     定义每一个资源S的天花板优先级&#xff1a;可能申请获得该资源的所有进程中&#xff0c;优先级最大的进程的优先级。</p>\n<p></p>\n<p>     ICPP&#xff1a;</p>\n<p>             当一个进程获得某资源后&#xff0c;优先级上升成该资源的天花板优先级。</p>\n<p></p>\n<p>     OCPP&#xff1a;</p>\n<p>             当进程A 因为资源S&#xff0c;把进程B 阻塞时&#xff0c;进程A的优先级上升成资源S的天花板优先级。</p>\n<p></p>\n<p>             并且一个进程A在申请获得某资源时&#xff0c;必须满足自身优先级高于所有的、不是自由的资源的天花板优先级&#xff0c;若不满足&#xff0c;即存在某资源S被另一进程B占有&#xff0c;且该资源S的天花板优先级高于进程A的优先级&#xff0c;则把进程B的优先级升到进程A的优先级&#xff0c;并且执行进程B&#xff0c;进程A进入等待&#xff0c;没有申请到资源S。</p>\n<p></p>\n<p>             至于资源S的天花板优先级怎么知道&#xff0c;即如何知道哪些进程有可能会使用这个资源&#xff0c;直接看看每个进程的代码就知道啦啦啦~&#xff08;需要静态分析&#xff0c;听起来就工作量很大&#xff09;</p>\n<p></p>\n<p>瞎比比了这么多&#xff0c;让我们来脑补一下这些算法的优缺点。</p>\n<p></p>\n<p>优先级继承&#xff1a;额外开销适不多&#xff0c;有死锁。</p>\n<p></p>\n<p>ICPP&#xff1a;额外开销应该最多&#xff0c;没有死锁。</p>\n<p></p>\n<p>OCPP: 额外开销比ICPP少&#xff0c;也没有死锁。</p>\n<p></p>\n<p>至于响应时间、等待时间&#xff0c;分析起来比较麻烦&#xff0c;还要分平均情况&#xff0c;最坏情况&#xff0c;我不写了。</p>\n<p>     </p>\n<p>至于死锁&#xff0c;老师上课没说&#xff0c;那我也不整理了&#xff0c;大家YY一下吧&#xff0c;OCPP后面那一坨就是为了没有死锁。</p>\n<p></p>\n<p>对了&#xff0c;临界区就是critical section [会心一笑]。</p>\n<p></p>\n<p></p>"}], "type": "note", "tags": ["lecture15", "student", "unanswered", "课堂问答"], "tag_good": [{"role": "", "name": "suanrong", "endorser": {}, "admin": false, "photo": "1416753618_35.png", "id": "i0c9nvk0xzc2n3", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/i0c9nvk0xzc2n3/1416753618_35.png", "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "叶子鹏", "endorser": {}, "admin": false, "photo": null, "id": "i0f24oie8102cr", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 145, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>虽然还是不懂&#xff0c;但是赞一个&#xff0c;求举例</p>", "created": "2016-04-18T07:48:56Z", "bucket_order": 209, "bucket_name": "Week 4/17 - 4/23", "type": "followup", "tag_good": [], "uid": "i0f24oie8102cr", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>自己看论文去</p>", "created": "2016-04-18T09:59:48Z", "bucket_order": 209, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0c9nvk0xzc2n3", "children": [], "tag_good_arr": [], "id": "in5tybt1z504in", "updated": "2016-04-18T09:59:48Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我觉得你对优先级继承的描述不清楚不准确</p>\n<pre>优先级继承&#xff1a;\n    \n     当进程A 把进程B 阻塞&#xff0c;且进程A的优先级比较高时&#xff0c;把进程 B 的优先级提升到与A一样的优先级。</pre>\n<p>第一&#xff0c;这里不涉及第三个进程么&#xff1f;第二&#xff0c;阻塞具体指的是什么时候&#xff1f;</p>\n<p></p>\n<p>你对天花板协议的描述也不清楚&#xff0c;我觉得你既然接了这个任务&#xff0c;还是把它说清楚吧&#xff0c;你让别人自己看论文的话&#xff0c;你的工作还有什么意义&#xff1f;</p>", "created": "2016-04-20T05:08:57Z", "bucket_order": 209, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0f24oie8102cr", "children": [], "tag_good_arr": [], "id": "in8efzkd1qr2lj", "updated": "2016-04-20T05:08:57Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>抱歉&#xff0c;现在才看到这个回复&#xff0c;优先级继承好像写错了&#xff0c;“把”字改成“被”字。然后回答一下你的两个问题</p>\n<p>第一&#xff0c;不涉及到第3个进程&#xff0c;因为这种机制是用来防止优先级反置的&#xff0c;不管存不存在第3个进程&#xff0c;都需要这么做。如果每次都要判断第3个进程存不存在的话&#xff0c;开销太大&#xff0c;而且不一定可行。</p>\n<p>第二&#xff0c;这里的阻塞仅仅是理论意义上的&#xff0c;即发生了这样一件事。到底是在申请资源失败算阻塞&#xff0c;还是因为申请失败而进入等待队列的时候算阻塞&#xff0c;这些都是工程实践的事&#xff0c;不同系统可能有不同的实现方式&#xff0c;这里没必要讨论。</p>\n<p>最后&#xff0c;为什么我不举例、不说得更深呢&#xff1f;我认为我说的已经满足了操作系统课的要求&#xff0c;如果要继续说&#xff0c;那说到什么地步才算说清楚了呢&#xff1f;如果你对这方面很有兴趣&#xff0c;可以自己去看&#xff0c;不见得要看我总结的。我的任务是把上课没搞清楚的问题说明白。而在你自己总结的那篇里&#xff0c;你似乎已经忘记我们当时纠结的点了。</p>", "created": "2016-05-21T09:29:06Z", "bucket_order": 205, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0c9nvk0xzc2n3", "children": [], "tag_good_arr": [], "id": "iogydymr8cw3am", "updated": "2016-05-21T09:29:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我觉得答得很好啊。。。</p>", "created": "2016-05-24T02:12:35Z", "bucket_order": 204, "bucket_name": "Week 5/22 - 5/28", "type": "feedback", "tag_good": [], "uid": "i0d7xnweuzw2k2", "children": [], "tag_good_arr": [], "id": "iokt45elc4a35n", "updated": "2016-05-24T02:12:35Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "in5pa0rokgy3w6", "updated": "2016-04-18T07:48:56Z", "config": {}}], "tag_good_arr": ["i0c9nvk0xzc2n3", "i0f24oie8102cr", "hdjonbiyfs62ie"], "id": "in5kg8wgluf3rt", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 5, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168564097, "default_anonymity": "no"}, "error": null, "aid": "kyv04ygxwzpw5"}