{"result": {"folders": ["课堂问答", "lecture15", "学习方法"], "nr": 880, "data": {"embed_links": []}, "created": "2016-05-21T07:26:19Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i0f24oie8102cr", "anon": "no", "when": "2016-05-21T07:26:19Z", "data": "iogu025myhv2mw", "type": "create"}, {"to": "iogu025kaf62mv", "uid": "i0ccfx63sir1e", "anon": "no", "when": "2016-05-21T09:37:13Z", "type": "followup"}, {"to": "iogu025kaf62mv", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-22T09:34:06Z", "type": "feedback"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0f24oie8102cr", "subject": "优先级继承vs天花板协议", "created": "2016-05-21T07:26:19Z", "content": "<p>首先参考<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=810\" target=\"_blank\">suanrong</a>的这篇&#xff0c;我觉得他说的不清楚&#xff0c;所以我重新整理一遍&#xff0c;不过其实我也不太清楚&#xff0c;所以希望大家批评指正&#xff0c;争取能得出一个靠谱的答案。</p>\n<p></p>\n<p>首先描述一下这个问题&#xff1a;</p>\n<p>现在有3个进程&#xff0c;分别叫A,B和E&#xff0c;其中A和B需要资源S&#xff0c;而E不需要。优先级是A&gt;E&gt;B</p>\n<p>优先级反置是说这样一种情况&#xff1a;B正在占用S&#xff0c;A正在等待B释放S&#xff0c;而此时E的出现导致B没有机会执行&#xff08;因为E的优先级更高&#xff09;如果E的执行时间很长&#xff0c;导致的结果是&#xff0c;优先级最高的A长时间等待。</p>\n<p></p>\n<p>我们现在就是要解决这样一种情况&#xff0c;我们的想法是从B着手&#xff0c;我们需要让B赶紧执行&#xff08;从而释放S&#xff09;&#xff0c;但是我们调度的算法是根据优先级的顺序来调度的&#xff0c;我们只能临时让B的优先级提高&#xff0c;于是就有了下面两种算法&#xff1a;</p>\n<p></p>\n<p>首先&#xff0c;这两种算法的区别在于B提升优先级的时机不同</p>\n<p></p>\n<p><strong>优先级继承</strong></p>\n<p>一种“懒惰”的策略&#xff0c;B的优先级在A申请资源之后&#xff0c;并且被E阻塞的时候才会提升。</p>\n<p>这种方法只在占有资源的低优先级任务阻塞了高优先级任务时才动态的改变任务的优先级&#xff0c;如果过程较复杂&#xff0c; 则需要进行判断。</p>\n<p><strong>天花板协议</strong></p>\n<p>一种“协议”&#xff0c;为每个信号量定义一个“优先级顶”&#xff0c;这个“优先级顶”是所有可能申请该信号量的优先级最高者&#xff0c;这个值是事先分析好的。当进程申请到资源S之后&#xff0c;优先级就提升到S的优先级顶。</p>\n<p>这种方法简单易行&#xff0c; 不必进行复杂的判断&#xff0c; 不管任务是否阻塞了高优先级任务的运行&#xff0c; 只要任务访问共享资源都会提升任务的优先级。</p>"}], "type": "question", "tags": ["lecture15", "student", "unanswered", "学习方法", "课堂问答"], "tag_good": [{"role": "", "name": "Liu Xiaohong", "endorser": {}, "admin": false, "photo": null, "id": "i0ccfx63sir1e", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "叶子鹏", "endorser": {}, "admin": false, "photo": null, "id": "i0f24oie8102cr", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "MaYe", "endorser": {}, "admin": false, "photo": "1456107932_35.png", "id": "i0cbq1nfv1m496", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/i0cbq1nfv1m496/1456107932_35.png", "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "Albert Einstein(计32黄世宇)", "endorser": {}, "admin": false, "photo": "1411401155_35.png", "id": "i0dz4pw39owu5", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/i0dz4pw39owu5/1411401155_35.png", "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 191, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>赞&#xff01;</p>\n<p></p>\n<p>我用我的语言描述一下我的理解。</p>\n<p></p>\n<p><strong>1、优先级反置问题</strong></p>\n<p>优先级反置&#xff1a;我的理解是&#xff0c;优先级低的进程反而比优先级高的进程更早被调度运行。</p>\n<p>优先级反置的前提&#xff1a;<strong>基于优先级的可抢占调度算法</strong>。</p>\n<p></p>\n<p>wiki的解释&#xff1a;<b>priority inversion</b> is a problematic scenario in <a href=\"https://en.wikipedia.org/wiki/Scheduling_%28computing%29\">scheduling</a> in which a high priority <a href=\"https://en.wikipedia.org/wiki/Task_%28computing%29\">task</a> is indirectly <a href=\"https://en.wikipedia.org/wiki/Preemption_%28computing%29\">preempted</a> by a medium priority task effectively &#34;inverting&#34; the relative priorities of the two tasks.</p>\n<p></p>\n<p><strong>2、一个优先级反置的例子。</strong></p>\n<p></p>\n<p>假设3个进程&#xff0c;进程1、2、3&#xff0c;他们的优先级是1、2、3。</p>\n<p></p>\n<p>进程1拥有资源R&#xff0c;但因为优先级低&#xff0c;没被调度&#xff0c;一直拿着资源R不放。</p>\n<p>进程3申请资源R&#xff0c;但因为进程1拿着资源&#xff0c;只好等待进程1释放。</p>\n<p>进程2于是就比进程3先被调度执行了。&#xff08;优先级反置&#xff09;</p>\n<p></p>\n<p><strong>3、优先级反置问题的分析</strong></p>\n<p>上述“中优先级比高优先级进程先执行”的现象发生&#xff0c;问题出在于&#xff0c;高优先级等待低优先级的锁&#xff0c;而低优先级又不比中优先级先执行。</p>\n<p>该问题的解决思路主要是&#xff1a;提升那个拥有资源的低优先级进程的优先级&#xff0c;或是在它拿到资源的时候&#xff08;天花板协议&#xff09;&#xff0c;或是在有高优先级进程等待的时候&#xff08;优先级继承&#xff09;。</p>", "created": "2016-05-21T09:37:13Z", "bucket_order": 202, "bucket_name": "Week 5/15 - 5/21", "type": "followup", "tag_good": [], "uid": "i0ccfx63sir1e", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我认为两位同学对优先级反置的描述都是很清楚的。这个问题的关键在于以下几点。</p>\n<p></p>\n<p>1&#xff09;什么情况下出现优先级反置&#xff1f;高优先级进程A由于申请低优先级进程B占用的资源而进行等待&#xff1b;第三个优先级介于进程A和B之间的进程C占用CPU执行导致进程A无法及时申请需要的资源。</p>\n<p></p>\n<p>2&#xff09;解决优先级反置的方法都提升进程B的优先级。不同方法的区别在于提升时间和提升后的优先级的不同。下面两个参考链接有比较准确的描述。</p>\n<p></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Priority_ceiling_protocol\">https://en.wikipedia.org/wiki/Priority_ceiling_protocol</a></p>\n<p></p>\n<p><a href=\"http://www.docin.com/p-555789956.html\">http://www.docin.com/p-555789956.html</a></p>\n<p>它的第7页给出一个例子。</p>\n<p></p>\n<p>如果你认为上面的描述还不够明确&#xff0c;可以尝试按自己的理解在ucore上进行代码实现&#xff0c;以展现docin上的例子所描述的情况。有兴趣的同学&#xff0c;请给出你的尝试结果。</p>\n<p></p>", "created": "2016-05-22T09:34:06Z", "bucket_order": 201, "bucket_name": "Week 5/22 - 5/28", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "ioie08quhug1xx", "updated": "2016-05-22T09:34:06Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "iogyoe8dzxr1nj", "updated": "2016-05-21T09:37:13Z", "config": {}}], "tag_good_arr": ["i0ccfx63sir1e", "i0f24oie8102cr", "hcrrjuyequh4bt", "i0cbq1nfv1m496", "i0dz4pw39owu5"], "no_answer": 1, "id": "iogu025kaf62mv", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 6, "num_favorites": 3, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168678461, "default_anonymity": "no"}, "error": null, "aid": "kyv07eppyg438z"}