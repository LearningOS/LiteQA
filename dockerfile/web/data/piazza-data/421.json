{"result": {"folders": ["课堂问答"], "nr": 421, "data": {"embed_links": []}, "created": "2015-05-13T06:24:16Z", "bucket_order": 3, "no_answer_followup": 20, "change_log": [{"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-05-13T06:24:16Z", "data": "i9md3nn9d1d3jd", "type": "create"}, {"to": "i9md3nn6o9f3jc", "uid": "i6vi7mt1I4G", "anon": "no", "when": "2015-05-13T06:24:34Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uayl3vEOz", "anon": "no", "when": "2015-05-13T06:24:53Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uji18l8j51ob", "anon": "no", "when": "2015-05-13T06:24:55Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uak1ivjzr1i0", "anon": "no", "when": "2015-05-13T06:25:07Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6utvrywozd2vd", "anon": "no", "when": "2015-05-13T06:25:17Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6ut1sgpijq", "anon": "no", "when": "2015-05-13T06:25:25Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6xgf2t8N7w", "anon": "no", "when": "2015-05-13T06:26:53Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i7013x05eSl", "anon": "no", "when": "2015-05-13T06:27:10Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6tz0qianu33p3", "anon": "no", "when": "2015-05-13T06:33:42Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i718aanx0OS", "anon": "no", "when": "2015-05-13T06:45:24Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i7bfq2txxyw689", "anon": "no", "when": "2015-05-13T06:51:08Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i718aanx0OS", "anon": "no", "when": "2015-05-13T06:53:05Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i718mp903qx", "anon": "no", "when": "2015-05-13T06:53:19Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uak1ivjzr1i0", "anon": "no", "when": "2015-05-13T06:54:51Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i7oaxkxhxjo3ui", "anon": "no", "when": "2015-05-13T07:06:54Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i71i9kso8Gp", "anon": "no", "when": "2015-05-13T07:08:55Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i8o4iar88jf5mz", "anon": "no", "when": "2015-05-13T07:09:44Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i7w0q2p8Cmz", "anon": "no", "when": "2015-05-13T07:09:58Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i7bfvegt8am5ir", "anon": "no", "when": "2015-05-13T07:10:25Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6t2mk045q4", "anon": "no", "when": "2015-05-13T07:26:04Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i71i9kso8Gp", "anon": "no", "when": "2015-05-13T07:30:00Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6tz0qianu33p3", "anon": "no", "when": "2015-05-13T07:32:05Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i7w0q2p8Cmz", "anon": "no", "when": "2015-05-13T07:39:36Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6tawpo5Fm8", "anon": "no", "when": "2015-05-13T07:39:53Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i7bg4v1keqE", "anon": "no", "when": "2015-05-13T07:41:46Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6tz0qianu33p3", "anon": "no", "when": "2015-05-13T07:42:27Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i7w0q2p8Cmz", "anon": "no", "when": "2015-05-13T07:44:07Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6unpz8nUza", "anon": "no", "when": "2015-05-13T08:07:47Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6sl02qfUgI", "anon": "no", "when": "2015-05-13T08:19:01Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6t76fg9sEh", "anon": "no", "when": "2015-05-13T08:47:32Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i6t7nhkesez6wr", "anon": "no", "when": "2015-05-13T09:09:37Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uunp7jxDb", "anon": "no", "when": "2015-05-13T10:08:28Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6ub691ffHe", "anon": "no", "when": "2015-05-13T11:09:40Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6t6y9snjx2", "anon": "no", "when": "2015-05-13T11:19:42Z", "type": "followup"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-05-13T12:03:38Z", "data": "i9mp8384r51sc", "type": "update"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-05-13T12:03:54Z", "data": "i9mp8fih6s66az", "type": "update"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uuk6b68du319", "anon": "no", "when": "2015-05-13T15:30:48Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6ugdh143r52f9", "anon": "no", "when": "2015-05-13T16:41:29Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6rwsr9cEcQ", "anon": "no", "when": "2015-05-13T17:38:16Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6uswob7jl4242", "anon": "no", "when": "2015-05-14T04:27:46Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6vkh2uqu3V", "anon": "no", "when": "2015-05-14T15:44:15Z", "type": "followup"}, {"to": "i9md3nn6o9f3jc", "uid": "i6vkh2uqu3V", "anon": "no", "when": "2015-05-14T15:46:06Z", "type": "feedback"}, {"to": "i9md3nn6o9f3jc", "uid": "i71i9b92nrr7n4", "anon": "no", "when": "2015-05-16T14:39:06Z", "type": "followup"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-05-16T16:18:39Z", "data": "i9r8nlchii86e2", "type": "update"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec 21 spoc discuss 提交处", "created": "2015-05-16T16:18:39Z", "content": "<p>优胜小组&#xff1a;</p>\n<p></p>\n<p>第一组&#xff1a;</p>\n<p>2012011367 石伟男<br />2012011358 荣禹<br />2012011401 张梦豪<br />2012011400 杨俊</p>\n<p></p>\n<p>第二组&#xff1a;</p>\n<div>李国豪 2012011303</div>\n<div>鲁逸沁 2012011314</div>\n<div>谢晓晖 2012011315</div>\n<div>林子钏 2012011322</div>\n<div></div>\n<div></div>\n<div>第三组&#xff1a;</div>\n<div>\n<div>计22 黄杰 2012011272</div>\n<div>计24 章浚源 2012011334</div>\n<div>计24 杜鹃 2012011354</div>\n<div>计22 袁源 2012011294</div>\n<div></div>\n<div>第四组&#xff1a;</div>\n<div>裴中煜 2012010685<br />楼华哲 2012011327<br />李日灵 2012011332<br />李若愚 2012011353</div>\n</div>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec 21 spoc discuss 提交处", "created": "2015-05-13T12:03:54Z", "content": "<p>优胜小组&#xff1a;</p>\n<p></p>\n<p>第一组&#xff1a;</p>\n<p>2012011367 石伟男<br />2012011358 荣禹<br />2012011401 张梦豪<br />2012011400 杨俊</p>\n<p></p>\n<p></p>\n<p>第二组&#xff1a;</p>\n<div>李国豪 2012011303</div>\n<div>鲁逸沁 2012011314</div>\n<div>谢晓晖 2012011315</div>\n<div>林子钏 2012011322</div>\n<div></div>\n<div></div>\n<div>第三组&#xff1a;</div>\n<div>\n<div>计22 黄杰 2012011272</div>\n<div>计24 章浚源 2012011334</div>\n<div>计24 杜鹃 2012011354</div>\n<div>计22 袁源 2012011294</div>\n</div>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec 21 spoc discuss 提交处", "created": "2015-05-13T12:03:38Z", "content": "<p>优胜小组&#xff1a;</p>\n<p>第一组&#xff1a;</p>\n<p>2012011367 石伟男<br />2012011358 荣禹<br />2012011401 张梦豪<br />2012011400 杨俊</p>\n<p></p>\n<p>第二组&#xff1a;</p>\n<div>李国豪 2012011303</div>\n<div>鲁逸沁 2012011314</div>\n<div>谢晓晖 2012011315</div>\n<div>林子钏 2012011322</div>\n<div></div>\n<div>第三组&#xff1a;</div>\n<div>\n<div>计22 黄杰 2012011272</div>\n<div>计24 章浚源 2012011334</div>\n<div>计24 杜鹃 2012011354</div>\n<div>计22 袁源 2012011294</div>\n</div>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "lec 21 spoc discuss 提交处", "created": "2015-05-13T06:24:16Z", "content": "<p></p>"}], "type": "note", "tags": ["instructor-note", "课堂问答"], "tag_good": [], "unique_views": 119, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>袁源2012011294</p>\n<p>杜鹃2012011354</p>\n<p>黄杰2012011272</p>\n<p>章浚源2012011334</p>", "created": "2015-05-13T06:24:34Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6vi7mt1I4G", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/THUHJ/os_exercises/blob/master/all/09-1-spoc-discussion.md</p>", "created": "2015-05-13T08:19:01Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6sl02qfUgI", "children": [], "tag_good_arr": [], "id": "i9mh77zh5md27s", "updated": "2015-05-13T08:19:01Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md41hcs3w2g6", "updated": "2015-05-13T06:24:34Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>占</p>", "created": "2015-05-13T06:24:53Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6uayl3vEOz", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012011367 石伟男<br />2012011358 荣禹<br />2012011401 张梦豪<br />2012011400 杨俊</p>\n<pre>    def deleteFile(self, tfile):<br />        if printOps:<br />            print &#39;unlink(&#34;%s&#34;);&#39; % tfile<br /><br />        inum = self.nameToInum[tfile]<br />        if self.inodes[inum].getRefCnt()==1:<br />            self.dataFree(inum)<br />            self.inodeFree(inum)<br />        else:<br />            self.inodes[inum].decRefCnt()<br /><br />            <br />        num=self.nameToInum[self.getParent(tfile)]<br />        self.inodes[num].decRefCnt()<br />        self.data[num].delDirEntry(tfile)<br /><br />    # YOUR CODE, YOUR ID<br />        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt<br />        # remove from parent directory: delete from parent inum, delete from parent addr<br />    # DONE<br /><br />        # finally, remove from files list<br />        self.files.remove(tfile)<br />        return 0<br /><br />    def createLink(self, target, newfile, parent):<br />    # YOUR CODE, 2012011367<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # if the newfile was already in parent dir?<br />        # now, find inumber of target<br />        # inc parent ref count<br />        # now add to directory<br />    # DONE<br />        if parent not in self.dirs:<br />            print &#34;!!%s does not exist&#34; %parent<br />            return -1<br />        ip = self.nameToInum[parent]<br />        if self.data[ip].getFreeEntries == 0:<br />            print &#34;!!no free space in %s&#34; %parent<br />            return -1<br />        if not target in self.nameToInum:<br />            print &#34;!!%s does not exist&#34; %target<br />            return -1<br />        tinum = self.nameToInum[target]<br />        if self.data[ip].dirEntryExists(newfile):<br />            print &#34;!!%s already exists in %s&#34; %newfile,parent<br />        else:<br />            self.data[ip].addDirEntry(newfile, tinum)<br /><br />        #inum = self.nameToInum[target]<br />        self.inodes[ip].incRefCnt()<br />        self.inodes[tinum].incRefCnt()<br />        #self.data[ip].addDirEntry(newfile, inum)<br /><br />        return tinum<br /><br />    def createFile(self, parent, newfile, ftype):<br />    # YOUR CODE, 2012011367<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # have to make sure file name is unique<br />        # find free inode<br />        # if a directory, have to allocate directory block for basic (., ..) info<br />        # now ok to init inode properly<br />        # inc parent ref count<br />        # and add to directory of parent<br />    # DONE<br />        if parent not in self.dirs:<br />            print &#34;!!% does not exist&#34; %parent<br />            return -1<br />        ip = self.nameToInum[parent]<br />        if self.data[ip].getFreeEntries == 0:<br />            print &#34;!!no free space in %s&#34; %parent<br />            return -1<br />        if newfile in self.files:<br />            print &#34;!!not an unique file name&#34;<br />            return -1<br />        inum = self.inodeAlloc()<br />        if ftype == &#39;d&#39;:<br />            iaddr = self.dataAlloc()<br />            self.data[iaddr].setType(ftype)<br />        elif ftype == &#39;f&#39;:<br />            iaddr = -1<br />                <br />        if ftype == &#39;d&#39;:<br />            self.inodes[inum].setAll(ftype, iaddr, 2)<br />            self.data[iaddr].addDirEntry(&#34;.&#34;, inum)<br />            self.data[iaddr].addDirEntry(&#34;..&#34;, ip)<br />           # self.dirs.append(newfile)<br />        else:<br />            self.inodes[inum].setAll(ftype, iaddr, 1)<br />           # self.files.append(newfile)<br />        self.nameToInum[newfile] = inum<br />        self.data[ip].addDirEntry(newfile, inum)<br />        self.inodes[ip].incRefCnt()<br />        return inum<br /><br />    def writeFile(self, tfile, data):<br />        inum = self.nameToInum[tfile]<br />        curSize = self.inodes[inum].getSize()<br />        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))<br /><br />    # YOUR CODE, 2012011367<br />        # file is full?<br />        # no data blocks left<br />        # write file data<br />    # DONE<br />        if curSize== 0:<br />            iaddr = self.dataAlloc()<br />            if iaddr == -1:<br />                print &#34;!!no data blocks left&#34;<br />                return -1<br />            self.inodes[inum].setAddr(iaddr)<br />            self.data[iaddr].setType(&#39;f&#39;)<br />        else:<br />            iaddr = self.inodes[inum].getAddr()<br />        self.data[iaddr].addData(data)<br />        if printOps:<br />            print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BLOCKSIZE); close(fd);&#39; % tfile<br />        return 0</pre>\n<p></p>", "created": "2015-05-13T07:39:53Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6tawpo5Fm8", "children": [], "tag_good_arr": [], "id": "i9mfswmbbzt4ki", "updated": "2015-05-13T07:39:53Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md4gmrcer2zk", "updated": "2015-05-13T06:24:53Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>裴中煜 2012010685<br />楼华哲 2012011327<br />李日灵 2012011332<br />李若愚 2012011353<br /><br />另代码框架中存在如下问题&#xff1a;<br />由于框架中没有提供删除目录的功能&#xff0c;而一个目录要占据1个data block空间。故当data block全部用完之后无法释放&#xff0c;使得不能进行其他操作&#xff0c;run中的控制逻辑为while rc==-1:故在函数返回非-1值之前都会循环&#xff0c;所以在data block用完之后系统进入死循环状态。</p>\n<p></p>\n<p>修改部分代码如下&#xff1a;</p>\n<pre>    def deleteFile(self, tfile):<br />        if printOps:<br />            print &#39;unlink(&#34;%s&#34;);&#39; % tfile<br /><br />        inum = self.nameToInum[tfile]<br /><br />    # YOUR CODE, YOUR ID<br />        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt<br />        # remove from parent directory: delete from parent inum, delete from parent addr<br />    # DONE<br /><br />        # finally, remove from files list<br />        refcnt = self.inodes[inum].getRefCnt()<br />        if (refcnt == 1):<br />            if (self.inodes[inum].getAddr() != -1):<br />                self.dbitmap.free(self.inodes[inum].getAddr())<br />                self.data[self.inodes[inum].getAddr()].free()<br />            self.inodes[inum].free()<br />            self.ibitmap.free(inum)<br />        else:<br />            self.inodes[inum].decRefCnt()<br /><br />        parent = self.getParent(tfile)<br />        inum = self.nameToInum[parent]<br />        self.inodes[inum].decRefCnt()<br />        addr = self.inodes[inum].getAddr()<br />        self.data[addr].delDirEntry(tfile)<br />        self.files.remove(tfile)<br />        return 0<br /><br />    def createLink(self, target, newfile, parent):<br />    # YOUR CODE, YOUR ID<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # if the newfile was already in parent dir?<br />        # now, find inumber of target<br />        # inc parent ref count<br />        # now add to directory<br />    # DONE<br />        inum = self.nameToInum[parent]<br />        addr = self.inodes[inum].getAddr()<br />        assert(addr != -1)<br />        if self.data[addr].getFreeEntries() &lt;= 0:<br />            return -1<br />        if self.data[addr].dirEntryExists(newfile):<br />            return -1<br />        tinum = self.nameToInum[target]<br />        self.inodes[tinum].incRefCnt()<br />        self.inodes[inum].incRefCnt()<br />        self.data[addr].addDirEntry(newfile, tinum)<br />        return tinum<br /><br />    def createFile(self, parent, newfile, ftype):<br />    # YOUR CODE, YOUR ID<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # have to make sure file name is unique<br />        # find free inode<br />        # if a directory, have to allocate directory block for basic (., ..) info<br />        # now ok to init inode properly<br />        # inc parent ref count<br />        # and add to directory of parent<br />    # DONE<br />        inum = self.nameToInum[parent]<br />        addr = self.inodes[inum].getAddr()<br />        assert (addr != -1)<br />        if self.data[addr].getFreeEntries() &lt;= 0:<br />            return -1<br />        if self.data[addr].dirEntryExists(newfile):<br />            return -1<br />        new_addr = -1<br />        if ftype == &#39;d&#39;:<br />            new_addr = self.dbitmap.alloc()<br />            if new_addr == -1:<br />                return -1<br />        new_inum = self.ibitmap.alloc()<br />        if new_inum == -1:<br />            return -1<br />        if ftype == &#39;d&#39;:<br />            self.data[new_addr].setType(&#39;d&#39;)<br />            self.data[new_addr].addDirEntry(&#39;.&#39;, new_inum)<br />            self.data[new_addr].addDirEntry(&#39;..&#39;, inum)<br />        self.inodes[inum].incRefCnt()<br />        self.inodes[new_inum].setAll(ftype, new_addr, 1)<br />        self.data[addr].addDirEntry(newfile, new_inum)<br />        return new_inum<br /><br />    def writeFile(self, tfile, data):<br />        inum = self.nameToInum[tfile]<br />        curSize = self.inodes[inum].getSize()<br />        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))<br /><br />    # YOUR CODE, YOUR ID<br />        # file is full?<br />        # no data blocks left<br />        # write file data<br />    # DONE<br />        if (curSize != 0):<br />            dprint(&#39;Error,file is full&#39;)<br />            return -1<br />        else:<br />            curr_num = self.dbitmap.alloc()<br />            if curr_num != -1:<br />                self.data[curr_num].setType(&#39;f&#39;)<br />                self.data[curr_num].addData(data)<br />                self.inodes[inum].setAddr(curr_num)<br />            else:<br />                return -1<br /><br />        if printOps:<br />            print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BLOCKSIZE); close(fd);&#39; % tfile<br />        return 0<br /><br /></pre>\n<p></p>", "created": "2015-05-13T06:24:55Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6uji18l8j51ob", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>writeFile()函数&#xff1a;</p>\n<pre># YOUR CODE, 2012011332<br />        # file is full?<br />        # no data blocks left<br />        # write file data<br />        if (curSize != 0):<br />        \treturn -1<br />        else:<br />        \tcurr_num = self.dbitmap.alloc()<br />        \tif curr_num != -1:<br />        \t\tself.dbitmap.markAllocated(curr_num)<br />        \t\tself.data[curr_num].addData(data)<br />        \t\tself.inodes[inum].setAddr(curr_num)<br />        \telse:<br />        \t\treturn -1</pre>", "created": "2015-05-13T06:53:19Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i718mp903qx", "children": [], "tag_good_arr": [], "id": "i9me50dsu1w7po", "updated": "2015-05-13T06:53:19Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md4hwvqsv447", "updated": "2015-05-13T06:24:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>组员&#xff1a;</p>\n<p>徐天宇   2012011275</p>\n<p>覃伟   2012011278</p>\n<p>王妍   2012011352</p>\n<p></p>\n<p></p>", "created": "2015-05-13T06:25:07Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6uak1ivjzr1i0", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>覃伟 计22 2012011278</p>\n<p></p>\n<p>问题1&#xff0c;答案在&#xff1a;https://github.com/qw540232188/ucore_lab/blob/master/related_info/lab8/res.txt</p>\n<p>问题2&#xff1a;代码在&#xff1a;https://github.com/qw540232188/ucore_lab/blob/master/related_info/lab8/sfs-homework.py</p>", "created": "2015-05-13T06:51:08Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7bfq2txxyw689", "children": [], "tag_good_arr": [], "id": "i9me27quxaw7lg", "updated": "2015-05-13T06:51:08Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>代码和答案见楼上</p>", "created": "2015-05-13T06:54:51Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6uak1ivjzr1i0", "children": [], "tag_good_arr": [], "id": "i9me6zqq3u93st", "updated": "2015-05-13T06:54:51Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012011352 王妍</p>\n<pre> def createFile(self, parent, newfile, ftype):<br />    # YOUR CODE, YOUR ID<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # have to make sure file name is unique<br />        # find free inode<br />        # if a directory, have to allocate directory block for basic (., ..) info<br />        # now ok to init inode properly<br />        # inc parent ref count<br />        # and add to directory of parent<br />        pinum = self.nameToInum[parent]<br />        pinode = self.inodes[pinum]<br />        if pinode.ftype != &#39;d&#39;:<br />            print &#34;is not directory&#34;<br />            return<br />        if self.nameToInum.has_key(newfile):<br />            print &#34;duplicate name&#34;<br />            return<br /><br />        pinode.refCnt &#43;= 1<br /><br />        pdata = self.data[pinode.getAddr()]<br /><br />        freei = self.ibitmap.alloc()<br />        self.nameToInum[newfile] = freei<br />        pdata.addDirEntry(newfile, freei)<br /><br />        self.inodes[freei].setType(ftype)<br />        self.inodes[freei].refCnt = 1<br /><br />        if ftype == &#39;d&#39;:<br />            freed = self.dbitmap.alloc()<br />            self.data[freed].setType(&#39;d&#39;)<br />            self.data[freed].addDirEntry(&#39;.&#39;,  freei)<br />            self.data[freed].addDirEntry(&#39;..&#39;, pinum)<br />            self.inodes[freei].refCnt = 2<br />            self.inodes[freei].setAddr(freed)<br /><br />    # DONE<br />        return freei<br /><br /></pre>\n<p></p>", "created": "2015-05-13T07:41:46Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7bg4v1keqE", "children": [], "tag_good_arr": [], "id": "i9mfvc5vwgy298", "updated": "2015-05-13T07:41:46Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md4rgjj9r321", "updated": "2015-05-13T06:25:07Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>陈天昱</p>\n<p>杨元</p>\n<p>罗鸿胤</p>\n<p>李心田</p>\n<p></p>\n<pre>    def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n\n        inum = self.nameToInum[tfile]\n\t\tpinum = self.nameToInum[self.getParent(tfile)]\n\n    # YOUR CODE, YOUR ID\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec inode.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n \n\t\t# find inode\n\t\tinode = self.inodes[inum]\n\t\t# IF inode.refcnt ==1\n        if inode.getRefCnt() == 1:\n            # THEN free data blocks first\n            self.dataFree(inode.getAddr())\n            # THEN free inode\n            self.inodeFree(inum)\n\t\t# ELSE\n        else:\n            inode.decRefCnt()\n \n        # remove from parent directory\n\t\tpinode = self.inodes[pinum]\n        pinode.decRefCnt()\n        self.data[pinode.getAddr()].delDirEntry(tfile)\n\n        # finally, remove from files list\n        self.files.remove(tfile)\n        return 0</pre>\n<p></p>", "created": "2015-05-13T06:25:17Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6utvrywozd2vd", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>def createFile(self, parent, newfile, ftype):\n        # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n        # DONE\n        inum = self.nameToInum[parent]\n        node = self.inode[inum]\n        bnum = node.getAddr()\n        pblock = self.data[bnum]\n        if pblock.getFreeEntries &lt;= 0:\n            return -1\n        if pblock.dirEntryExists(newfile):\n            return -1\n        newBlock = block(ftype)\n        return inum</pre>\n<p></p>", "created": "2015-05-13T07:06:54Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7oaxkxhxjo3ui", "children": [], "tag_good_arr": [], "id": "i9memht02o45db", "updated": "2015-05-13T07:06:54Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<pre>    def createLink(self, target, newfile, parent):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        pinode = self.inodes[self.nameToInum[parent]]\n\tpdata = pinode.getAddr()\n        # is there room in the parent directory?\n        if pdata.getFreeEntries() == 0 :\n            return -1\n        # if the newfile was already in parent dir?\n        if pdata.dirEntryExists(newfile) :\n            return -1\n        # now, find inumber of target\n        tinum = self.nameToInum[target]\n        # inc parent ref count\n        pinode.incRefCnt()\n        # now add to directory\n        pdata.addDirEntry(newfile, tinum)\n    # DONE\n        return tinum\n\n</pre>\n<p></p>", "created": "2015-05-13T07:26:04Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6t2mk045q4", "children": [], "tag_good_arr": [], "id": "i9mfb4rzohhjx", "updated": "2015-05-13T07:26:04Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>    def writeFile(self, tfile, data):\n        inum = self.nameToInum[tfile]\n        curSize = self.inodes[inum].getSize()\n        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))\n\n        if curSize == 1:\n        \tdprint(&#39;file is full!&#39;)\n        \treturn -1\n        fb = self.dataAlloc()\n        if fb == -1:\n        \tdprint(&#39;no data blocks left&#39;)\n        \treturn -1\n        self.data[fb].setType(&#39;f&#39;)\n        self.data[fb].addData(data)\n        self.inodes[inum].setAddr(fb)\n    # YOUR CODE, YOUR ID\n        # file is full?\n        # no data blocks left\n        # write file data\n    # DONE\n        if printOps:\n            print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BLOCKSIZE); close(fd);&#39; % tfile\n        return 0\n            </pre>\n<p></p>", "created": "2015-05-13T08:47:32Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6t76fg9sEh", "children": [], "tag_good_arr": [], "id": "i9mi7wpj8nwkv", "updated": "2015-05-13T08:47:32Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md4yn86az6ql", "updated": "2015-05-13T06:25:17Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011395 计21 丁延卓</p>\n<p>2012011342 计24 周圣凯</p>\n<p>2012011392 计21 韦福超</p>\n<p>2012011397 计21 王振 </p>", "created": "2015-05-13T06:25:25Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6ut1sgpijq", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>ARG seed 0\nARG numInodes 8\nARG numData 8\nARG numRequests 10\nARG reverse False\nARG printFinal False\n\nInitial state\n\ninode bitmap  10000000\ninodes        [d a:0 r:2] [] [] [] [] [] [] [] \ndata bitmap   10000000\ndata          [(.,0) (..,0)] [] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; mkdir /g\n\ninode bitmap  11000000\ninodes        [d a:0 r:3] [d a:1 r:2] [] [] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /q\n\ninode bitmap  11100000\ninodes        [d a:0 r:4] [d a:1 r:2] [f a:-1 r:1] [] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1) (q,2)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /u\n\ninode bitmap  11110000\ninodes        [d a:0 r:5] [d a:1 r:2] [f a:-1 r:1] [f a:-1 r:1] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; link /u /x\n\ninode bitmap  11110000\ninodes        [d a:0 r:6] [d a:1 r:2] [f a:-1 r:1] [f a:-1 r:2] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (x,3)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; mkdir /t\n\ninode bitmap  11111000\ninodes        [d a:0 r:7] [d a:1 r:2] [f a:-1 r:1] [f a:-1 r:2] [d a:2 r:2] [] [] [] \ndata bitmap   11100000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (x,3) (t,4)] [(.,1) (..,0)] [(.,4) (..,0)] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /g/c\n\ninode bitmap  11111100\ninodes        [d a:0 r:7] [d a:1 r:3] [f a:-1 r:1] [f a:-1 r:2] [d a:2 r:2] [f a:-1 r:1] [] [] \ndata bitmap   11100000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (x,3) (t,4)] [(.,1) (..,0) (c,5)] [(.,4) (..,0)] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; unlink /x\n\ninode bitmap  11111100\ninodes        [d a:0 r:6] [d a:1 r:3] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:-1 r:1] [] [] \ndata bitmap   11100000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4)] [(.,1) (..,0) (c,5)] [(.,4) (..,0)] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; mkdir /g/w\n\ninode bitmap  11111110\ninodes        [d a:0 r:6] [d a:1 r:4] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:-1 r:1] [d a:3 r:2] [] \ndata bitmap   11110000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4)] [(.,1) (..,0) (c,5) (w,6)] [(.,4) (..,0)] [(.,6) (..,1)] [] [] [] [] \n\nWhich operation took place?\n\n&gt; write /g/c &#39;o&#39;\n\ninode bitmap  11111110\ninodes        [d a:0 r:6] [d a:1 r:4] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:4 r:1] [d a:3 r:2] [] \ndata bitmap   11111000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4)] [(.,1) (..,0) (c,5) (w,6)] [(.,4) (..,0)] [(.,6) (..,1)] [o] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /n\n\ninode bitmap  11111111\ninodes        [d a:0 r:7] [d a:1 r:4] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:4 r:1] [d a:3 r:2] [f a:-1 r:1] \ndata bitmap   11111000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4) (n,7)] [(.,1) (..,0) (c,5) (w,6)] [(.,4) (..,0)] [(.,6) (..,1)] [o] [] [] [] </pre>\n<p></p>", "created": "2015-05-13T06:33:42Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6tz0qianu33p3", "children": [], "tag_good_arr": [], "id": "i9mdfsryfnq6kj", "updated": "2015-05-13T06:33:42Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>create File 与 delete File 函数<br /> def createFile(self, parent, newfile, ftype):\n    # YOUR CODE, 2012011395\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n    # DONE\n        parent_inum  = self.nameToInum(parent)\n        parent_addr = self.inode[parent.inum].getAddr()\n        if self.data[parent_addr].getNumEntries() == 32:\n            print &#34;the room has been full!&#34;\n            return -1\n        else:\n            if self.data[parent_addr].dirEntryExists(newfile) == False:\n                print &#34;the name has been existed!&#34;\n                return -1\n            else:\n                inum = self.inodeAlloc()\n                self.inode.append(inode())\n                if ftype == &#39;d&#39;:\n                    addr = self.dataAlloc()\n                    self.data.append(block(&#39;d&#39;))\n                    self.inode[inum].setAll(&#39;d&#39;,addr,2)\n                    self.data[addr].addDirEntry(&#39;.&#39;,  inum)\n                    self.data[addr].addDirEntry(&#39;..&#39;, parent_inum)\n                else:\n                    addr = self.dataAlloc()\n                    self.data.append(block(&#39;f&#39;))\n                    self.inode[inum].setAll(&#39;f&#39;,addr,2)\n                self.inode[parent_inum].incRefCnt()\n                self.data[parent_addr].addDirEntry(newfile,inum)\n            \n        return inum<br /><br /><br /><br /><br />---------------------------------------------------------------------<br />    def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n\n        inum = self.nameToInum[tfile]\n\n    # YOUR CODE, 2012011395\n        if self.inode[inum].getRefCnt(self) == 1:\n            addr = self.inode[inum].getAddr()\n            self.dataFree(addr)\n            self.inodeFree(inum)\n        else:\n            self.inode[inum].decRefCnt(self)\n        \n        parent = self.getParent(tfile)\n        parent_inum = self.nameToInum[parent]\n        self.inode[parent_inum].decRefCnt()\n        parent_addr = self.inode[parent_inum].getAddr()\n        self.data[parent_addr].delDirEntry(tfile)\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n\n        # finally, remove from files list\n        self.files.remove(tfile)\n        return 0</pre>\n<p></p>", "created": "2015-05-13T07:09:58Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7w0q2p8Cmz", "children": [], "tag_good_arr": [], "id": "i9meqfsxku01hs", "updated": "2015-05-13T07:09:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>樓上的版本有些bug誒……重發一下&#xff5e;</p>\n<p></p>\n<p>這個是完整版&#xff5e;</p>\n<pre>    def deleteFile(self, tfile):<br />        if printOps:<br />            print &#39;unlink(&#34;%s&#34;);&#39; % tfile<br /><br />        inum = self.nameToInum[tfile]<br /><br />    # syimyuzya, 2012011342<br />        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt<br />        # remove from parent directory: delete from parent inum, delete from parent addr<br />    # DONE<br />        finode = self.inodes[inum]<br />        finode.decRefCnt()<br />        if finode.getRefCnt()&lt;=0:<br />            self.dataFree(finode.addr)<br />            self.inodeFree(inum)<br /><br />        parent = self.getParent(tfile)<br />        pinum = self.nameToInum[parent]<br />        pinode = self.inodes[pinum]<br />        pblock = self.data[pinode.addr]<br /><br />        basename = tfile.split(&#39;/&#39;)[-1]<br />        pblock.delDirEntry(basename)<br /><br />        # finally, remove from files list<br />        self.files.remove(tfile)<br />        return 0<br /><br />    def createLink(self, target, newfile, parent):<br />    # syimyuzya, 2012011342<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # if the newfile was already in parent dir?<br />        # now, find inumber of target<br />        # inc parent ref count<br />        # now add to directory<br />    # DONE<br />        # get parent info<br />        #print &#39;#link#&#39;, target, newfile, parent<br />        pinum = self.nameToInum[parent]<br />        pinode = self.inodes[pinum]<br />        pblock = self.data[pinode.addr]<br />        if not pblock.getFreeEntries()&gt;0:<br />            return -1<br />        if pblock.dirEntryExists(newfile):<br />            return -1<br /><br />        # get target<br />        tinum = self.nameToInum[target]<br />        tinode = self.inodes[tinum]<br /><br />        # add to directory<br />        pblock.addDirEntry(newfile, tinum)<br />        tinode.incRefCnt()<br />        return tinum<br /><br />    def createFile(self, parent, newfile, ftype):<br />    # syimyuzya, 2012011342<br />        # find info about parent<br />        # is there room in the parent directory?<br />        # have to make sure file name is unique<br />        # find free inode<br />        # if a directory, have to allocate directory block for basic (., ..) info<br />        # now ok to init inode properly<br />        # inc parent ref count<br />        # and add to directory of parent<br />    # DONE<br />        #print &#39;#create#&#39;, parent, newfile, ftype<br />        # get parent info<br />        pinum = self.nameToInum[parent]<br />        pinode = self.inodes[pinum]<br />        pblock = self.data[pinode.addr]<br /><br />        if not pblock.getFreeEntries()&gt;0:<br />            return -1<br />        if pblock.dirEntryExists(newfile):<br />            return -1<br /><br />        # alloc<br />        finum = self.inodeAlloc()<br />        if finum&lt;0: return -1<br />        finode = self.inodes[finum]<br />        pblock.addDirEntry(newfile, finum)<br />        finode.setAll(ftype, -1, 1)<br /><br />        # directory<br />        if ftype==&#39;d&#39;:<br />            finode.addr = self.dataAlloc()<br />            if finode.addr&lt;0:<br />                pblock.delDirEntry(newfile)<br />                self.inodeFree(finum)<br />                return -1<br />            fblock = self.data[finode.addr]<br />            fblock.setType(&#39;d&#39;)<br />            fblock.addDirEntry(&#39;.&#39;, finum)<br />            finode.incRefCnt()<br />            fblock.addDirEntry(&#39;..&#39;, pinum)<br />            pinode.incRefCnt()<br /><br />        return finum<br /><br />    def writeFile(self, tfile, data):<br />        inum = self.nameToInum[tfile]<br />        curSize = self.inodes[inum].getSize()<br />        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))<br /><br />    # syimyuzya, 2012011342<br />        # file is full?<br />        # no data blocks left<br />        # write file data<br />    # DONE<br />        dprint(&#39;#write# {} {}&#39;.format(tfile, data))<br />        if curSize&gt;0:<br />            return -1<br />        finode = self.inodes[inum]<br /><br />        # create block<br />        if finode.addr==-1:<br />            finode.addr = self.dataAlloc()<br />            dprint(&#39;## {}&#39;.format(finode.addr))<br />            if finode.addr&lt;0: return -1<br />            self.data[finode.addr].setType(&#39;f&#39;)<br /><br />        fblock = self.data[finode.addr]<br />        fblock.addData(data)<br /><br />        if printOps:<br />            print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BLOCKSIZE); close(fd);&#39; % tfile<br />        return 0</pre>", "created": "2015-05-13T07:32:05Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6tz0qianu33p3", "children": [], "tag_good_arr": [], "id": "i9mfivrmysb1vq", "updated": "2015-05-13T07:32:05Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我把</p>\n<p></p>\n<pre>if self.data[parent_addr].dirEntryExists(newfile) == False</pre>\n<p>写错了 应该是 True 写成了False&#xff0c;二了。</p>", "created": "2015-05-13T07:39:36Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7w0q2p8Cmz", "children": [], "tag_good_arr": [], "id": "i9mfsjjdpen73p", "updated": "2015-05-13T07:39:36Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>&#64;dingyz12 其實是你的createFile代碼Runtime Error了⊙﹏⊙</p>", "created": "2015-05-13T07:42:27Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6tz0qianu33p3", "children": [], "tag_good_arr": [], "id": "i9mfw7jrr782g9", "updated": "2015-05-13T07:42:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>没有运行&#xff0c;刚刚发现了好几个error。。。T_T</p>", "created": "2015-05-13T07:44:07Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7w0q2p8Cmz", "children": [], "tag_good_arr": [], "id": "i9mfycmzld5549", "updated": "2015-05-13T07:44:07Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md558b5z66sl", "updated": "2015-05-13T06:25:25Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "战裕隆 2012011388\n陈刚 2012011389\n周界 2012011394\n马晓彬 2012011402\n坑", "created": "2015-05-13T06:26:53Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6xgf2t8N7w", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9md716anxe45t", "updated": "2015-05-13T06:26:53Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>鲁逸沁 2012011314</p>\n<p>李国豪 2012011303</p>\n<p>林子钏 2012011322</p>\n<p>谢晓晖 2012011315</p>", "created": "2015-05-13T06:27:10Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i7013x05eSl", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>https://github.com/lgh303/ucore_lab/blob/master/related_info/lab8/sfs-homework.py</p>\n<pre>#! /usr/bin/env python\n\nimport random\nfrom optparse import OptionParser\n\nDEBUG = False\n\ndef dprint(str):\n    if DEBUG:\n        print str\n\nprintOps      = True\nprintState    = True\nprintFinal    = True\n\nclass bitmap:\n    def __init__(self, size):\n        self.size = size\n        self.bmap = []\n        for num in range(size):\n            self.bmap.append(0)\n\n    def alloc(self):\n        for num in range(len(self.bmap)):\n            if self.bmap[num] == 0:\n                self.bmap[num] = 1\n                return num\n        return -1\n\n    def free(self, num):\n        assert(self.bmap[num] == 1)\n        self.bmap[num] = 0\n\n    def markAllocated(self, num):\n        assert(self.bmap[num] == 0)\n        self.bmap[num] = 1\n\n    def dump(self):\n        s = &#39;&#39;\n        for i in range(len(self.bmap)):\n            s &#43;= str(self.bmap[i])\n        return s\n\nclass block:\n    def __init__(self, ftype):\n        assert(ftype == &#39;d&#39; or ftype == &#39;f&#39; or ftype == &#39;free&#39;)\n        self.ftype = ftype\n        # only for directories, properly a subclass but who cares\n        self.dirUsed = 0\n        self.maxUsed = 32\n        self.dirList = []\n        self.data    = &#39;&#39;\n\n    def dump(self):\n        if self.ftype == &#39;free&#39;:\n            return &#39;[]&#39;\n        elif self.ftype == &#39;d&#39;:\n            rc = &#39;&#39;\n            for d in self.dirList:\n                # d is of the form (&#39;name&#39;, inum)\n                short = &#39;(%s,%s)&#39; % (d[0], d[1])\n                if rc == &#39;&#39;:\n                    rc = short\n                else:\n                    rc &#43;= &#39; &#39; &#43; short\n            return &#39;[&#39;&#43;rc&#43;&#39;]&#39;\n            # return &#39;%s&#39; % self.dirList\n        else:\n            return &#39;[%s]&#39; % self.data\n\n    def setType(self, ftype):\n        assert(self.ftype == &#39;free&#39;)\n        self.ftype = ftype\n\n    def addData(self, data):\n        assert(self.ftype == &#39;f&#39;)\n        self.data = data\n\n    def getNumEntries(self):\n        assert(self.ftype == &#39;d&#39;)\n        return self.dirUsed\n\n    def getFreeEntries(self):\n        assert(self.ftype == &#39;d&#39;)\n        return self.maxUsed - self.dirUsed\n\n    def getEntry(self, num):\n        assert(self.ftype == &#39;d&#39;)\n        assert(num &lt; self.dirUsed)\n        return self.dirList[num]\n\n    def addDirEntry(self, name, inum):\n        assert(self.ftype == &#39;d&#39;)\n        self.dirList.append((name, inum))\n        self.dirUsed &#43;= 1\n        assert(self.dirUsed &lt;= self.maxUsed)\n\n    def delDirEntry(self, name):\n        assert(self.ftype == &#39;d&#39;)\n        tname = name.split(&#39;/&#39;)\n        dname = tname[len(tname) - 1]\n        for i in range(len(self.dirList)):\n            if self.dirList[i][0] == dname:\n                self.dirList.pop(i)\n                self.dirUsed -= 1\n                return\n        assert(1 == 0)\n\n    def dirEntryExists(self, name):\n        assert(self.ftype == &#39;d&#39;)\n        for d in self.dirList:\n            if name == d[0]:\n                return True\n        return False\n\n    def free(self):\n        assert(self.ftype != &#39;free&#39;)\n        if self.ftype == &#39;d&#39;:\n            # check for only dot, dotdot here\n            assert(self.dirUsed == 2)\n            self.dirUsed = 0\n        self.data  = &#39;&#39;\n        self.ftype = &#39;free&#39;\n\nclass inode:\n    def __init__(self, ftype=&#39;free&#39;, addr=-1, refCnt=1):\n        self.setAll(ftype, addr, refCnt)\n\n    def setAll(self, ftype, addr, refCnt):\n        assert(ftype == &#39;d&#39; or ftype == &#39;f&#39; or ftype == &#39;free&#39;)\n        self.ftype  = ftype\n        self.addr   = addr\n        self.refCnt = refCnt\n\n    def incRefCnt(self):\n        self.refCnt &#43;= 1\n\n    def decRefCnt(self):\n        self.refCnt -= 1\n\n    def getRefCnt(self):\n        return self.refCnt\n\n    def setType(self, ftype):\n        assert(ftype == &#39;d&#39; or ftype == &#39;f&#39; or ftype == &#39;free&#39;)\n        self.ftype = ftype\n\n    def setAddr(self, block):\n        self.addr = block\n\n    def getSize(self):\n        if self.addr == -1:\n            return 0\n        else:\n            return 1\n\n    def getAddr(self):\n        return self.addr\n\n    def getType(self):\n        return self.ftype\n\n    def free(self):\n        self.ftype = &#39;free&#39;\n        self.addr  = -1\n        \n\nclass fs:\n    def __init__(self, numInodes, numData):\n        self.numInodes = numInodes\n        self.numData   = numData\n        \n        self.ibitmap = bitmap(self.numInodes)\n        self.inodes  = []\n        for i in range(self.numInodes):\n            self.inodes.append(inode())\n\n        self.dbitmap = bitmap(self.numData)\n        self.data    = []\n        for i in range(self.numData):\n            self.data.append(block(&#39;free&#39;))\n    \n        # root inode\n        self.ROOT = 0\n\n        # create root directory\n        self.ibitmap.markAllocated(self.ROOT)\n        self.inodes[self.ROOT].setAll(&#39;d&#39;, 0, 2)\n        self.dbitmap.markAllocated(self.ROOT)\n        self.data[0].setType(&#39;d&#39;)\n        self.data[0].addDirEntry(&#39;.&#39;,  self.ROOT)\n        self.data[0].addDirEntry(&#39;..&#39;, self.ROOT)\n\n        # these is just for the fake workload generator\n        self.files      = []\n        self.dirs       = [&#39;/&#39;]\n        self.nameToInum = {&#39;/&#39;:self.ROOT}\n\n    def dump(self):\n        print &#39;inode bitmap &#39;, self.ibitmap.dump()\n        print &#39;inodes       &#39;,\n        for i in range(0,self.numInodes):\n            ftype = self.inodes[i].getType()\n            if ftype == &#39;free&#39;:\n                print &#39;[]&#39;,\n            else:\n                print &#39;[%s a:%s r:%d]&#39; % (ftype, self.inodes[i].getAddr(), self.inodes[i].getRefCnt()),\n        print &#39;&#39;\n        print &#39;data bitmap  &#39;, self.dbitmap.dump()\n        print &#39;data         &#39;,\n        for i in range(self.numData):\n            print self.data[i].dump(),\n        print &#39;&#39;\n        print self.files\n        print self.dirs\n        print self.nameToInum\n\n    def makeName(self):\n        p = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\n        return p[int(random.random() * len(p))]\n\n    def inodeAlloc(self):\n        return self.ibitmap.alloc()\n\n    def inodeFree(self, inum):\n        self.ibitmap.free(inum)\n        self.inodes[inum].free()\n\n    def dataAlloc(self):\n        return self.dbitmap.alloc()\n\n    def dataFree(self, bnum):\n        self.dbitmap.free(bnum)\n        self.data[bnum].free()\n        \n    def getParent(self, name):\n        tmp = name.split(&#39;/&#39;)\n        if len(tmp) == 2:\n            return &#39;/&#39;\n        pname = &#39;&#39;\n        for i in range(1, len(tmp)-1):\n            pname = pname &#43; &#39;/&#39; &#43; tmp[i]\n        return pname\n\n    def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n\n        inum = self.nameToInum[tfile]\n        assert(self.inodes[inum].getType() == &#39;f&#39;)\n\n        dnum = self.inodes[inum].getAddr()\n        if self.inodes[inum].getRefCnt() == 1:\n            self.inodes[inum].free()\n            self.data[dnum].free()\n        else:\n            self.inodes[inum].decRefCnt()\n\n        \n        pname = self.getParent(tfile)\n        pinum = self.nameToInum[pname]\n        pdnum = self.inodes[pinum].getAddr()\n        self.inodes[pinum].decRefCnt()\n        self.data[pdnum].delDirEntry(tfile)\n        self.files.remove(tfile)\n        self.nameToInum.pop(tfile)\n\n    # YOUR CODE, YOUR ID\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n\n        # finally, remove from files list\n        return 0\n\n    def createLink(self, target, newfile, parent):\n\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # if the newfile was already in parent dir?\n        # now, find inumber of target\n        # inc parent ref count\n        # now add to directory\n    # DONE\n\tpinum = self.nameToInum[parent]\n        pdatanum = self.inodes[pinum].getAddr()\n\tif self.data[pdatanum].getFreeEntries():\n            tinum = self.nameToInum[target]\n            if tinum &lt; len(self.inodes) and tinum &gt;= 0:\n                self.inodes[pinum].incRefCnt()\n                self.inodes[tinum].incRefCnt()\n                pdata = self.inodes[pinum].getAddr()\n                self.data[pdata].addDirEntry(newfile,tinum)\n\t\t\t\n        return tinum\n\n    def createFile(self, parent, newfile, ftype):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n    # DONE\n        print &#39;createFile(&#39;,\n        print parent,\n        print &#39;, &#39; &#43; newfile &#43; &#39;, &#39; &#43; ftype &#43; &#39;)&#39;\n        pinum = self.nameToInum[parent]\n        pdatanum = self.inodes[pinum].getAddr()\n        free_count = self.data[pdatanum].getFreeEntries()\n        if free_count &lt;= 0:\n            return -1\n        if newfile in self.files:\n            return -1\n        inum = self.inodeAlloc()\n        if inum == -1:\n            return -1\n        if ftype == &#39;f&#39;:\n            self.inodes[inum].setAll(ftype, -1, 1)\n            currfile = parent &#43; &#39;/&#39; &#43; newfile\n #           self.nameToInum[currfile] = inum\n        else:\n            datanum = self.dataAlloc()\n            if datanum == -1:\n                return -1\n            self.inodes[inum].setAll(ftype, datanum, 2)\n            self.data[datanum].setType(&#39;d&#39;)\n            if parent == &#39;/&#39;:\n                currdir = parent &#43; newfile\n            else:\n                currdir = parent &#43; &#39;/&#39; &#43; newfile\n            self.data[datanum].addDirEntry(&#39;.&#39;, inum)\n            self.data[datanum].addDirEntry(&#39;..&#39;, pinum)\n#            self.nameToInum[currdir] = inum\n        self.data[pdatanum].addDirEntry(newfile, inum)\n        self.inodes[pinum].incRefCnt()\n        return inum\n\n   </pre>", "created": "2015-05-13T08:07:47Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6unpz8nUza", "children": [], "tag_good_arr": [], "id": "i9mgssdsu597g7", "updated": "2015-05-13T08:07:47Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9md7e5rv7m489", "updated": "2015-05-13T06:27:10Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>占</p>", "created": "2015-05-13T06:45:24Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i718aanx0OS", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012011359 路云飞</p>\n<p>https://github.com/december/os_exercises/blob/master/all/09-1-spoc-discussion.md</p>", "created": "2015-05-13T06:53:05Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i718aanx0OS", "children": [], "tag_good_arr": [], "id": "i9me4q0dbdw36b", "updated": "2015-05-13T06:53:05Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9mduu4o4h51ak", "updated": "2015-05-13T06:45:24Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011291 闵延泽</p>\n<p>2012011293 应杰夫</p>\n<p>2012011288 杨博文</p>\n<p>2012011276 韩慧阳</p>", "created": "2015-05-13T07:08:55Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i71i9kso8Gp", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>杨博文 2012011288 writeFile</p>\n<p></p>\n<p>def writeFile(self, tfile, data):<br /> inum = self.nameToInum[tfile]<br /> curSize = self.inodes[inum].getSize()<br /> dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))</p>\n<p># YOUR CODE, YOUR ID 2012011288<br /> # file is full?<br /> # no data blocks left<br /> # write file data<br /> # DONE<br /> #file is full<br /> if (self.inodes[inum].getAddr&gt;0):<br /> return -1<br /> #no data blocks left<br /> addr = self.dataAlloc()<br /> if (addr &lt; 0):<br /> return -1<br /> self.inode[inum].setAddr(addr)<br /> #set file tpye<br /> self.data[addr].setType(&#39;f&#39;)<br /> #write data to block<br /> self.data[addr].addData(data)<br /> if printOps:<br /> print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BLOCKSIZE); close(fd);&#39; % tfile<br /> return 0</p>", "created": "2015-05-13T07:09:44Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i8o4iar88jf5mz", "children": [], "tag_good_arr": [], "id": "i9meq4j4m6i51e", "updated": "2015-05-13T07:09:44Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>createFile</p>\n<p></p>\n<p></p>\n<p>def createFile(self, parent, newfile, ftype):<br /> # YOUR CODE, 2012011276<br /> # find info about parent<br /> # is there room in the parent directory?<br /> # have to make sure file name is unique<br /> # find free inode<br /> # if a directory, have to allocate directory block for basic (., ..) info<br /> # now ok to init inode properly<br /> # inc parent ref count<br /> # and add to directory of parent<br /> # DONE<br /> index = self.nameToInum(parent);<br /> freeRoom = self.inodes[index].getFreeEntries()<br /> if freeRoom &lt;= 0:<br /> return -1<br /> <br /> fnum = parent.getNumEntries()<br /> for i in range(0, fnum)<br /> if self.name == parent.getEntry(i)<br /> return -1<br /> inodenum = self.inodeAlloc()<br /> if inodenum &lt; 0:<br /> return -1<br /> <br /> if ftype == &#39;d&#39;:<br /> addr = self.dataAlloc()<br /> if addr&lt;0:<br /> return -1<br /> self.inodes[inodenum].setAll(&#39;d&#39;, addr, 2)<br /> self.data[addr].setType(&#39;d&#39;)<br /> self.data[addr].addDirEntry(&#39;.&#39;, inodenum)<br /> self.data[addr].addDirEntry(&#39;..&#39;, fnum)<br /> else:<br /> self.inodes[inodenum].setAll(&#39;f&#39;, -1, 1)<br /> self.inodes[index].incRefCnt()<br /> <br /> return inum</p>", "created": "2015-05-13T07:10:25Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i7bfvegt8am5ir", "children": [], "tag_good_arr": [], "id": "i9mer0gsegy3d1", "updated": "2015-05-13T07:10:25Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>def deleteFile(self, tfile):<br /> if printOps:<br /> print &#39;unlink(&#34;%s&#34;);&#39; % tfile</p>\n<p>inum = self.nameToInum[tfile];<br /> f_inode=self.inodes[inum];<br /> addr=f_inode[1];<br /> ref=f_inode[2];</p>\n<p># YOUR CODE, 2012011291<br /> # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt<br /> # remove from parent directory: delete from parent inum, delete from parent addr<br /> # DONE</p>\n<p># finally, remove from files list<br /> if ref == 1:<br /> #THEN free data blocks first<br /> if addr!=-1:<br /> self.dbitmap[addr]=0;<br /> del self.data[addr];<br /> #then free inode<br /> self.ibitmap[inum]=0;<br /> del self.inodes[inum];<br /> else:<br /> self.inodes[inum][2]=ref-1;<br /> # remove from parent directory: delete from parent inum, delete from parent addr<br /> p_name=self.getParent(tfile);<br /> pnum = self.nameToInum[p_name];<br /> pref=self.inodes[pnum][2];<br /> paddr=self.inodes[pnum][1];<br /> self.inodes[pnum][2]=pref-1;<br /> self.data[paddr].delDirEntry(tfile);<br /> self.files.remove(tfile)<br /> return 0</p>", "created": "2015-05-13T07:30:00Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i71i9kso8Gp", "children": [], "tag_good_arr": [], "id": "i9mfg738yy2qu", "updated": "2015-05-13T07:30:00Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9mep31m1xf19h", "updated": "2015-05-13T07:08:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011328 陈辉</p>\n<p>2012011341 王昊</p>\n<pre> def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n\n        inum = self.nameToInum[tfile]\n        if self.inodes[inum].refCnt == 1:\n            daddr = self.inodes[inum].getAddr()\n            self.dataFree(daddr)\n            self.inodeFree(inum)\n        else:\n        \tself.inodes[inum].decRefCnt()\n        pname = getParent(tfile)\n        pinum = self.nameToInum(pname)\n        paddr = self.inodes[pinum].getAddr()\n        self.inodes[pinum].decRefCnt()\n        self.data[paddr].delDirEntry(tfile)\n    # YOUR CODE, YOUR ID\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n\n        # finally, remove from files list\n        self.files.remove(tfile)\n        return 0\n\n    def createLink(self, target, newfile, parent):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # if the newfile was already in parent dir?\n        # now, find inumber of target\n        # inc parent ref count\n        # now add to directory\n    # DONE\n        pinum = self.nameToInum(parent)\n        paddr = self.inodes[pinum].getAddr()\n        if self.data[paddr].dirEntryExists(newfile) == true:\n            print &#39;the newfile exists in this directory!&#39;\n            return -1;\n         tinum = self.nameToInum(target)\n         taddr  = self.inodes[tinum].getAddr()\n         self.inodes[pinum].incRefCnt()\n         self.inodes[tinum].incRefCnt()\n         self.data[inum].addDirEntry(newfile,taddr)\n        return tinum\n\n    def createFile(self, parent, newfile, ftype):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n    # DONE\n        pinum = self.nameToInum(parent)\n        paddr = self.inodes[pinum].getAddr()\n        if self.data[paddr].dirEntryExists(newfile) == true:\n        \treturn -1\n        if(self.data[paddr].getFreeEntries() &lt;= 0):\n        \treturn -1\n        daddr = self.dbitmap.alloc()\n        iaddr = self.ibitmap.alloc()\n        self.data[paddr].addDirEntry(newfile,daddr)\n        if ftype == &#39;d&#39;:\n        \tself.inodes[iaddr].setAll(&#39;d&#39;,paddr,2)\n        \tself.data[daddr].setType(&#39;d&#39;)\n        \tself.data[daddr].addDirEntry(&#39;.&#39;,daddr)\n        \tself.data[daddr].addDirEntry(&#39;..&#39;,paddr)\n       else:\n       \tself.inodes[iaddr].setAll(&#39;f&#39;,-1,1)\n       self.inodes[paddr].incRefCnt()\n        return inum\n\n    def writeFile(self, tfile, data):\n        inum = self.nameToInum[tfile]\n        curSize = self.inodes[inum].getSize()\n        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))\n        if curSize != 0:\n        \treturn -1\n        daddr =  self.dbitmap.alloc()\n        if daddr != -1:\n        \tself.data[daddr].setType(&#39;f&#39;)\n        \tself.data[daddr].addData(data)\n        else:\n        \treturn -1\n    # YOUR CODE, YOUR ID\n        # file is full?\n        # no data blocks left\n        # write file data\n    # DONE</pre>\n<p></p>", "created": "2015-05-13T09:09:37Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6t7nhkesez6wr", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9mj0ao8gam1zr", "updated": "2015-05-13T09:09:37Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>计22 沈光耀</p>\n<p></p>\n<p>https://github.com/sunlightsgy/ucore_lab/tree/master/related_info/lab8</p>", "created": "2015-05-13T10:08:28Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6uunp7jxDb", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9ml3zqvgbk78g", "updated": "2015-05-13T10:08:28Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p><pre>    def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n\n        inum = self.nameToInum[tfile]\n\n    # YOUR CODE, 2012011324\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n        if self.inodes[inum].getRefCnt() == 1:\n            self.dataFree(self.inodes[inum].getAddr())\n            self.inodeFree(inum)\n        else:\n            self.inodes[inum].decRefCnt()\n\t\tpinode = self.inodes[pinum]\n        pinode.decRefCnt()\n        self.data[pinode.getAddr()].delDirEntry(tfile)\n        self.files.remove(tfile)\n        return 0\n\n    def createLink(self, target, newfile, parent):\n    # YOUR CODE, 2012011324\n        # find info about parent\n        # is there room in the parent directory?\n        # if the newfile was already in parent dir?\n        # now, find inumber of target\n        # inc parent ref count\n        # now add to directory\n\t\t# find info about parent\n        pinode = self.inodes[self.nameToInum[parent]]\n        if pinode.getAddr().getFreeEntries() == 0 :\n            return -1\n        if pinode.getAddr().dirEntryExists(newfile) :\n            return -1\n        tinum = self.nameToInum[target]\n        pinode.incRefCnt()\n        pinode.getAddr().addDirEntry(newfile, tinum)\n    # DONE\n        return tinum\n\n    def createFile(self, parent, newfile, ftype):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n    # DONE\n\t\tinum = self.nameToInum[parent]\n        bnum = self.inode[inum].getAddr()\n        pblock = self.data[bnum]\n        if pblock.getFreeEntries &lt;= 0:\n            return -1\n        if pblock.dirEntryExists(newfile):\n            return -1\n        newblock = block(ftype)\n        return inum\n\n    def writeFile(self, tfile, data):\n        inum = self.nameToInum[tfile]\n        curSize = self.inodes[inum].getSize()\n        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))\n\n    # YOUR CODE, YOUR ID\n        # file is full?\n        # no data blocks left\n        # write file data\n    # DONE\n        if curSize == 1:\n        \treturn -1\n        fb = self.dataAlloc()\n        if fb == -1:\n        \treturn -1\n        self.data[fb].setType(&#39;f&#39;)\n        self.data[fb].addData(data)\n        self.inodes[inum].setAddr(fb)\n        if printOps:\n            print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BLOCKSIZE); close(fd);&#39; % tfile\n        return 0</pre>\n<p>党唯真 2012011324</p>", "created": "2015-05-13T11:09:40Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6ub691ffHe", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9mnaomlag04sd", "updated": "2015-05-13T11:09:40Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>计25 矣晓沅 2012011364</p>\n<p>https://github.com/MtMoon/os_exercises/blob/master/all/lab8-spoc-discuss/sfs.py</p>", "created": "2015-05-13T11:19:42Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6t6y9snjx2", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9mnnlekjrx730", "updated": "2015-05-13T11:19:42Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>计25  王轩  2012011369</p>\n<p></p>\n<p>https://github.com/xWang1994/os_exercises/blob/master/all/09-1-spoc-discussion.md</p>", "created": "2015-05-13T15:30:48Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6uuk6b68du319", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9mwmi4hccb4l3", "updated": "2015-05-13T15:30:48Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>杨皓 计24 2012013320</p>\n<p></p>\n<p>https://github.com/Alex-YH/os_exercises/blob/master/sfs.py</p>", "created": "2015-05-13T16:41:29Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6ugdh143r52f9", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9mz5edtw3q5e4", "updated": "2015-05-13T16:41:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>2012011382 李浩达</p>\n<p>https://git.net9.org/lihaoda/os_exercise/blob/master/all/sfs-homework.py</p>", "created": "2015-05-13T17:38:16Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6rwsr9cEcQ", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9n16fokxm6j6", "updated": "2015-05-13T17:38:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>马晓彬 周界 战裕隆 陈刚</p>\n<pre>#! /usr/bin/env python\n\nimport random\nfrom optparse import OptionParser\n\nDEBUG = False\n\ndef dprint(str):\n    if DEBUG:\n        print str\n\nprintOps      = True\nprintState    = True\nprintFinal    = True\n\nclass bitmap:\n    def __init__(self, size):\n        self.size = size\n        self.bmap = []\n        for num in range(size):\n            self.bmap.append(0)\n\n    def alloc(self):\n        for num in range(len(self.bmap)):\n            if self.bmap[num] == 0:\n                self.bmap[num] = 1\n                return num\n        return -1\n\n    def free(self, num):\n        assert(self.bmap[num] == 1)\n        self.bmap[num] = 0\n\n    def markAllocated(self, num):\n        assert(self.bmap[num] == 0)\n        self.bmap[num] = 1\n\n    def dump(self):\n        s = &#39;&#39;\n        for i in range(len(self.bmap)):\n            s &#43;= str(self.bmap[i])\n        return s\n\nclass block:\n    def __init__(self, ftype):\n        assert(ftype == &#39;d&#39; or ftype == &#39;f&#39; or ftype == &#39;free&#39;)\n        self.ftype = ftype\n        # only for directories, properly a subclass but who cares\n        self.dirUsed = 0\n        self.maxUsed = 32\n        self.dirList = []\n        self.data    = &#39;&#39;\n\n    def dump(self):\n        if self.ftype == &#39;free&#39;:\n            return &#39;[]&#39;\n        elif self.ftype == &#39;d&#39;:\n            rc = &#39;&#39;\n            for d in self.dirList:\n                # d is of the form (&#39;name&#39;, inum)\n                short = &#39;(%s,%s)&#39; % (d[0], d[1])\n                if rc == &#39;&#39;:\n                    rc = short\n                else:\n                    rc &#43;= &#39; &#39; &#43; short\n            return &#39;[&#39;&#43;rc&#43;&#39;]&#39;\n            # return &#39;%s&#39; % self.dirList\n        else:\n            return &#39;[%s]&#39; % self.data\n\n    def setType(self, ftype):\n        assert(self.ftype == &#39;free&#39;)\n        self.ftype = ftype\n\n    def addData(self, data):\n        assert(self.ftype == &#39;f&#39;)\n        self.data = data\n\n    def getNumEntries(self):\n        assert(self.ftype == &#39;d&#39;)\n        return self.dirUsed\n\n    def getFreeEntries(self):\n        assert(self.ftype == &#39;d&#39;)\n        return self.maxUsed - self.dirUsed\n\n    def getEntry(self, num):\n        assert(self.ftype == &#39;d&#39;)\n        assert(num &lt; self.dirUsed)\n        return self.dirList[num]\n\n    def addDirEntry(self, name, inum):\n        assert(self.ftype == &#39;d&#39;)\n        self.dirList.append((name, inum))\n        self.dirUsed &#43;= 1\n        assert(self.dirUsed &lt;= self.maxUsed)\n\n    def delDirEntry(self, name):\n        assert(self.ftype == &#39;d&#39;)\n        tname = name.split(&#39;/&#39;)\n        dname = tname[len(tname) - 1]\n        for i in range(len(self.dirList)):\n            if self.dirList[i][0] == dname:\n                self.dirList.pop(i)\n                self.dirUsed -= 1\n                return\n        assert(1 == 0)\n\n    def dirEntryExists(self, name):\n        assert(self.ftype == &#39;d&#39;)\n        for d in self.dirList:\n            if name == d[0]:\n                return True\n        return False\n\n    def free(self):\n        assert(self.ftype != &#39;free&#39;)\n        if self.ftype == &#39;d&#39;:\n            # check for only dot, dotdot here\n            assert(self.dirUsed == 2)\n            self.dirUsed = 0\n        self.data  = &#39;&#39;\n        self.ftype = &#39;free&#39;\n\nclass inode:\n    def __init__(self, ftype=&#39;free&#39;, addr=-1, refCnt=1):\n        self.setAll(ftype, addr, refCnt)\n\n    def setAll(self, ftype, addr, refCnt):\n        assert(ftype == &#39;d&#39; or ftype == &#39;f&#39; or ftype == &#39;free&#39;)\n        self.ftype  = ftype\n        self.addr   = addr\n        self.refCnt = refCnt\n\n    def incRefCnt(self):\n        self.refCnt &#43;= 1\n\n    def decRefCnt(self):\n        self.refCnt -= 1\n\n    def getRefCnt(self):\n        return self.refCnt\n\n    def setType(self, ftype):\n        assert(ftype == &#39;d&#39; or ftype == &#39;f&#39; or ftype == &#39;free&#39;)\n        self.ftype = ftype\n\n    def setAddr(self, block):\n        self.addr = block\n\n    def getSize(self):\n        if self.addr == -1:\n            return 0\n        else:\n            return 1\n\n    def getAddr(self):\n        return self.addr\n\n    def getType(self):\n        return self.ftype\n\n    def free(self):\n        self.ftype = &#39;free&#39;\n        self.addr  = -1\n        \n\nclass fs:\n    def __init__(self, numInodes, numData):\n        self.numInodes = numInodes\n        self.numData   = numData\n        \n        self.ibitmap = bitmap(self.numInodes)\n        self.inodes  = []\n        for i in range(self.numInodes):\n            self.inodes.append(inode())\n\n        self.dbitmap = bitmap(self.numData)\n        self.data    = []\n        for i in range(self.numData):\n            self.data.append(block(&#39;free&#39;))\n    \n        # root inode\n        self.ROOT = 0\n\n        # create root directory\n        self.ibitmap.markAllocated(self.ROOT)\n        self.inodes[self.ROOT].setAll(&#39;d&#39;, 0, 2)\n        self.dbitmap.markAllocated(self.ROOT)\n        self.data[0].setType(&#39;d&#39;)\n        self.data[0].addDirEntry(&#39;.&#39;,  self.ROOT)\n        self.data[0].addDirEntry(&#39;..&#39;, self.ROOT)\n\n        # these is just for the fake workload generator\n        self.files      = []\n        self.dirs       = [&#39;/&#39;]\n        self.nameToInum = {&#39;/&#39;:self.ROOT}\n\n    def dump(self):\n        print &#39;inode bitmap &#39;, self.ibitmap.dump()\n        print &#39;inodes       &#39;,\n        for i in range(0,self.numInodes):\n            ftype = self.inodes[i].getType()\n            if ftype == &#39;free&#39;:\n                print &#39;[]&#39;,\n            else:\n                print &#39;[%s a:%s r:%d]&#39; % (ftype, self.inodes[i].getAddr(), self.inodes[i].getRefCnt()),\n        print &#39;&#39;\n        print &#39;data bitmap  &#39;, self.dbitmap.dump()\n        print &#39;data         &#39;,\n        for i in range(self.numData):\n            print self.data[i].dump(),\n        print &#39;&#39;\n\n    def makeName(self):\n        p = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;]\n        return p[int(random.random() * len(p))]\n\n    def inodeAlloc(self):\n        return self.ibitmap.alloc()\n\n    def inodeFree(self, inum):\n        self.ibitmap.free(inum)\n        self.inodes[inum].free()\n\n    def dataAlloc(self):\n        return self.dbitmap.alloc()\n\n    def dataFree(self, bnum):\n        self.dbitmap.free(bnum)\n        self.data[bnum].free()\n        \n    def getParent(self, name):\n        tmp = name.split(&#39;/&#39;)\n        if len(tmp) == 2:\n            return &#39;/&#39;\n        pname = &#39;&#39;\n        for i in range(1, len(tmp)-1):\n            pname = pname &#43; &#39;/&#39; &#43; tmp[i]\n        return pname\n\n    def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n    \n        inum = self.nameToInum[tfile]\n        print inum\n        if self.inodes[inum].refCnt == 1:\n            self.dataFree(inum)\n            self.inodeFree(inum)\n        else:\n            self.inodes[inum].decRefCnt()\n        \n        fParent = self.getParent(tfile)\n        numParent = self.nameToInum[fParent]\n        self.data[numParent].delDirEntry(tfile)\n        self.inodes[numParent].decRefCnt()\n    # YOUR CODE, 2012011402\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n\n        # finally, remove from files list\n        self.files.remove(tfile)\n        return 0\n\n    def createLink(self, target, newfile, parent):\n    # YOUR CODE, 2012011389\n        # find info about parent\n        # is there room in the parent directory?\n        # if the newfile was already in parent dir?\n        # now, find inumber of target\n        # inc parent ref count\n        # now add to directory\n        parent_inum = self.nameToInum[parent]\n        assert(self.inodes[parent_inum].getRefCnt() &lt; 32)\n        #inum = self.nameToInum[parent &#43;  newfile]\n        tinum = self.nameToInum[target]\n        index = self.inodes[parent_inum].getAddr()\n        if (newfile, tinum) in self.data[index].dirList:\n            return -1\n        self.inodes[parent_inum].incRefCnt()\n        self.inodes[tinum].incRefCnt()\n        self.data[self.inodes[parent_inum].getAddr()].addDirEntry(newfile, tinum)\n        \n    # DONE\n        return tinum\n\n    def createFile(self, parent, newfile, ftype):\n    # YOUR CODE, 2012011394\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n    # DONE\n        pnum = self.nameToInum[parent]\n        if (self.inodes[pnum].getRefCnt() &gt;= 32):\n            print &#39;The directory is full.&#39;\n            return -1\n        if (newfile in self.nameToInum):\n            print &#39;The name is not unique.&#39;\n            return -1\n        inum = self.ibitmap.alloc()\n\n        if (ftype == &#39;d&#39;):\n            dnum = self.dbitmap.alloc()\n            self.data[dnum].setType(&#39;d&#39;)\n            self.data[dnum].addDirEntry(&#39;.&#39;, inum)\n            self.data[dnum].addDirEntry(&#39;..&#39;, pnum)\n            self.inodes[inum].setAll(ftype, dnum, 2)\n        else:\n            self.inodes[inum].setAll(ftype, -1, 1)\n        \n        self.inodes[pnum].incRefCnt()\n        self.data[pnum].addDirEntry(newfile, inum)\n        \n        return inum\n\n    def writeFile(self, tfile, data):\n        print &#39;writefile(&#39; &#43; tfile &#43; &#39;, &#39; &#43; data &#43; &#39;)&#39;\n        inum = self.nameToInum[tfile]\n        curSize = self.inodes[inum].getSize()\n        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))\n\n        if curSize == 0:\n            alloc_addr = self.dataAlloc()\n            self.inodes[inum].setAddr(alloc_addr)\n            self.data[alloc_addr].setType(&#39;f&#39;)\n            self.data[alloc_addr].addData(data)\n        else :\n            print(&#39;FULL&#39;)\n\n    # YOUR CODE, YOUR ID\n        # file is full?\n        # no data blocks left\n        # write file data\n    # DONE\n        if printOps:\n            print &#39;fd=open(&#34;%s&#34;, O_WRONLY|O_APPEND); write(fd, buf, BL</pre>", "created": "2015-05-14T04:27:46Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6uswob7jl4242", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9nodoupm0u2fx", "updated": "2015-05-14T04:27:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p><p style=\"text-align:left\">2012011270 滕爽</p>\n<p style=\"text-align:left\">2012011361 董欣</p>\n<pre style=\"text-align:left\">ARG seed 0\nARG numInodes 8\nARG numData 8\nARG numRequests 10\nARG reverse False\nARG printFinal False\n\nInitial state\n\ninode bitmap  10000000\ninodes        [d a:0 r:2] [] [] [] [] [] [] [] \ndata bitmap   10000000\ndata          [(.,0) (..,0)] [] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; mkdir /g\n\ninode bitmap  11000000\ninodes        [d a:0 r:3] [d a:1 r:2] [] [] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /q\n\ninode bitmap  11100000\ninodes        [d a:0 r:4] [d a:1 r:2] [f a:-1 r:1] [] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1) (q,2)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /u\n\ninode bitmap  11110000\ninodes        [d a:0 r:5] [d a:1 r:2] [f a:-1 r:1] [f a:-1 r:1] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; link /u /x\n\ninode bitmap  11110000\ninodes        [d a:0 r:6] [d a:1 r:2] [f a:-1 r:1] [f a:-1 r:2] [] [] [] [] \ndata bitmap   11000000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (x,3)] [(.,1) (..,0)] [] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; mkdir /t\n\ninode bitmap  11111000\ninodes        [d a:0 r:7] [d a:1 r:2] [f a:-1 r:1] [f a:-1 r:2] [d a:2 r:2] [] [] [] \ndata bitmap   11100000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (x,3) (t,4)] [(.,1) (..,0)] [(.,4) (..,0)] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /g/c\n\ninode bitmap  11111100\ninodes        [d a:0 r:7] [d a:1 r:3] [f a:-1 r:1] [f a:-1 r:2] [d a:2 r:2] [f a:-1 r:1] [] [] \ndata bitmap   11100000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (x,3) (t,4)] [(.,1) (..,0) (c,5)] [(.,4) (..,0)] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; unlink /x\n\ninode bitmap  11111100\ninodes        [d a:0 r:6] [d a:1 r:3] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:-1 r:1] [] [] \ndata bitmap   11100000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4)] [(.,1) (..,0) (c,5)] [(.,4) (..,0)] [] [] [] [] [] \n\nWhich operation took place?\n\n&gt; mkdir /g/w\n\ninode bitmap  11111110\ninodes        [d a:0 r:6] [d a:1 r:4] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:-1 r:1] [d a:3 r:2] [] \ndata bitmap   11110000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4)] [(.,1) (..,0) (c,5) (w,6)] [(.,4) (..,0)] [(.,6) (..,1)] [] [] [] [] \n\nWhich operation took place?\n\n&gt; write /g/c &#39;o&#39;\n\ninode bitmap  11111110\ninodes        [d a:0 r:6] [d a:1 r:4] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:4 r:1] [d a:3 r:2] [] \ndata bitmap   11111000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4)] [(.,1) (..,0) (c,5) (w,6)] [(.,4) (..,0)] [(.,6) (..,1)] [o] [] [] [] \n\nWhich operation took place?\n\n&gt; creat /n\n\ninode bitmap  11111111\ninodes        [d a:0 r:7] [d a:1 r:4] [f a:-1 r:1] [f a:-1 r:1] [d a:2 r:2] [f a:4 r:1] [d a:3 r:2] [f a:-1 r:1] \ndata bitmap   11111000\ndata          [(.,0) (..,0) (g,1) (q,2) (u,3) (t,4) (n,7)] [(.,1) (..,0) (c,5) (w,6)] [(.,4) (..,0)] [(.,6) (..,1)] [o] [] [] [] </pre>\n<p></p>", "created": "2015-05-14T15:44:15Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i6vkh2uqu3V", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011270 滕爽</p>\n<p>2012011361 董欣</p>\n<pre>def deleteFile(self, tfile):\n        if printOps:\n            print &#39;unlink(&#34;%s&#34;);&#39; % tfile\n\n        inum = self.nameToInum[tfile]\n        if self.inodes[inum].refCnt == 1:\n            daddr = self.inodes[inum].getAddr()\n            self.dataFree(daddr)\n            self.inodeFree(inum)\n        else:\n        \tself.inodes[inum].decRefCnt()\n        pname = getParent(tfile)\n        pinum = self.nameToInum(pname)\n        paddr = self.inodes[pinum].getAddr()\n        self.inodes[pinum].decRefCnt()\n        self.data[paddr].delDirEntry(tfile)\n    # YOUR CODE, YOUR ID\n        # IF inode.refcnt ==1, THEN free data blocks first, then free inode, ELSE dec indoe.refcnt\n        # remove from parent directory: delete from parent inum, delete from parent addr\n    # DONE\n\n        # finally, remove from files list\n        self.files.remove(tfile)\n        return 0\n\n    def createLink(self, target, newfile, parent):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # if the newfile was already in parent dir?\n        # now, find inumber of target\n        # inc parent ref count\n        # now add to directory\n    # DONE\n        pinum = self.nameToInum(parent)\n        paddr = self.inodes[pinum].getAddr()\n        if self.data[paddr].dirEntryExists(newfile) == true:\n            print &#39;the newfile exists in this directory!&#39;\n            return -1;\n         tinum = self.nameToInum(target)\n         taddr  = self.inodes[tinum].getAddr()\n         self.inodes[pinum].incRefCnt()\n         self.inodes[tinum].incRefCnt()\n         self.data[inum].addDirEntry(newfile,taddr)\n        return tinum\n\n    def createFile(self, parent, newfile, ftype):\n    # YOUR CODE, YOUR ID\n        # find info about parent\n        # is there room in the parent directory?\n        # have to make sure file name is unique\n        # find free inode\n        # if a directory, have to allocate directory block for basic (., ..) info\n        # now ok to init inode properly\n        # inc parent ref count\n        # and add to directory of parent\n    # DONE\n        pinum = self.nameToInum(parent)\n        paddr = self.inodes[pinum].getAddr()\n        if self.data[paddr].dirEntryExists(newfile) == true:\n        \treturn -1\n        if(self.data[paddr].getFreeEntries() &lt;= 0):\n        \treturn -1\n        daddr = self.dbitmap.alloc()\n        iaddr = self.ibitmap.alloc()\n        self.data[paddr].addDirEntry(newfile,daddr)\n        if ftype == &#39;d&#39;:\n        \tself.inodes[iaddr].setAll(&#39;d&#39;,paddr,2)\n        \tself.data[daddr].setType(&#39;d&#39;)\n        \tself.data[daddr].addDirEntry(&#39;.&#39;,daddr)\n        \tself.data[daddr].addDirEntry(&#39;..&#39;,paddr)\n       else:\n       \tself.inodes[iaddr].setAll(&#39;f&#39;,-1,1)\n       self.inodes[paddr].incRefCnt()\n        return inum\n\n    def writeFile(self, tfile, data):\n        inum = self.nameToInum[tfile]\n        curSize = self.inodes[inum].getSize()\n        dprint(&#39;writeFile: inum:%d cursize:%d refcnt:%d&#39; % (inum, curSize, self.inodes[inum].getRefCnt()))\n        if curSize != 0:\n        \treturn -1\n        daddr =  self.dbitmap.alloc()\n        if daddr != -1:\n        \tself.data[daddr].setType(&#39;f&#39;)\n        \tself.data[daddr].addData(data)\n        else:\n        \treturn -1\n    # YOUR CODE, YOUR ID\n        # file is full?\n        # no data blocks left\n        # write file data\n    # DONE</pre>\n<p></p>", "created": "2015-05-14T15:46:06Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "feedback", "tag_good": [], "uid": "i6vkh2uqu3V", "children": [], "tag_good_arr": [], "id": "i9ocm19dpkw6we", "updated": "2015-05-14T15:46:06Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "i9ocjnhjwx278i", "updated": "2015-05-14T15:44:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>計22 梁錫豪 2012011290</p>\n<p>https://github.com/liangxh/os_exercises/blob/master/all/sfs-homework.py</p>", "created": "2015-05-16T14:39:06Z", "bucket_order": 259, "bucket_name": "Week 5/10 - 5/16", "type": "followup", "tag_good": [], "uid": "i71i9b92nrr7n4", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "i9r53kikavo4te", "updated": "2015-05-16T14:39:06Z", "config": {}}], "tag_good_arr": [], "id": "i9md3nn6o9f3jc", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 35, "num_favorites": 2, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167773333, "default_anonymity": "no"}, "error": null, "aid": "kyuzo0b97lw6pv"}