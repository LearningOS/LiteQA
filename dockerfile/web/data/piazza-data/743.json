{"result": {"history_size": 2, "folders": ["lecture11", "课堂问答"], "nr": 743, "data": {"embed_links": []}, "created": "2016-03-28T01:35:30Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i1jd60b7orl10p", "anon": "no", "when": "2016-03-28T01:35:30Z", "data": "imbbow8iqqe115", "type": "create"}, {"to": "imbbow8e4w3114", "uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-28T04:24:36Z", "data": "imbhqdacj0253k", "type": "s_answer"}, {"uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-28T05:08:55Z", "data": "imbjbcp4xa6682", "type": "s_answer_update"}, {"uid": "i0gl5kctugw3xi", "anon": "no", "when": "2016-03-28T06:59:35Z", "data": "imbn9ny5s2n553", "type": "update"}, {"to": "imbbow8e4w3114", "uid": "ikx8y1dzPrM", "anon": "no", "when": "2016-04-01T13:21:55Z", "type": "followup"}, {"to": "imbbow8e4w3114", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-03T02:36:58Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-04-03T04:50:11Z", "type": "followup"}, {"to": "imbbow8e4w3114", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-03T06:43:07Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-04-03T07:00:43Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-03T07:10:32Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "ikx8y1dzPrM", "anon": "no", "when": "2016-04-03T11:14:59Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-03T15:20:15Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "ikx8y1dzPrM", "anon": "no", "when": "2016-04-03T18:12:03Z", "type": "feedback"}, {"to": "imbbow8e4w3114", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-04-04T01:57:45Z", "type": "feedback"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0gl5kctugw3xi", "subject": "课堂提问 进程切换代码", "created": "2016-03-28T06:59:35Z", "content": "<p>/lab4/kern/process/switch.S文件中&#xff0c;</p>\n<p></p>\n<p>如何理解这段代码&#xff1f;</p>\n<p>代码中两个部分即保存现场和恢复现场是怎样对应链接的&#xff1f;</p>\n<p>C代码是如何与汇编代码对接的&#xff1f;</p>"}, {"anon": "no", "uid": "i1jd60b7orl10p", "subject": "课堂提问 进程切换代码", "created": "2016-03-28T01:35:30Z", "content": "<p>/lab4/kern/process/switch.S文件中&#xff0c;</p>\n<p></p>\n<p>如何理解这段代码&#xff1f;</p>\n<p>代码中两个部分即保存现场和恢复现场是怎样对应链接的&#xff1f;</p>"}], "type": "question", "tags": ["lecture11", "student", "课堂问答"], "tag_good": [{"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "彭晓", "endorser": {}, "admin": false, "photo": null, "id": "jvs83tawHrnQ", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "邓博文", "endorser": {}, "admin": false, "photo": null, "id": "k3dsnn1uqxy75v", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "Li Yu", "endorser": {}, "admin": false, "photo": null, "id": "k1r6zegdsqw5gg", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "unique_views": 169, "children": [{"history_size": 2, "folders": [], "data": {"embed_links": []}, "created": "2016-03-28T04:24:36Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "李云龙", "endorser": {}, "admin": false, "photo": null, "id": "i1jd60b7orl10p", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "MaYe", "endorser": {}, "admin": false, "photo": "1456107932_35.png", "id": "i0cbq1nfv1m496", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/i0cbq1nfv1m496/1456107932_35.png", "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "Wenbo Tao", "endorser": {}, "admin": false, "photo": null, "id": "hsefu0ln85f4yl", "photo_url": null, "us": false, "facebook_id": null}, {"role": "", "name": "Jason", "endorser": {}, "admin": false, "photo": null, "id": "j5hy76n8lpM", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "邓博文", "endorser": {}, "admin": false, "photo": null, "id": "k3dsnn1uqxy75v", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "Butter", "endorser": {}, "admin": false, "photo": null, "id": "k2b9m8mihv5t5", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "Li Yu", "endorser": {}, "admin": false, "photo": null, "id": "k1r6zegdsqw5gg", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "Jiaxin Lei", "endorser": {}, "admin": false, "photo": null, "id": "jxvik4qcwgc5wu", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0f9pvv0uxm6ko", "subject": "", "created": "2016-03-28T05:08:55Z", "content": "<p>先从调用switch_to处说起吧&#xff0c;</p>\n<pre>switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));</pre>\n<p>代码是这样的&#xff0c;prev是上一个进程的上下文&#xff0c;next是本进程的上下文。</p>\n<p></p>\n<p>由于这个函数是汇编写的&#xff0c;这里就涉及到x86下C语言对栈帧的使用&#xff0c;这里只介绍相关的少许知识&#xff0c;以下是C调用完switch_to以后的栈帧情况&#xff1a;</p>\n<p></p>\n<p>           --高地址</p>\n<p>----------------------------</p>\n<p>|  arg1: next-&gt;context    |</p>\n<p>----------------------------</p>\n<p>|  arg0: prev-&gt;context    |</p>\n<p>----------------------------</p>\n<p>|  return address            |    ---&gt; esp</p>\n<p>----------------------------</p>\n<p></p>\n<p>现在我们来看位于switch.S中的代码&#xff0c;第一部分是保存现场</p>\n<pre>    movl 4(%esp), %eax          # esp&#43;4的位置即为prev-&gt;context&#xff0c;这句话把这个指针放入了eax中\n    popl 0(%eax)                # 由于esp所在的位置是返回地址&#xff0c;其实在进程切换的角度来看&#xff0c;这个地址就是原进程恢复后该执行的地址&#xff0c;所以把它保存到prev-&gt;context中eip对应的位置。\n    movl %esp, 4(%eax)\t\t# 保存esp&#xff0c;之后的类似&#xff0c;这里的保存顺序很重要&#xff0c;必须按照context的结构来&#xff0c;具体见附录的context结构体描述&#xff0c;这里默认这个顺序是合理的就行了\n    movl %ebx, 8(%eax)\t\t# 保存ebx&#xff0c;以下略\n    movl %ecx, 12(%eax)\n    movl %edx, 16(%eax)\n    movl %esi, 20(%eax)\n    movl %edi, 24(%eax)\n    movl %ebp, 28(%eax)</pre>\n<p></p>\n<p>现在&#xff0c;由于popl了返回地址&#xff0c;栈帧是这样的&#xff1a;</p>\n<p></p>\n<p>        ----高地址</p>\n<p>----------------------------</p>\n<p>|  arg1: next-&gt;context    |</p>\n<p>----------------------------</p>\n<p>|  arg0: prev-&gt;context    |   ---&gt; esp</p>\n<p>----------------------------</p>\n<p></p>\n<p>所以恢复现场是这样的&#xff0c;依旧注意一下恢复顺序&#xff1a;</p>\n<pre>    movl 4(%esp), %eax          # 现在的esp&#43;4对应于next-&gt;context&#xff0c;把这个指针放入eax中\n    # 按context结构来恢复现场                         \t   \n    movl 28(%eax), %ebp\t\t\n    movl 24(%eax), %edi\n    movl 20(%eax), %esi\n    movl 16(%eax), %edx\n    movl 12(%eax), %ecx\n    movl 8(%eax), %ebx\n    movl 4(%eax), %esp</pre>\n<p></p>\n<p>这样以来现场保存和恢复工作就做好了&#xff0c;最后剩跳转到新的进程&#xff1a;</p>\n<pre>    pushl 0(%eax)               # 把next-&gt;context中的eip压入栈\n    ret</pre>\n<p></p>\n<p>注意到我们先弹出了一个原进程的返回地址&#xff0c;现在又压入了一个新进程的返回地址&#xff0c;switch_to没有破坏栈帧结构。</p>\n<p></p>\n<p></p>\n<p>附&#xff1a;</p>\n<p>context类型和在内存中的存放</p>\n<pre>struct context {\n    uint32_t eip;\n    uint32_t esp;\n    uint32_t ebx;\n    uint32_t ecx;\n    uint32_t edx;\n    uint32_t esi;\n    uint32_t edi;\n    uint32_t ebp;\n};</pre>\n<p>在内存中的存放&#xff1a;</p>\n<p>-----------------</p>\n<p>|  context.ebp |     高地址</p>\n<p>-----------------</p>\n<p>|  context.edi   | </p>\n<p>-----------------</p>\n<p>|  context.esi   | </p>\n<p>-----------------</p>\n<p>|  context.eip   | </p>\n<p>-----------------</p>\n<p>|  context.edx  | </p>\n<p>-----------------</p>\n<p>|  context.ecx  | </p>\n<p>-----------------</p>\n<p>|  context.ebx  | </p>\n<p>-----------------</p>\n<p>|  context.esp  | </p>\n<p>-----------------</p>\n<p>|  context.eip   |   低地址</p>\n<p>-----------------</p>"}, {"anon": "no", "uid": "i0f9pvv0uxm6ko", "subject": "", "created": "2016-03-28T04:24:36Z", "content": "<p>先从调用switch_to处说起吧&#xff0c;</p>\n<pre>switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));</pre>\n<p>代码是这样的&#xff0c;prev是上一个进程的上下文&#xff0c;next是本进程的上下文。</p>\n<p></p>\n<p>由于这个函数是汇编写的&#xff0c;这里就涉及到x86下C语言对栈帧的使用&#xff0c;这里只介绍相关的少许知识&#xff0c;以下是C调用完switch_to以后的栈帧情况&#xff1a;</p>\n<p>----------------------------</p>\n<p>|  arg1: next-&gt;context    |</p>\n<p>----------------------------</p>\n<p>|  arg0: prev-&gt;context    |</p>\n<p>----------------------------</p>\n<p>|  return address            |    ---&gt; esp</p>\n<p>----------------------------</p>\n<p></p>\n<p>现在我们来看位于switch.S中的代码&#xff0c;第一部分是保存现场</p>\n<pre>    movl 4(%esp), %eax          # esp&#43;4的位置即为prev-&gt;context&#xff0c;这句话把这个指针放入了eax中\n    popl 0(%eax)                # 由于esp所在的位置是返回地址&#xff0c;其实在进程切换的角度来看&#xff0c;这个地址就是原进程恢复后该执行的地址&#xff0c;所以把它保存到prev-&gt;context中eip对应的位置。\n    movl %esp, 4(%eax)\t\t# 保存esp&#xff0c;之后的类似&#xff0c;这里的保存顺序很重要&#xff0c;必须按照context的结构来&#xff0c;具体见附录的context结构体描述&#xff0c;这里默认这个顺序是合理的就行了\n    movl %ebx, 8(%eax)\t\t# 保存ebx&#xff0c;以下略\n    movl %ecx, 12(%eax)\n    movl %edx, 16(%eax)\n    movl %esi, 20(%eax)\n    movl %edi, 24(%eax)\n    movl %ebp, 28(%eax)</pre>\n<p></p>\n<p>现在&#xff0c;由于popl了返回地址&#xff0c;栈帧是这样的&#xff1a;</p>\n<p>----------------------------</p>\n<p>|  arg1: next-&gt;context    |</p>\n<p>----------------------------</p>\n<p>|  arg0: prev-&gt;context    |   ---&gt; esp</p>\n<p>----------------------------</p>\n<p></p>\n<p>所以恢复现场是这样的&#xff0c;依旧注意一下恢复顺序&#xff1a;</p>\n<pre>    movl 4(%esp), %eax          # 现在的esp&#43;4对应于next-&gt;context&#xff0c;把这个指针放入eax中\n    # 按context结构来恢复现场                         \t   \n    movl 28(%eax), %ebp\t\t\n    movl 24(%eax), %edi\n    movl 20(%eax), %esi\n    movl 16(%eax), %edx\n    movl 12(%eax), %ecx\n    movl 8(%eax), %ebx\n    movl 4(%eax), %esp</pre>\n<p></p>\n<p>这样以来现场保存和恢复工作就做好了&#xff0c;最后剩跳转到新的进程&#xff1a;</p>\n<pre>    pushl 0(%eax)               # 把next-&gt;context中的eip压入栈\n    ret</pre>\n<p></p>\n<p>注意到我们先弹出了一个原进程的返回地址&#xff0c;现在又压入了一个新进程的返回地址&#xff0c;switch_to没有破坏栈帧结构。</p>\n<p></p>\n<p></p>\n<p>附&#xff1a;</p>\n<p>context类型和在内存中的存放</p>\n<pre>struct context {\n    uint32_t eip;\n    uint32_t esp;\n    uint32_t ebx;\n    uint32_t ecx;\n    uint32_t edx;\n    uint32_t esi;\n    uint32_t edi;\n    uint32_t ebp;\n};</pre>\n<p></p>"}], "type": "s_answer", "tag_endorse_arr": ["i1jd60b7orl10p", "hdjonbiyfs62ie", "i0cbq1nfv1m496", "hsefu0ln85f4yl", "j5hy76n8lpM", "k3dsnn1uqxy75v", "k2b9m8mihv5t5", "k1r6zegdsqw5gg", "jxvik4qcwgc5wu"], "children": [], "id": "imbhqdaa1xi53i", "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>&#64;作者  问一下switch_to中对from保存的上下文是schedule()中switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));这一行代码的上下文么&#xff1f;</p>", "created": "2016-04-01T13:21:55Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "ikx8y1dzPrM", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>是的。</p>", "created": "2016-04-03T02:36:58Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "imjyj2531w4311", "updated": "2016-04-03T02:36:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>&#64;Instructor 那么有这样一个问题&#xff0c;这个进程被切换走的时候上下文中保存的esp指向调用switch_to时压栈的from参数&#xff0c;而eip指向</p>\n<p>call switch_to的下一条指令。当该进程被切换回来的时候&#xff0c;switch_to最后一行ret会使得该进程执行call switch_to的后一条指令&#xff0c;而此时如果要想使得该进程感受不到switch带来的痕迹&#xff0c;应该esp也指向switch_to压栈前的位置&#xff0c;即为from&#43;8。我认为在保存上下文的时候要有mov [eax&#43;4],esp add dword ptr [eax&#43;4] ,0x08 (不会AT&amp;T,写Intel格式了)。</p>", "created": "2016-04-03T11:14:59Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikx8y1dzPrM", "children": [], "tag_good_arr": [], "id": "imkh18boouu3qi", "updated": "2016-04-03T11:14:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在switch_to中esp只受压栈和出栈操作的影响&#xff0c;没有你说的这个差值。你可以单步跟踪一下&#xff0c;进程切换的上下文保存的context结构中&#xff0c;eip到底在哪。</p>\n<p></p>\n<p>如果可能&#xff0c;请把你的跟踪结果附在本帖后面&#xff0c;并描述你的理解。</p>", "created": "2016-04-03T15:20:15Z", "bucket_order": 249, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "imkpsnhqih3gn", "updated": "2016-04-03T15:20:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>&#64;instructor 我看了一下反汇编然后跟踪了一下&#xff0c;现在理解是这样的&#xff1a;</p>\n<p>1.context.eip是call switch_to的下一条汇编指令这个想的是对的。</p>\n<p>2.context.esp是caller的堆栈的调用switch_to之前的位置&#xff0c;也是caller调用switch_to之后的esp的位置&#xff0c;因为在整个函数</p>\n<p>调用过程中&#xff0c;esp是不发生变化的&#xff0c;参数的传递是改变 (offset)%ebp静态实现的&#xff0c;也就是esp一开始就下降足够大的空间&#xff0c;在esp</p>\n<p>的紧挨的上方的内存修改数据达到传递参数的目的。在switch_to里面由于pop了一次&#xff0c;将sub 4的esp增加4&#xff0c;达到switch_to返回后</p>\n<p>的状态&#xff0c;因此在进程切换回来的时候&#xff0c;eip,esp均为好像从switch_to返回后一样的状态&#xff0c;其他寄存器也都保持了switch_to</p>\n<p>调用前的状态&#xff0c;只有eax会发生改变。</p>\n<p>那么有这样一个问题&#xff0c;如果eax切换前保存了某些重要信息而切换回来的时候变化了&#xff0c;就会发生问题&#xff0c;但是在ucore汇编代码中不会</p>\n<p>出现这种问题&#xff0c;因为切换回来后eax被赋值了。</p>\n<p></p>", "created": "2016-04-03T18:12:03Z", "bucket_order": 249, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "ikx8y1dzPrM", "children": [], "tag_good_arr": [], "id": "imkvxkkmcj44s6", "updated": "2016-04-03T18:12:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>关于堆栈的分析应该是较为全面和准确的。</p>\n<p></p>\n<p>关于eax的事&#xff0c;执行这段代码时&#xff0c;系统已在内核&#xff0c;应该保护的寄存器都已做过保存了。</p>", "created": "2016-04-04T01:57:45Z", "bucket_order": 249, "bucket_name": "Week 4/3 - 4/9", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "imlckgtojpc5ze", "updated": "2016-04-04T01:57:45Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "imhqor8uqa93vk", "updated": "2016-04-01T13:21:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>话说弹出和压入返回地址不是在一个栈上做的吧&#xff1f;</p>\n<p>注意到你在压入新返回地址时修改过esp了&#xff0c;栈应该切换过才对&#xff1f;</p>", "created": "2016-04-03T04:50:11Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>压栈对应当前运行进程&#xff0c;出栈对应下一个运行进程。</p>\n<p></p>\n<p>你可以把这两进程的变化理解成&#xff0c;当前运行进程的压栈和它在下一次被调度后再次变成当前进程时的情况。这两次操作的栈就是同一个了。这样应该会好理解一些。</p>", "created": "2016-04-03T06:43:07Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "imk7blq5zpwl5", "updated": "2016-04-03T06:43:07Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>嗯这个我明白了&#xff0c;以及switch这个函数到底是在哪个进程的内核栈做的&#xff1f;</p>\n<p>注意到proc_run在switch之前是lcr3以及改过tss.esp0的&#xff0c;这个tss的内核栈和当前运行过程中的内核栈有关系吗&#xff1f;</p>", "created": "2016-04-03T07:00:43Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [], "tag_good_arr": [], "id": "imk7y8ulpw1sk", "updated": "2016-04-03T07:00:43Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>你可以在这几个函数中通过查询当前的CR3和堆栈状态来了解当前进程和内核栈的信息&#xff0c;从而确定进程切换指令的位置和影响。</p>\n<p></p>\n<p>如果有兴趣&#xff0c;把你的跟踪结果附在本帖后面&#xff0c;并描述你的理解。</p>", "created": "2016-04-03T07:10:32Z", "bucket_order": 250, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [], "tag_good_arr": [], "id": "imk8avb164d53d", "updated": "2016-04-03T07:10:32Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "imk3adshq594ko", "updated": "2016-04-03T04:50:11Z", "config": {}}], "tag_good_arr": ["hdjonbiyfs62ie", "jvs83tawHrnQ", "k3dsnn1uqxy75v", "k1r6zegdsqw5gg"], "no_answer": 0, "id": "imbbow8e4w3114", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 10, "num_favorites": 4, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168384301, "default_anonymity": "no"}, "error": null, "aid": "kyv013qlwsx7o6"}