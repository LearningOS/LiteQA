{"result": {"history_size": 2, "folders": ["lab1"], "nr": 1271, "data": {"embed_links": []}, "created": "2019-03-06T10:11:00Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "stud", "data": "jsx1kvexr411n", "type": "create", "when": "2019-03-06T10:11:00Z", "uid_a": "a_0"}, {"anon": "full", "data": "jsx1lafdzbbhk", "type": "update", "when": "2019-03-06T10:11:19Z", "uid_a": "a_1"}, {"anon": "no", "uid": "jshne0d1gvw4mr", "to": "jsx1kveset21l", "type": "followup", "when": "2019-03-06T23:52:44Z"}, {"anon": "no", "uid": "isu0wqaoff5125", "to": "jsx1kveset21l", "type": "followup", "when": "2019-03-08T00:29:40Z"}, {"anon": "no", "uid": "it31mpur8e04v9", "to": "jsx1kveset21l", "type": "followup", "when": "2019-03-09T07:42:07Z"}], "bucket_name": "Today", "history": [{"anon": "full", "uid_a": "a_1", "subject": "一些特殊的C语言语法", "created": "2019-03-06T10:11:19Z", "content": "<p>ucore的代码中有很多之前不常用的c语言写法&#xff0c;例如</p>\n<pre>static int (*syscalls[])(uint32_t arg[]) = {\n    [SYS_exit]              sys_exit,\n    [SYS_fork]              sys_fork,\n    [SYS_wait]              sys_wait,\n    [SYS_exec]              sys_exec,\n    [SYS_yield]             sys_yield,\n    [SYS_kill]              sys_kill,\n    [SYS_getpid]            sys_getpid,\n    [SYS_putc]              sys_putc,\n    [SYS_pgdir]             sys_pgdir,\n    [SYS_gettime]           sys_gettime,\n    [SYS_lab6_set_priority] sys_lab6_set_priority,\n    [SYS_sleep]             sys_sleep,\n    [SYS_open]              sys_open,\n    [SYS_close]             sys_close,\n    [SYS_read]              sys_read,\n    [SYS_write]             sys_write,\n    [SYS_seek]              sys_seek,\n    [SYS_fstat]             sys_fstat,\n    [SYS_fsync]             sys_fsync,\n    [SYS_getcwd]            sys_getcwd,\n    [SYS_getdirentry]       sys_getdirentry,\n    [SYS_dup]               sys_dup,\n};</pre>\n<p>想问在哪里比较适合用来寻找说明呢。</p>"}, {"anon": "stud", "uid_a": "a_0", "subject": "一些特殊的C语言语法", "created": "2019-03-06T10:11:00Z", "content": "<p>ucore的代码中有很多之前不常用的c语言写法&#xff0c;例如</p>\n<pre>static int (*syscalls[])(uint32_t arg[]) = {\n    [SYS_exit]              sys_exit,\n    [SYS_fork]              sys_fork,\n    [SYS_wait]              sys_wait,\n    [SYS_exec]              sys_exec,\n    [SYS_yield]             sys_yield,\n    [SYS_kill]              sys_kill,\n    [SYS_getpid]            sys_getpid,\n    [SYS_putc]              sys_putc,\n    [SYS_pgdir]             sys_pgdir,\n    [SYS_gettime]           sys_gettime,\n    [SYS_lab6_set_priority] sys_lab6_set_priority,\n    [SYS_sleep]             sys_sleep,\n    [SYS_open]              sys_open,\n    [SYS_close]             sys_close,\n    [SYS_read]              sys_read,\n    [SYS_write]             sys_write,\n    [SYS_seek]              sys_seek,\n    [SYS_fstat]             sys_fstat,\n    [SYS_fsync]             sys_fsync,\n    [SYS_getcwd]            sys_getcwd,\n    [SYS_getdirentry]       sys_getdirentry,\n    [SYS_dup]               sys_dup,\n};</pre>\n<p>想问在哪里比较适合用来寻找说明呢。</p>"}], "type": "question", "tags": ["lab1", "student", "unanswered"], "tag_good": [], "unique_views": 181, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>请参考 <a href=\"https://en.cppreference.com/w/c/language/array_initialization\">https://en.cppreference.com/w/c/language/array_initialization</a> 中的 designator 相关内容</p>", "created": "2019-03-06T23:52:44Z", "bucket_order": 118, "bucket_name": "Week 3/3 - 3/9", "type": "followup", "tag_good": [{"role": "student", "name": "vanj", "endorser": {}, "admin": false, "photo": null, "id": "kker3fspnhl7go", "photo_url": null, "us": false, "facebook_id": null}], "uid": "jshne0d1gvw4mr", "children": [], "tag_good_arr": ["kker3fspnhl7go"], "no_answer": 0, "id": "jsxuxmzv8ny2o", "updated": "2019-03-06T23:52:44Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p>\n<pre>int (*syscalls[])(uint32_t arg[])</pre>\n<p>上述代码是声明了一个函数指针的数组&#xff0c;该类型的函数传入一个uint32_t数组&#xff0c;返回int。</p>\n<p></p>\n<p>之后是在对数组进行初始化&#xff0c;指定了每个元素的下标。</p>\n<p></p>\n<p>请阅读C标准&#xff0c;以及https://cdecl.org</p>\n<p></p>\n<p>膜杰哥</p>", "created": "2019-03-08T00:29:40Z", "bucket_order": 118, "bucket_name": "Week 3/3 - 3/9", "type": "followup", "tag_good": [], "uid": "isu0wqaoff5125", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "jszboz4fdq91m1", "updated": "2019-03-08T00:29:40Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><md><br />如果需要简单的解释, 可以搜索 C designator / initializer 之类的. 一个简单的例子是 (应该你能看懂)<br /></md>\n</p><pre>#include &lt;stdio.h&gt;\n\nstruct Foo {\n  struct {\n    int a;\n    char b;\n  } a[2];\n  char b;\n};\n\nstruct Foo a[2] = {\n  [0].b = 23, \n  [1].a[1].b = 64\n};\n\nint main() {\n  printf(&#34;%d %d\\n&#34;, a[0].b, a[1].a[1].b); // 23 64\n}</pre>\n<md><br />当然最权威的是 C 标准, 在 http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf. 我推荐的看 C 标准的方法是, 先读语法, 然后把你的问题对应到语法里面 (非终结符这种), 然后再去 section 6 里找对应的章节.<br /><br />如果你读了 C 标准, 你会发现, ucore 使用的 GCC 拓展语法, 是非标准语法. 要写成标准的语法, syscall 还缺一个等号.<br /></md><p></p>", "created": "2019-03-09T07:42:07Z", "bucket_order": 118, "bucket_name": "Week 3/3 - 3/9", "type": "followup", "tag_good": [{"role": "student", "name": "vanj", "endorser": {}, "admin": false, "photo": null, "id": "kker3fspnhl7go", "photo_url": null, "us": false, "facebook_id": null}], "uid": "it31mpur8e04v9", "children": [], "tag_good_arr": ["kker3fspnhl7go"], "no_answer": 0, "id": "jt16kynobr830d", "updated": "2019-03-09T07:42:07Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "jsx1kveset21l", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 5, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169596718, "default_anonymity": "no"}, "error": null, "aid": "kyv0r38ujhi156"}