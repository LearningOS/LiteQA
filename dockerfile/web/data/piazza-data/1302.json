{"result": {"folders": ["lecture9"], "nr": 1302, "data": {"embed_links": []}, "created": "2019-04-07T01:25:19Z", "bucket_order": 3, "no_answer_followup": 1, "change_log": [{"anon": "no", "uid": "jshndy9fxmm4as", "data": "ju68w3gsahy3l9", "type": "create", "when": "2019-04-07T01:25:19Z"}, {"anon": "no", "uid": "jswzkfg0lhKI", "data": "ju6cleg0dj2e7", "to": "ju68w3gpma33l8", "type": "s_answer", "when": "2019-04-07T03:08:58Z"}, {"anon": "no", "uid": "jswzkfg0lhKI", "data": "ju6cqmpu9kv47q", "type": "s_answer_update", "when": "2019-04-07T03:13:02Z"}, {"anon": "no", "uid": "jshndy9fxmm4as", "to": "ju68w3gpma33l8", "type": "followup", "when": "2019-04-07T07:03:26Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "jshndy9fxmm4as", "subject": "关于课件上改进的Clock算法的动画演示", "created": "2019-04-07T01:25:19Z", "content": "按照课件上所说&#xff0c;改进的Clock算法除了需要多判断修改位之外应该和Clock算法一样。而Clock算法的指针应该始终指向最先调入的算法&#xff08;和FIFO一样&#xff09;。但是演示动画中第5次访存之后指针却指向了d&#xff08;这时最先调入的页面仍然是a&#xff09;"}], "type": "question", "tags": ["lecture9", "student"], "tag_good": [], "unique_views": 164, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2019-04-07T03:08:58Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "289212182@qq.com", "endorser": {}, "admin": false, "photo": "1551463481_35.png", "id": "j7f1tr6wJNH", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/j7f1tr6wJNH/1551463481_35.png", "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "id": "ju6clefv5b92e6", "history": [{"anon": "no", "uid": "jswzkfg0lhKI", "subject": "", "created": "2019-04-07T03:13:02Z", "content": "<p>我认为clock算法的指针是指向“swap_in的新页的list_next”&#xff0c;并不是“最先调入的页”。</p>\n<p>而且extended_clock算法的好处就在于它尽量不替换修改过的页。</p>\n<p>对于mooc中的演示动画&#xff0c;正是因为引入了两个修改位&#xff0c;所以c被替换出去&#xff0c;指针指向了d而不是a&#xff1b;</p>\n<p>如果对相同的访问队列使用clock算法&#xff0c;a就会被替换出去&#xff0c;指针就会指向b。</p>\n<p></p>\n<p>补充&#xff1a;wikipedia中对clock算法的描述</p>\n<p>Clock is a more efficient version of FIFO than Second-chance because pages don&#39;t have to be constantly pushed to the back of the list, but it performs the same general function as Second-Chance. The clock algorithm keeps a circular list of pages in memory, with the &#34;hand&#34; (iterator) pointing to the last examined page frame in the list. When a page fault occurs and no empty frames exist, then the R (referenced) bit is inspected at the hand&#39;s location. <strong>If R is 0, the new page is put in place of the page the &#34;hand&#34; points to, and the hand is advanced one position.</strong> Otherwise, the R bit is cleared, then the clock hand is incremented and the process is repeated until a page is replaced.</p>\n<p>来源&#xff1a;https://en.wikipedia.org/wiki/Page_replacement_algorithm#Clock</p>"}, {"anon": "no", "uid": "jswzkfg0lhKI", "subject": "", "created": "2019-04-07T03:08:58Z", "content": "<p>我认为clock算法的指针是指向“swap_in的新页的list_next”&#xff0c;并不是“最先调入的页”。</p>\n<p>而且extended_clock算法的好处就在于它尽量不替换修改过的页。</p>\n<p>对于mooc中的演示动画&#xff0c;正是因为引入了两个修改位&#xff0c;所以c被替换出去&#xff0c;指针指向了d而不是a&#xff1b;</p>\n<p>如果对相同的访问队列使用clock算法&#xff0c;a就会被替换出去&#xff0c;指针就会指向b。</p>"}], "type": "s_answer", "tag_endorse_arr": ["j7f1tr6wJNH"], "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "那就是课件上对clock算法的描述错了呗。我也觉得指向下一页更好一些。", "created": "2019-04-07T07:03:26Z", "bucket_order": 56, "bucket_name": "Week 3/31 - 4/6", "type": "followup", "tag_good": [], "uid": "jshndy9fxmm4as", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "ju6kyxboytk1ol", "updated": "2019-04-07T07:03:26Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "ju68w3gpma33l8", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 2, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169693759, "default_anonymity": "no"}, "error": null, "aid": "kyv0t64fdoa2ot"}