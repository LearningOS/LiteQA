{"result": {"folders": ["lab1", "lecture2", "2017"], "nr": 91, "data": {"embed_links": []}, "created": "2015-03-12T15:00:55Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "stud", "when": "2015-03-12T15:00:55Z", "data": "i76a998dh031fp", "type": "create", "uid_a": "a_0"}, {"anon": "stud", "when": "2015-03-12T15:02:44Z", "data": "i76ablsrcrf5ai", "type": "update", "uid_a": "a_0"}, {"to": "i76a9989saq1fo", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-12T15:34:40Z", "data": "i76bgo28cdln6", "type": "i_answer"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-12T15:38:12Z", "data": "i76bl7vsoz06kc", "type": "i_answer_update"}, {"to": "i76a9989saq1fo", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-12T15:46:04Z", "type": "followup"}, {"to": "i76a9989saq1fo", "anon": "stud", "when": "2015-03-12T15:50:34Z", "type": "feedback", "uid_a": "a_0"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-12T15:52:32Z", "data": "i76c3msf80121h", "type": "i_answer_update"}, {"to": "i76a9989saq1fo", "uid": "hcrrjuyequh4bt", "anon": "no", "when": "2015-03-12T15:53:24Z", "type": "followup"}, {"anon": "stud", "data": "j1f4nt8r6994rv", "type": "update", "when": "2017-04-12T15:25:22Z", "uid_a": "a_1"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "je7zmhxjzr53ju", "type": "update", "when": "2018-03-01T04:06:10Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "关于启动后的地址", "created": "2018-03-01T04:06:09Z", "content": "<p>看了很多遍视频&#xff0c;感觉还是不太清楚有关CS.base CS.selector EIP相关的变化。</p>\n<p><a href=\"http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html\">http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html</a></p>\n<p>这里说&#xff0c;启动时除非机器有大于4GB的RAM&#xff0c;否则机器会通过特殊的方式跳到0xfffffff0&#xff1b;怎么理解&#xff1f;如果大于4GB的RAM&#xff08;甚至是多片RAM的情况又是怎么办&#xff09;&#xff0c;那么长跳转指令就在4GB下面一点点&#xff1f;</p>\n<p><a href=\"http://wiki.osdev.org/System_Initialization_%28x86%29\">http://wiki.osdev.org/System_Initialization_%28x86%29</a></p>\n<p>这里说&#xff0c;BIOS第一步识别RAM&#xff0c;那么之前机器是怎么找到位置的?</p>\n<p><a href=\"http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc\">http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc</a></p>\n<p>这里说CS.base在第一次跳转以后&#xff0c;由于不能完成长跳转&#xff0c;CS.base = CS.selector * 16 = 0xf0000;</p>\n<p>第3次的视频在这部分好像不太对&#xff0c;在Real Mode下并不是CS.selector*16&#43;EIP.</p>\n<p>还有&#xff0c;这样的话ROM在RAM中的分布是不是变成了分开的2块&#xff1f;</p>\n<p></p>"}, {"anon": "stud", "uid_a": "a_1", "subject": "关于启动后的地址", "created": "2017-04-12T15:25:22Z", "content": "<p>看了很多遍视频&#xff0c;感觉还是不太清楚有关CS.base CS.selector EIP相关的变化。</p>\n<p><a href=\"http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html\">http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html</a></p>\n<p>这里说&#xff0c;启动时除非机器有大于4GB的RAM&#xff0c;否则机器会通过特殊的方式跳到0xfffffff0&#xff1b;怎么理解&#xff1f;如果大于4GB的RAM&#xff08;甚至是多片RAM的情况又是怎么办&#xff09;&#xff0c;那么长跳转指令就在4GB下面一点点&#xff1f;</p>\n<p><a href=\"http://wiki.osdev.org/System_Initialization_%28x86%29\">http://wiki.osdev.org/System_Initialization_%28x86%29</a></p>\n<p>这里说&#xff0c;BIOS第一步识别RAM&#xff0c;那么之前机器是怎么找到位置的?</p>\n<p><a href=\"http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc\">http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc</a></p>\n<p>这里说CS.base在第一次跳转以后&#xff0c;由于不能完成长跳转&#xff0c;CS.base = CS.selector * 16 = 0xf0000;</p>\n<p>第3次的视频在这部分好像不太对&#xff0c;在Real Mode下并不是CS.selector*16&#43;EIP.</p>\n<p>还有&#xff0c;这样的话ROM在RAM中的分布是不是变成了分开的2块&#xff1f;</p>\n<p></p>"}, {"anon": "stud", "uid_a": "a_0", "subject": "关于启动后的地址", "created": "2015-03-12T15:02:44Z", "content": "<p>看了很多遍视频&#xff0c;感觉还是不太清楚有关CS.base CS.selector EIP相关的变化。</p>\n<p><a href=\"http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html\">http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html</a></p>\n<p>这里说&#xff0c;启动时除非机器有大于4GB的RAM&#xff0c;否则机器会通过特殊的方式跳到0xfffffff0&#xff1b;怎么理解&#xff1f;如果大于4GB的RAM&#xff08;甚至是多片RAM的情况又是怎么办&#xff09;&#xff0c;那么长跳转指令就在4GB下面一点点&#xff1f;</p>\n<p><a href=\"http://wiki.osdev.org/System_Initialization_%28x86%29\">http://wiki.osdev.org/System_Initialization_%28x86%29</a></p>\n<p>这里说&#xff0c;BIOS第一步识别RAM&#xff0c;那么之前机器是怎么找到位置的?</p>\n<p><a href=\"http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc\">http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc</a></p>\n<p>这里说CS.base在第一次跳转以后&#xff0c;由于不能完成长跳转&#xff0c;CS.base = CS.selector * 16 = 0xf0000;</p>\n<p>第3次的视频在这部分好像不太对&#xff0c;在Real Mode下并不是CS.selector*16&#43;EIP.</p>\n<p>还有&#xff0c;这样的话ROM在RAM中的分布是不是变成了分开的2块&#xff1f;</p>\n<p></p>"}, {"anon": "stud", "uid_a": "a_0", "subject": "关于启动后的地址", "created": "2015-03-12T15:00:55Z", "content": "<p>看了很多遍视频&#xff0c;感觉还是不太清楚有关CS.base CS.selector EIP相关的变化。</p>\n<p><a href=\"http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html\">http://www.freebsd.org/doc/en/books/arch-handbook/boot-bios.html</a></p>\n<p>这里说&#xff0c;启动时除非机器有大于4GB的RAM&#xff0c;否则机器会通过特殊的方式跳到0xfffffff0&#xff1b;怎么理解&#xff1f;如果大于4GB的RAM&#xff08;甚至是多片RAM的情况又是怎么办&#xff09;&#xff0c;那么长跳转指令就在4GB下面一点点&#xff1f;</p>\n<p><a href=\"http://wiki.osdev.org/System_Initialization_%28x86%29\">http://wiki.osdev.org/System_Initialization_%28x86%29</a></p>\n<p>这里说&#xff0c;BIOS第一步识别RAM&#xff0c;那么之前机器是怎么找到位置的?</p>\n<p><a href=\"http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc\">http://stackoverflow.com/questions/7804724/how-is-the-bios-rom-mapped-into-address-space-on-pc</a></p>\n<p>这里说CS.base在第一次跳转以后&#xff0c;由于不能完成长跳转&#xff0c;CS.base = CS.selector * 16 = 0xf0000;</p>\n<p>第3次的视频在这部分好像不太对&#xff0c;在Real Mode下并不是CS.selector*16&#43;EIP.</p>\n<p></p>"}], "type": "note", "tags": ["2017", "lab1", "lecture2", "student"], "tag_good": [{"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 256, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2015-03-12T15:34:40Z", "bucket_order": 3, "tag_endorse": [{"role": "", "name": "金嘉宇2012080059", "endorser": {}, "admin": false, "photo": null, "id": "i6ub5at2geM", "photo_url": null, "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}], "bucket_name": "Today", "id": "i76bgo214g4n5", "history": [{"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "", "created": "2015-03-12T15:52:32Z", "content": "<p>对于第一个问题&#xff0c;希望以最少的语言来普及CS.base&#xff0c;CS.selector&#xff0c;EIP&#xff0c;线性地址&#xff0c;物理地址等这些概念和关系&#xff1a;</p>\n<p></p>\n<p>专用寄存器&#xff1a;</p>\n<p>EIP&#xff08;指令指针&#xff09;&#xff1a;保存了下一条指令的偏移地址&#xff08;offset address&#xff09;</p>\n<p>段寄存器&#xff1a;</p>\n<p>CS&#xff08;代码段&#xff09;实模式下&#xff1a;可表示64KB范围&#xff1b;保护模式下&#xff1a;可表示4GB范围</p>\n<p>被用来定位下一条指令的基地址&#xff08;BaseAddress&#xff09;</p>\n<p></p>\n<p>线性地址&#xff1a;</p>\n<p>在没有使能页机制的80386保护模式下&#xff0c;线性地址就是物理地址</p>\n<p></p>\n<p>CPU将要执行的代码的线性地址的简要表示&#xff1a;</p>\n<p>CS:EIP 形成代码的线性地址&#xff1d;段基址&#xff08;BaseAddress&#xff09;&#xff0b;偏移地址 &#xff08;offset address&#xff09;</p>\n<p></p>\n<p>CPU将要执行的代码的线性地址的详细表示&#xff1a;</p>\n<p>代码段CS:线性地址EIP =&#xff08;CS selector指向的segment descriptor的BaseAddress域&#xff09;&#43; EIP&#xff08;即偏移地址&#xff0c;offset address&#xff09;</p>\n<p></p>\n<p>选择子的解释&#xff1a;</p>\n<p>selector的中文名字是选择子&#xff0c;占16位&#xff0c;由三部分组成 index(15..3), TI (2), RPL(1..0) </p>\n<p>(1) 索引值(index)&#xff1a;给出了描述符在GDT或LDT中的索引项号&#xff1b;</p>\n<p>(2) 表指示标志TI(Table Index)&#xff1a;TI=0 描述符在GDT中,TI&#xff1d;1 描述符在LDT&#xff08;ucore不用&#xff09;</p>\n<p>(3) 请求特权级RPL(Requested Privilege Level)&#xff1a;0&#xff0c;1&#xff0c;2&#xff0c;3三个特权级。</p>\n<p>选择子的内容会放到段寄存器中&#xff0c;其index值被用于作为GDT&#xff08;全局描述符表&#xff0c;简称段表&#xff09;的索引值&#xff0c;从而可以找到段描述符</p>\n<p></p>\n<p>段描述符的解释&#xff1a;</p>\n<p>segment descriptor的中文是段描述符&#xff0c;它主要记录了内存段的起始地址(BaseAddress)&#xff0c;长度和访问权限。</p>\n<p></p>\n<p>GDT的解释&#xff1a;</p>\n<p>GDT的中文是全局描述符表&#xff0c;它位于内存中&#xff0c;主要由各种段描述符组成的一个数组。</p>\n<p></p>\n<p>CS.base:</p>\n<p>CS中不可见部分的BaseAddress&#xff0c;它其实是缓存了CS所指向的段描述符中的BaseAddress</p>\n<p></p>\n<p>CS.limit:</p>\n<p>CS中不可见部分的limit&#xff08;段长度&#xff09;&#xff0c;它其实是缓存了CS所指向的段描述符中的limit&#xff08;段长度&#xff09;</p>\n<p></p>\n<p>结论&#xff1a;</p>\n<p>在保护模式下&#xff0c;80386CPU根据CS和EIP的内容&#xff0c;经过把位于CS中的selector中的index作为索引&#xff0c;查找GDT中对应的segment descriptor&#xff0c;再把segment descriptor中的BaseAddress取出&#xff0c;做一个加法&#xff1a;BaseAddress&#xff0b;EIP&#xff0c;形成了线性地址&#xff0c;在没有使能页机制的情况下&#xff0c;这就是最终的物理地址了。</p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "", "created": "2015-03-12T15:38:12Z", "content": "<p>对于第一个问题&#xff0c;希望以最少的语言来普及CS.base&#xff0c;CS.selector&#xff0c;EIP&#xff0c;线性地址&#xff0c;物理地址等这些概念和关系&#xff1a;</p>\n<p></p>\n<p>专用寄存器&#xff1a;</p>\n<p>EIP&#xff08;指令指针&#xff09;&#xff1a;保存了下一条指令的偏移地址&#xff08;offset address&#xff09;</p>\n<p>段寄存器&#xff1a;</p>\n<p>CS&#xff08;代码段&#xff09;实模式下&#xff1a;可表示64KB范围&#xff1b;保护模式下&#xff1a;可表示4GB范围</p>\n<p>被用来定位下一条指令的基地址&#xff08;BaseAddress&#xff09;</p>\n<p></p>\n<p>线性地址&#xff1a;</p>\n<p>在没有使能页机制的80386保护模式下&#xff0c;线性地址就是物理地址</p>\n<p></p>\n<p>CPU将要执行的代码的线性地址的简要表示&#xff1a;</p>\n<p>CS:EIP 形成代码的线性地址&#xff1d;段基址&#xff08;BaseAddress&#xff09;&#xff0b;偏移地址 &#xff08;offset address&#xff09;</p>\n<p></p>\n<p>CPU将要执行的代码的线性地址的详细表示&#xff1a;</p>\n<p>代码段CS:线性地址EIP =&#xff08;CS selector指向的segment descriptor的BaseAddress域&#xff09;&#43; EIP&#xff08;即偏移地址&#xff0c;offset address&#xff09;</p>\n<p></p>\n<p>选择子的解释&#xff1a;</p>\n<p>selector的中文名字是选择子&#xff0c;占16位&#xff0c;由三部分组成 index(15..3), TI (2), RPL(1..0) </p>\n<p>(1) 索引值(index)&#xff1a;给出了描述符在GDT或LDT中的索引项号&#xff1b;</p>\n<p>(2) 表指示标志TI(Table Index)&#xff1a;TI=0 描述符在GDT中,TI&#xff1d;1 描述符在LDT&#xff08;ucore不用&#xff09;</p>\n<p>(3) 请求特权级RPL(Requested Privilege Level)&#xff1a;0&#xff0c;1&#xff0c;2&#xff0c;3三个特权级。</p>\n<p>选择子的内容会放到段寄存器中&#xff0c;其index值被用于作为GDT&#xff08;全局描述符表&#xff0c;简称段表&#xff09;的索引值&#xff0c;从而可以找到段描述符</p>\n<p></p>\n<p>段描述符的解释&#xff1a;</p>\n<p>segment descriptor的中文是段描述符&#xff0c;它主要记录了内存段的起始地址(BaseAddress)&#xff0c;长度和访问权限。</p>\n<p></p>\n<p>GDT的解释&#xff1a;</p>\n<p>GDT的中文是全局描述符表&#xff0c;它位于内存中&#xff0c;主要由各种段描述符组成的一个数组。</p>\n<p></p>\n<p>结论&#xff1a;</p>\n<p>在保护模式下&#xff0c;80386CPU根据CS和EIP的内容&#xff0c;经过把位于CS中的selector中的index作为索引&#xff0c;查找GDT中对应的segment descriptor&#xff0c;再把segment descriptor中的BaseAddress取出&#xff0c;做一个加法&#xff1a;BaseAddress&#xff0b;EIP&#xff0c;形成了线性地址&#xff0c;在没有使能页机制的情况下&#xff0c;这就是最终的物理地址了。</p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "", "created": "2015-03-12T15:34:40Z", "content": "<p>对于第一个问题&#xff0c;希望以最少的语言来普及CS.base&#xff0c;CS.selector&#xff0c;EIP&#xff0c;线性地址&#xff0c;物理地址等这些概念和关系&#xff1a;</p>\n<p></p>\n<p>专用寄存器&#xff1a;</p>\n<p>EIP&#xff08;指令指针&#xff09;&#xff1a;保存了下一条指令的偏移地址&#xff08;offset address&#xff09;</p>\n<p>段寄存器&#xff1a;</p>\n<p>CS&#xff08;代码段&#xff09;实模式下&#xff1a;可表示64KB范围&#xff1b;保护模式下&#xff1a;可表示4GB范围</p>\n<p>被用来定位下一条指令的基地址&#xff08;BaseAddress&#xff09;</p>\n<p></p>\n<p>线性地址&#xff1a;</p>\n<p>在没有使能页机制的80386保护模式下&#xff0c;线性地址就是物理地址</p>\n<p></p>\n<p>CPU将要执行的代码的线性地址的简要表示&#xff1a;</p>\n<p>CS:EIP 形成代码的线性地址&#xff1d;段基址&#xff08;BaseAddress&#xff09;&#xff0b;偏移地址 &#xff08;offset address&#xff09;</p>\n<p></p>\n<p>CPU将要执行的代码的线性地址的详细表示&#xff1a;</p>\n<p>代码段CS:线性地址EIP =&#xff08;CS selector指向的segment descriptor的BaseAddress域&#xff09;&#43; EIP&#xff08;即偏移地址&#xff0c;offset address&#xff09;</p>\n<p></p>\n<p>选择子的解释&#xff1a;</p>\n<p>selector的中文名字是选择子&#xff0c;占16位&#xff0c;由三部分组成 index(15..3), TI (2), RPL(1..0) </p>\n<p>(1) 索引值(index)&#xff1a;给出了描述符在GDT或LDT中的索引项号&#xff1b;</p>\n<p>(2) 表指示标志TI(Table Index)&#xff1a;TI=0 描述符在GDT中,TI&#xff1d;1 描述符在LDT&#xff08;ucore不用&#xff09;</p>\n<p>(3) 请求特权级RPL(Requested Privilege Level)&#xff1a;0&#xff0c;1&#xff0c;2&#xff0c;3三个特权级。</p>\n<p>选择子的内容会放到段寄存器中&#xff0c;其index值被用于作为GDT&#xff08;全局描述符表&#xff0c;简称段表&#xff09;的索引值&#xff0c;从而可以找到段描述符</p>\n<p></p>\n<p>段描述符的解释&#xff1a;</p>\n<p>segment descriptor的中文是段描述符&#xff0c;它主要记录了内存段的起始地址(BaseAddress)&#xff0c;长度和访问权限。</p>\n<p></p>\n<p>结论&#xff1a;</p>\n<p>在保护模式下&#xff0c;80386CPU根据CS和EIP的内容&#xff0c;经过把位于CS中的selector中的index作为索引&#xff0c;查找GDT中对应的segment descriptor&#xff0c;再把segment descriptor中的BaseAddress取出&#xff0c;做一个加法&#xff1a;BaseAddress&#xff0b;EIP&#xff0c;形成了线性地址&#xff0c;在没有使能页机制的情况下&#xff0c;这就是最终的物理地址了。</p>\n<p></p>\n<p></p>"}], "type": "i_answer", "tag_endorse_arr": ["i6ub5at2geM"], "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>对于第二个问题&#xff1a;</p>\n<p>简单地说&#xff0c;对于现在的PC机&#xff08;即基于80386以后的CPU的PC&#xff09;,硬件加电后&#xff0c;就定死了&#xff0c;跳到0xfffffff0处开始执行&#xff0c;完成整个BIOS的执行&#xff0c;即进行硬件自检。这不需要有4GB RAM存在才行。PC机只有256MB RAM&#xff0c;也是一样跳到0xfffffff0处开始执行。对于大于&#xff14;GB RAM的32位CPU的软硬件处理方式&#xff0c;超出了本课的知识范畴。如确实感兴趣&#xff0c;请看Intel的硬件手册有关PAE, PSE, x64的详细说明和网上的一些信息。</p>", "created": "2015-03-12T15:46:03Z", "bucket_order": 263, "bucket_name": "Week 3/8 - 3/14", "type": "followup", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [{"anon": "stud", "folders": [], "data": {"embed_links": null}, "subject": "<p>谢谢&#xff01;</p>", "created": "2015-03-12T15:50:34Z", "bucket_order": 263, "bucket_name": "Week 3/8 - 3/14", "type": "feedback", "tag_good": [], "uid_a": "a_0", "children": [], "tag_good_arr": [], "id": "i76c14fsksy3r1", "updated": "2015-03-12T15:50:34Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i76bvbdrhvr2od", "updated": "2015-03-12T15:46:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>对于第三个问题&#xff1a;</p>\n<p>IA32 software developer&#39;s manual chapter 8讲述了PC加电后第一条指令的地址的形成过程。关键是理解CS其实是由软件看得见的部分和软件看不见的部分组成。</p>\n<p></p>\n<p>可以看一些中文介绍&#xff1a;</p>\n<p>http://blog.csdn.net/lightseed/article/details/4735101</p>\n<p><a href=\"http://jerk66.blog.163.com/blog/static/164215128201041910335526/\">http://jerk66.blog.163.com/blog/static/164215128201041910335526/</a></p>\n<p></p>", "created": "2015-03-12T15:53:24Z", "bucket_order": 263, "bucket_name": "Week 3/8 - 3/14", "type": "followup", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "i76c4rltor86b0", "updated": "2015-03-12T15:53:24Z", "config": {}}], "tag_good_arr": ["hcrrjuyequh4bt"], "id": "i76a9989saq1fo", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 9, "num_favorites": 5, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167293871, "default_anonymity": "no"}, "error": null, "aid": "kyuzdqcvct51te"}