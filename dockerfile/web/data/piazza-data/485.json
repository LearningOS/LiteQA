{"result": {"folders": ["lab5"], "nr": 485, "data": {"embed_links": []}, "created": "2015-06-11T16:31:29Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-11T16:31:29Z", "data": "iasek91vq63re", "type": "create"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T01:12:45Z", "data": "iavs2azmhfg2d6", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T02:01:33Z", "data": "iavtt2422iw4sn", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T02:14:15Z", "data": "iavu9e63r4t4vr", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T02:15:50Z", "data": "iavubfspelt3vv", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T02:31:34Z", "data": "iavuvnztd135q", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T09:51:30Z", "data": "iawalfbm8eq10d", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-14T09:52:46Z", "data": "iawan284swiiv", "type": "update"}, {"uid": "i74g3aomM8b", "anon": "no", "when": "2015-06-15T01:18:26Z", "data": "iax7ph686ao4j8", "type": "update"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-15T01:18:26Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/commit/fd42\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">不过</span><span style=\"font-weight:normal\">ucorebook_code</span><span style=\"font-family:&#34;STSong&#34;\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">下面是我在看代码的过程中的总结和一些疑问。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是</span><span style=\"font-weight:normal\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。这个函数会判断</span><span style=\"font-weight:normal\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">为是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。这里的</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">并没啥关系&#xff0c;而是说父子进程共用一个</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">标志的话&#xff0c;就会进行内存的复制。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">复制的关键函数在</span><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">。这个函数有两个参数&#xff0c;父子进程的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">进程会对父进程的所有</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">进行遍历&#xff0c;然后创建相应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构给子进程。最后会调用</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">复制</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的内容。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">有一个参数是</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;不过这个同样跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">没啥直接的关系。</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">的值是这样确定的&#xff1a;“</span><span style=\"font-weight:normal\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">和</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。要注意两者的区别&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">是</span><span style=\"font-weight:normal\">clone</span><span style=\"font-family:&#34;STSong&#34;\">的参数&#xff0c;说明父子进程是否使用相同的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。而</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是具体某个</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的标志&#xff0c;如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会将父进程所有的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构都复制给子进程&#xff0c;在这个过程中会判断该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是的话则对该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不是使用复制操作而是直接共享内存。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个我觉得需要注意的地方是&#xff0c;这个</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的地方都会用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里实现</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">主要就是如果发现源</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">具体操作是把改</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构和权限</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">都提出来&#xff0c;去掉</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">属性&#xff0c;然后再重现通过</span><span style=\"font-weight:normal\">page_insert</span><span style=\"font-family:&#34;STSong&#34;\">添加到原来的位置&#xff0c;以实现修改</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">的效果。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;</span><span style=\"font-weight:normal\">&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;而对于子进程则是</span><span style=\"font-weight:normal\">&#34;page_insert(to, page, start, perm);&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;这里的</span><span style=\"font-weight:normal\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\">起到什么作用&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里如果</span><span style=\"font-weight:normal\">ptep</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位置一的话会进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的复制&#xff0c;可是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">则会通过</span><span style=\"font-weight:normal\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\">进行一些处理。这个处理是干什么的&#xff1f;在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中也有</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数有三个参数&#xff0c;发生故障的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;发生错误的内存地址。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先会找到发生错误的内存地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会对错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">进行判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里主要判断了第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位和第一位。其中&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示该页不存在&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示该页存在。第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为读内存中的内容出错的&#xff0c;第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为向内存中写东西出错的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里还会根据出错的原因对</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的权限进行判断。如果因为读内存出错的会查看</span><span style=\"font-weight:normal\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是因为写内存出错会查看</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里总共会出现</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 有读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 有读权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中&#xff0c;</span><span style=\"font-weight:normal\">4</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">没有相应权限的直接错误退出&#xff0c;不过还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">种情况是“该页存在、读出 错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该 是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">上有</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">标志&#xff0c;这就有可能导致</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">那有写权限而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">无写权限&#xff0c;所以“该页存在、写出错、有写权限”还是有可能发生的。而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">中却没有</span><span style=\"font-weight:normal\">PTE_R</span><span style=\"font-family:&#34;STSong&#34;\">之类的标记其是否可读的标志&#xff0c;也就是</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这里的页是否存在是根据</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">判断的&#xff0c;而不是根据</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">判断的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">我不太清楚这里</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中的注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br /></span><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">bit 0 == 0 means no page found, 1 means protection fault<br /></span><span style=\"font-family:&#34;STSong&#34;\">在我手头的一本</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">书上是这样说的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是虚拟页不在物理内存</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是违反了页保护规定</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;总之第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">一定是因为该页不存在。不过这个是跟</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">直接相关吗&#xff1f;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></p>\n<p> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会获取出错地址对应的</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">。如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会根据</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">位进行新建页或共享页的操作。与</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">无关&#xff0c;暂且不表。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">不全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则进行以下操作&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先有</span><span style=\"font-weight:normal\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;代表该页是否可以进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这句话的意义是 </span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">且 </span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。不过这里不关心</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">接着是一句</span><span style=\"font-weight:normal\">assert</span><span style=\"font-family:&#34;STSong&#34;\">&#xff1a;</span></p>\n<p style=\"font-weight:normal\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这说明程序走到这应该是只有两种可能&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一种是</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;按下面的操作来看是意味着要进行</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">换入操作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一种是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则一定有这是因为写出错、且</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">且符合</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff08;</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff09;。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">也就是说</span><span style=\"font-weight:normal\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构是可写的&#xff0c;而对应的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">是不可写的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个是页故障的错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是读&#xff0c;是</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一个是错误地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的标志位中&#xff0c;</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不可写</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">还有一个是错误地址对应的页表项&#xff0c;看其</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明不可写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再重述一遍&#xff0c;</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff1a;</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">、</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">但</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。但</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量仅仅说明了</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">其实这里还有另一种情况&#xff0c;就是考虑换出的页的情况。这个后面再说。</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果这里的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">和前面</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中的</span><span style=\"font-weight:normal\">3</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;其中</span><span style=\"font-weight:normal\">2</span><span style=\"font-family:&#34;STSong&#34;\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">中就是读出错但是有写权限的&#xff0c;交于</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是具体的处理函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量为真&#xff0c;也即仅仅是</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;便会给</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">赋一个新页。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后如果页面存在的话&#xff0c;获取其</span><span style=\"font-weight:normal\">Page</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">相关处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先就是根据</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">将</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">释放掉&#xff0c;不然会造成内存泄漏。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后对换入的页进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">的检测。关于这个&#xff0c;</span>ucorebook<span style=\"font-family:&#34;STSong&#34;\">上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上 了&#xff0c;则需要把此页通过</span>swap_in_page<span style=\"font-family:&#34;STSong&#34;\">函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的“如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页”是通过“</span>if (!(error_code &amp; 2) &amp;&amp; cow)”<span style=\"font-family:&#34;STSong&#34;\">来判断的</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1”<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;如果满足这个条件的话&#xff0c;会将</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">设为</span>0<span style=\"font-family:&#34;STSong&#34;\">。为什么要这样做&#xff1f;为什么不恢复换出之前的</span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;我的猜测是换出的时候就没有保存该 </span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在要根据</span>vma<span style=\"font-family:&#34;STSong&#34;\">对</span>perm<span style=\"font-family:&#34;STSong&#34;\">进行恢复。对于有</span>COW<span style=\"font-family:&#34;STSong&#34;\">嫌疑的&#xff08;</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1<span style=\"font-family:&#34;STSong&#34;\">&#xff09;&#xff0c;都使其</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">使其再接受一次判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再接受一次判断会让其再因为页故障进入一次</span>do_pgfault<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在会使</span>may_copy<span style=\"font-family:&#34;STSong&#34;\">为</span>0,<span style=\"font-family:&#34;STSong&#34;\">也就是本次先不进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么不在本次就处理好那&#xff1f;</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的处理了。如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">指向。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里引用次数为什么还会使用</span>swap_page_count<span style=\"font-family:&#34;STSong&#34;\">这个函数&#xff1f;为什么现在的</span>ucore_lab<span style=\"font-family:&#34;STSong&#34;\">中已经没有了这个函数&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会将</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构插入到页目录表中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">最后再进行一些收尾工作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">因为</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">的实现过程中参考了</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;我去翻了翻</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;发现很多相同功能的函数名称在</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中和</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中都相同或相近&#xff0c;有些关键的算法</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span><span style=\"font-weight:normal\">ucore </span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;下一步可以考虑去研究下</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的算法。这里推荐毛徳操老师的《</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">内核源代码情景分析》&#xff0c;同样是基于</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的。</span></p>\n<p><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">i386</span><span style=\"font-family:&#34;STSong&#34;\">部分的代码与</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的代码部分对应关系如下&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\">是在</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\">中用汇编实现的。</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">对应与</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_page_fault</span></p>\n<p><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中然后会进入</span><span style=\"font-weight:normal\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\">以及</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;并在</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">中根据情况进入具体的实现函数&#xff0c;如对</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_wp_page</span></p>\n<p><span style=\"font-weight:normal\"><br /></span><span style=\"font-family:&#34;STSong&#34;\">上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</span></p>\n<p></p>\n<p><br />虽然对这个还有一些疑问&#xff0c;不过我还是试着对ucore_lab增加了COW支持。这个ucore_lab中的lab5_X分支已经初步实现&#xff0c;不过是在去掉了页面换入换出的情况下。我在这个基础上仿照着ucorebook_code的代码进行修改&#xff0c;使得现在lab5_X在支持页面换入换出的情况下也可以实现COW。最终通过修改ucore_lab增加对COW支持的代码<a target=\"_blank\" href=\"https://github.com/Archstacker/ucore_lab/compare/master...lab5_X\">点此</a>。这应该算是ucore_lab中对COW的完整的实现吧。测试了一下是可以运行的。不知实现的对不对。已发pull request&#xff0c;望指正。</p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T09:52:46Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/commit/fd42\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">不过</span><span style=\"font-weight:normal\">ucorebook_code</span><span style=\"font-family:&#34;STSong&#34;\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">下面是我在看代码的过程中的总结和一些疑问。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是</span><span style=\"font-weight:normal\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。这个函数会判断</span><span style=\"font-weight:normal\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">为是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。这里的</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">并没啥关系&#xff0c;而是说父子进程共用一个</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">标志的话&#xff0c;就会进行内存的复制。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">复制的关键函数在</span><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">。这个函数有两个参数&#xff0c;父子进程的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">进程会对父进程的所有</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">进行遍历&#xff0c;然后创建相应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构给子进程。最后会调用</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">复制</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的内容。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">有一个参数是</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;不过这个同样跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">没啥直接的关系。</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">的值是这样确定的&#xff1a;“</span><span style=\"font-weight:normal\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">和</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。要注意两者的区别&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">是</span><span style=\"font-weight:normal\">clone</span><span style=\"font-family:&#34;STSong&#34;\">的参数&#xff0c;说明父子进程是否使用相同的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。而</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是具体某个</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的标志&#xff0c;如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会将父进程所有的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构都复制给子进程&#xff0c;在这个过程中会判断该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是的话则对该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不是使用复制操作而是直接共享内存。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个我觉得需要注意的地方是&#xff0c;这个</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的地方都会用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里实现</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">主要就是如果发现源</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">具体操作是把改</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构和权限</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">都提出来&#xff0c;去掉</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">属性&#xff0c;然后再重现通过</span><span style=\"font-weight:normal\">page_insert</span><span style=\"font-family:&#34;STSong&#34;\">添加到原来的位置&#xff0c;以实现修改</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">的效果。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;</span><span style=\"font-weight:normal\">&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;而对于子进程则是</span><span style=\"font-weight:normal\">&#34;page_insert(to, page, start, perm);&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;这里的</span><span style=\"font-weight:normal\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\">起到什么作用&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里如果</span><span style=\"font-weight:normal\">ptep</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位置一的话会进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的复制&#xff0c;可是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">则会通过</span><span style=\"font-weight:normal\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\">进行一些处理。这个处理是干什么的&#xff1f;在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中也有</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数有三个参数&#xff0c;发生故障的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;发生错误的内存地址。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先会找到发生错误的内存地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会对错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">进行判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里主要判断了第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位和第一位。其中&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示该页不存在&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示该页存在。第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为读内存中的内容出错的&#xff0c;第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为向内存中写东西出错的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里还会根据出错的原因对</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的权限进行判断。如果因为读内存出错的会查看</span><span style=\"font-weight:normal\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是因为写内存出错会查看</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里总共会出现</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 有读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 有读权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中&#xff0c;</span><span style=\"font-weight:normal\">4</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">没有相应权限的直接错误退出&#xff0c;不过还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">种情况是“该页存在、读出 错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该 是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">上有</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">标志&#xff0c;这就有可能导致</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">那有写权限而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">无写权限&#xff0c;所以“该页存在、写出错、有写权限”还是有可能发生的。而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">中却没有</span><span style=\"font-weight:normal\">PTE_R</span><span style=\"font-family:&#34;STSong&#34;\">之类的标记其是否可读的标志&#xff0c;也就是</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这里的页是否存在是根据</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">判断的&#xff0c;而不是根据</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">判断的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">我不太清楚这里</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中的注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br /></span><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">bit 0 == 0 means no page found, 1 means protection fault<br /></span><span style=\"font-family:&#34;STSong&#34;\">在我手头的一本</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">书上是这样说的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是虚拟页不在物理内存</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是违反了页保护规定</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;总之第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">一定是因为该页不存在。不过这个是跟</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">直接相关吗&#xff1f;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></p>\n<p> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会获取出错地址对应的</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">。如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会根据</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">位进行新建页或共享页的操作。与</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">无关&#xff0c;暂且不表。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">不全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则进行以下操作&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先有</span><span style=\"font-weight:normal\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;代表该页是否可以进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这句话的意义是 </span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">且 </span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。不过这里不关心</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">接着是一句</span><span style=\"font-weight:normal\">assert</span><span style=\"font-family:&#34;STSong&#34;\">&#xff1a;</span></p>\n<p style=\"font-weight:normal\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这说明程序走到这应该是只有两种可能&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一种是</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;按下面的操作来看是意味着要进行</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">换入操作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一种是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则一定有这是因为写出错、且</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">且符合</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff08;</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff09;。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">也就是说</span><span style=\"font-weight:normal\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构是可写的&#xff0c;而对应的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">是不可写的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个是页故障的错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是读&#xff0c;是</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一个是错误地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的标志位中&#xff0c;</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不可写</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">还有一个是错误地址对应的页表项&#xff0c;看其</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明不可写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再重述一遍&#xff0c;</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff1a;</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">、</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">但</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。但</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量仅仅说明了</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">其实这里还有另一种情况&#xff0c;就是考虑换出的页的情况。这个后面再说。</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果这里的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">和前面</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中的</span><span style=\"font-weight:normal\">3</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;其中</span><span style=\"font-weight:normal\">2</span><span style=\"font-family:&#34;STSong&#34;\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">中就是读出错但是有写权限的&#xff0c;交于</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是具体的处理函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量为真&#xff0c;也即仅仅是</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;便会给</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">赋一个新页。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后如果页面存在的话&#xff0c;获取其</span><span style=\"font-weight:normal\">Page</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">相关处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先就是根据</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">将</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">释放掉&#xff0c;不然会造成内存泄漏。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后对换入的页进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">的检测。关于这个&#xff0c;</span>ucorebook<span style=\"font-family:&#34;STSong&#34;\">上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上 了&#xff0c;则需要把此页通过</span>swap_in_page<span style=\"font-family:&#34;STSong&#34;\">函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的“如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页”是通过“</span>if (!(error_code &amp; 2) &amp;&amp; cow)”<span style=\"font-family:&#34;STSong&#34;\">来判断的</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1”<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;如果满足这个条件的话&#xff0c;会将</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">设为</span>0<span style=\"font-family:&#34;STSong&#34;\">。为什么要这样做&#xff1f;为什么不恢复换出之前的</span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;我的猜测是换出的时候就没有保存该 </span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在要根据</span>vma<span style=\"font-family:&#34;STSong&#34;\">对</span>perm<span style=\"font-family:&#34;STSong&#34;\">进行恢复。对于有</span>COW<span style=\"font-family:&#34;STSong&#34;\">嫌疑的&#xff08;</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1<span style=\"font-family:&#34;STSong&#34;\">&#xff09;&#xff0c;都使其</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">使其再接受一次判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再接受一次判断会让其再因为页故障进入一次</span>do_pgfault<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在会使</span>may_copy<span style=\"font-family:&#34;STSong&#34;\">为</span>0,<span style=\"font-family:&#34;STSong&#34;\">也就是本次先不进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么不在本次就处理好那&#xff1f;</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的处理了。如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">指向。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里引用次数为什么还会使用</span>swap_page_count<span style=\"font-family:&#34;STSong&#34;\">这个函数&#xff1f;为什么现在的</span>ucore_lab<span style=\"font-family:&#34;STSong&#34;\">中已经没有了这个函数&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会将</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构插入到页目录表中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">最后再进行一些收尾工作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">因为</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">的实现过程中参考了</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;我去翻了翻</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;发现很多相同功能的函数名称在</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中和</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中都相同或相近&#xff0c;有些关键的算法</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span><span style=\"font-weight:normal\">ucore </span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;下一步可以考虑去研究下</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的算法。这里推荐毛徳操老师的《</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">内核源代码情景分析》&#xff0c;同样是基于</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的。</span></p>\n<p><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">i386</span><span style=\"font-family:&#34;STSong&#34;\">部分的代码与</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的代码部分对应关系如下&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\">是在</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\">中用汇编实现的。</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">对应与</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_page_fault</span></p>\n<p><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中然后会进入</span><span style=\"font-weight:normal\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\">以及</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;并在</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">中根据情况进入具体的实现函数&#xff0c;如对</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_wp_page</span></p>\n<p><span style=\"font-weight:normal\"><br /></span><span style=\"font-family:&#34;STSong&#34;\">上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</span></p>\n<p></p>\n<p><br />虽然对这个还有一些疑问&#xff0c;不过我还是试着对ucore_lab增加了COW支持。这个ucore_lab中的lab5_X分支已经初步实现&#xff0c;不过是在去掉了页面换入换出的情况下。我在这个基础上仿照着ucorebook_code的代码进行修改&#xff0c;使得现在在支持页面换入换出的情况下也可以实现COW。这应该算是ucore_lab中对COW的完整的实现吧。测试了一下是可以运行的。不知实现的对不对。已发pull request&#xff0c;望指正。</p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T09:51:30Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/commit/fd42\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">不过</span><span style=\"font-weight:normal\">ucorebook_code</span><span style=\"font-family:&#34;STSong&#34;\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">下面是我在看代码的过程中的总结和一些疑问。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是</span><span style=\"font-weight:normal\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。这个函数会判断</span><span style=\"font-weight:normal\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">为是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。这里的</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">并没啥关系&#xff0c;而是说父子进程共用一个</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">标志的话&#xff0c;就会进行内存的复制。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">复制的关键函数在</span><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">。这个函数有两个参数&#xff0c;父子进程的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">进程会对父进程的所有</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">进行遍历&#xff0c;然后创建相应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构给子进程。最后会调用</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">复制</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的内容。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">有一个参数是</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;不过这个同样跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">没啥直接的关系。</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">的值是这样确定的&#xff1a;“</span><span style=\"font-weight:normal\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">和</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。要注意两者的区别&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">是</span><span style=\"font-weight:normal\">clone</span><span style=\"font-family:&#34;STSong&#34;\">的参数&#xff0c;说明父子进程是否使用相同的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。而</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是具体某个</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的标志&#xff0c;如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会将父进程所有的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构都复制给子进程&#xff0c;在这个过程中会判断该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是的话则对该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不是使用复制操作而是直接共享内存。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个我觉得需要注意的地方是&#xff0c;这个</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的地方都会用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里实现</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">主要就是如果发现源</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">具体操作是把改</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构和权限</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">都提出来&#xff0c;去掉</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">属性&#xff0c;然后再重现通过</span><span style=\"font-weight:normal\">page_insert</span><span style=\"font-family:&#34;STSong&#34;\">添加到原来的位置&#xff0c;以实现修改</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">的效果。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;</span><span style=\"font-weight:normal\">&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;而对于子进程则是</span><span style=\"font-weight:normal\">&#34;page_insert(to, page, start, perm);&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;这里的</span><span style=\"font-weight:normal\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\">起到什么作用&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里如果</span><span style=\"font-weight:normal\">ptep</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位置一的话会进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的复制&#xff0c;可是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">则会通过</span><span style=\"font-weight:normal\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\">进行一些处理。这个处理是干什么的&#xff1f;在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中也有</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数有三个参数&#xff0c;发生故障的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;发生错误的内存地址。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先会找到发生错误的内存地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会对错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">进行判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里主要判断了第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位和第一位。其中&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示该页不存在&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示该页存在。第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为读内存中的内容出错的&#xff0c;第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为向内存中写东西出错的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里还会根据出错的原因对</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的权限进行判断。如果因为读内存出错的会查看</span><span style=\"font-weight:normal\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是因为写内存出错会查看</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里总共会出现</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 有读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 有读权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中&#xff0c;</span><span style=\"font-weight:normal\">4</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">没有相应权限的直接错误退出&#xff0c;不过还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">种情况是“该页存在、读出 错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该 是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">上有</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">标志&#xff0c;这就有可能导致</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">那有写权限而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">无写权限&#xff0c;所以“该页存在、写出错、有写权限”还是有可能发生的。而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">中却没有</span><span style=\"font-weight:normal\">PTE_R</span><span style=\"font-family:&#34;STSong&#34;\">之类的标记其是否可读的标志&#xff0c;也就是</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这里的页是否存在是根据</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">判断的&#xff0c;而不是根据</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">判断的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">我不太清楚这里</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中的注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br /></span><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">bit 0 == 0 means no page found, 1 means protection fault<br /></span><span style=\"font-family:&#34;STSong&#34;\">在我手头的一本</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">书上是这样说的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是虚拟页不在物理内存</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是违反了页保护规定</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;总之第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">一定是因为该页不存在。不过这个是跟</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">直接相关吗&#xff1f;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></p>\n<p> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会获取出错地址对应的</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">。如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会根据</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">位进行新建页或共享页的操作。与</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">无关&#xff0c;暂且不表。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">不全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则进行以下操作&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先有</span><span style=\"font-weight:normal\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;代表该页是否可以进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这句话的意义是 </span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">且 </span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。不过这里不关心</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">接着是一句</span><span style=\"font-weight:normal\">assert</span><span style=\"font-family:&#34;STSong&#34;\">&#xff1a;</span></p>\n<p style=\"font-weight:normal\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这说明程序走到这应该是只有两种可能&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一种是</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;按下面的操作来看是意味着要进行</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">换入操作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一种是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则一定有这是因为写出错、且</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">且符合</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff08;</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff09;。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">也就是说</span><span style=\"font-weight:normal\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构是可写的&#xff0c;而对应的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">是不可写的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个是页故障的错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是读&#xff0c;是</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一个是错误地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的标志位中&#xff0c;</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不可写</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">还有一个是错误地址对应的页表项&#xff0c;看其</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明不可写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再重述一遍&#xff0c;</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff1a;</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">、</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">但</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。但</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量仅仅说明了</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">其实这里还有另一种情况&#xff0c;就是考虑换出的页的情况。这个后面再说。</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果这里的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">和前面</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中的</span><span style=\"font-weight:normal\">3</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;其中</span><span style=\"font-weight:normal\">2</span><span style=\"font-family:&#34;STSong&#34;\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">中就是读出错但是有写权限的&#xff0c;交于</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是具体的处理函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量为真&#xff0c;也即仅仅是</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;便会给</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">赋一个新页。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后如果页面存在的话&#xff0c;获取其</span><span style=\"font-weight:normal\">Page</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">相关处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先就是根据</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">将</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">释放掉&#xff0c;不然会造成内存泄漏。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后对换入的页进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">的检测。关于这个&#xff0c;</span>ucorebook<span style=\"font-family:&#34;STSong&#34;\">上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上 了&#xff0c;则需要把此页通过</span>swap_in_page<span style=\"font-family:&#34;STSong&#34;\">函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的“如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页”是通过“</span>if (!(error_code &amp; 2) &amp;&amp; cow)”<span style=\"font-family:&#34;STSong&#34;\">来判断的</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1”<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;如果满足这个条件的话&#xff0c;会将</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">设为</span>0<span style=\"font-family:&#34;STSong&#34;\">。为什么要这样做&#xff1f;为什么不恢复换出之前的</span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;我的猜测是换出的时候就没有保存该 </span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在要根据</span>vma<span style=\"font-family:&#34;STSong&#34;\">对</span>perm<span style=\"font-family:&#34;STSong&#34;\">进行恢复。对于有</span>COW<span style=\"font-family:&#34;STSong&#34;\">嫌疑的&#xff08;</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1<span style=\"font-family:&#34;STSong&#34;\">&#xff09;&#xff0c;都使其</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">使其再接受一次判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再接受一次判断会让其再因为页故障进入一次</span>do_pgfault<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在会使</span>may_copy<span style=\"font-family:&#34;STSong&#34;\">为</span>0,<span style=\"font-family:&#34;STSong&#34;\">也就是本次先不进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么不在本次就处理好那&#xff1f;</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的处理了。如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">指向。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里引用次数为什么还会使用</span>swap_page_count<span style=\"font-family:&#34;STSong&#34;\">这个函数&#xff1f;为什么现在的</span>ucore_lab<span style=\"font-family:&#34;STSong&#34;\">中已经没有了这个函数&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会将</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构插入到页目录表中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">最后再进行一些收尾工作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">因为</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">的实现过程中参考了</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;我去翻了翻</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;发现很多相同功能的函数名称在</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中和</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中都相同或相近&#xff0c;有些关键的算法</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span><span style=\"font-weight:normal\">ucore </span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;下一步可以考虑去研究下</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的算法。这里推荐毛徳操老师的《</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">内核源代码情景分析》&#xff0c;同样是基于</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的。</span></p>\n<p><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">i386</span><span style=\"font-family:&#34;STSong&#34;\">部分的代码与</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的代码部分对应关系如下&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\">是在</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\">中用汇编实现的。</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">对应与</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_page_fault</span></p>\n<p><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中然后会进入</span><span style=\"font-weight:normal\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\">以及</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;并在</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">中根据情况进入具体的实现函数&#xff0c;如对</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_wp_page</span></p>\n<p><span style=\"font-weight:normal\"><br /></span><span style=\"font-family:&#34;STSong&#34;\">上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</span></p>\n<p></p>\n<p><br />虽然对这个还有一些疑问&#xff0c;不过我还是试着对ucore_lab增加了COW支持。这个ucore_lab中的lab5_X分支已经初步实现&#xff0c;不过是在去掉了页面换入换出的情况下。我在这个基础上仿照着ucorebook_code的代码进行修改&#xff0c;使得现在在支持页面换入换出的情况下也可以实现COW。这应该算是ucore_lab中对COW的完整的实现吧。已发pull request。</p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T02:31:34Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/commit/fd42\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">不过</span><span style=\"font-weight:normal\">ucorebook_code</span><span style=\"font-family:&#34;STSong&#34;\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">下面是我在看代码的过程中的总结和一些疑问。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是</span><span style=\"font-weight:normal\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。这个函数会判断</span><span style=\"font-weight:normal\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">为是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。这里的</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">并没啥关系&#xff0c;而是说父子进程共用一个</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">标志的话&#xff0c;就会进行内存的复制。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">复制的关键函数在</span><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">。这个函数有两个参数&#xff0c;父子进程的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">进程会对父进程的所有</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">进行遍历&#xff0c;然后创建相应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构给子进程。最后会调用</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">复制</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的内容。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">有一个参数是</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;不过这个同样跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">没啥直接的关系。</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">的值是这样确定的&#xff1a;“</span><span style=\"font-weight:normal\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">和</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。要注意两者的区别&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">是</span><span style=\"font-weight:normal\">clone</span><span style=\"font-family:&#34;STSong&#34;\">的参数&#xff0c;说明父子进程是否使用相同的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。而</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是具体某个</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的标志&#xff0c;如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会将父进程所有的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构都复制给子进程&#xff0c;在这个过程中会判断该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是的话则对该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不是使用复制操作而是直接共享内存。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个我觉得需要注意的地方是&#xff0c;这个</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的地方都会用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里实现</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">主要就是如果发现源</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">具体操作是把改</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构和权限</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">都提出来&#xff0c;去掉</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">属性&#xff0c;然后再重现通过</span><span style=\"font-weight:normal\">page_insert</span><span style=\"font-family:&#34;STSong&#34;\">添加到原来的位置&#xff0c;以实现修改</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">的效果。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;</span><span style=\"font-weight:normal\">&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;而对于子进程则是</span><span style=\"font-weight:normal\">&#34;page_insert(to, page, start, perm);&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;这里的</span><span style=\"font-weight:normal\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\">起到什么作用&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里如果</span><span style=\"font-weight:normal\">ptep</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位置一的话会进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的复制&#xff0c;可是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">则会通过</span><span style=\"font-weight:normal\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\">进行一些处理。这个处理是干什么的&#xff1f;在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中也有</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数有三个参数&#xff0c;发生故障的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;发生错误的内存地址。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先会找到发生错误的内存地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会对错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">进行判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里主要判断了第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位和第一位。其中&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示该页不存在&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示该页存在。第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为读内存中的内容出错的&#xff0c;第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为向内存中写东西出错的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里还会根据出错的原因对</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的权限进行判断。如果因为读内存出错的会查看</span><span style=\"font-weight:normal\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是因为写内存出错会查看</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里总共会出现</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 有读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 有读权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中&#xff0c;</span><span style=\"font-weight:normal\">4</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">没有相应权限的直接错误退出&#xff0c;不过还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">种情况是“该页存在、读出 错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该 是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">上有</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">标志&#xff0c;这就有可能导致</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">那有写权限而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">无写权限&#xff0c;所以“该页存在、写出错、有写权限”还是有可能发生的。而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">中却没有</span><span style=\"font-weight:normal\">PTE_R</span><span style=\"font-family:&#34;STSong&#34;\">之类的标记其是否可读的标志&#xff0c;也就是</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这里的页是否存在是根据</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">判断的&#xff0c;而不是根据</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">判断的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">我不太清楚这里</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中的注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br /></span><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">bit 0 == 0 means no page found, 1 means protection fault<br /></span><span style=\"font-family:&#34;STSong&#34;\">在我手头的一本</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">书上是这样说的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是虚拟页不在物理内存</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是违反了页保护规定</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;总之第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">一定是因为该页不存在。不过这个是跟</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">直接相关吗&#xff1f;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></p>\n<p> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会获取出错地址对应的</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">。如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会根据</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">位进行新建页或共享页的操作。与</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">无关&#xff0c;暂且不表。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">不全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则进行以下操作&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先有</span><span style=\"font-weight:normal\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;代表该页是否可以进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这句话的意义是 </span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">且 </span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。不过这里不关心</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">接着是一句</span><span style=\"font-weight:normal\">assert</span><span style=\"font-family:&#34;STSong&#34;\">&#xff1a;</span></p>\n<p style=\"font-weight:normal\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这说明程序走到这应该是只有两种可能&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一种是</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;按下面的操作来看是意味着要进行</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">换入操作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一种是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则一定有这是因为写出错、且</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">且符合</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff08;</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff09;。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">也就是说</span><span style=\"font-weight:normal\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构是可写的&#xff0c;而对应的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">是不可写的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个是页故障的错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是读&#xff0c;是</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一个是错误地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的标志位中&#xff0c;</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不可写</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">还有一个是错误地址对应的页表项&#xff0c;看其</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明不可写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再重述一遍&#xff0c;</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff1a;</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">、</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">但</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。但</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量仅仅说明了</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">其实这里还有另一种情况&#xff0c;就是考虑换出的页的情况。这个后面再说。</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果这里的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">和前面</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中的</span><span style=\"font-weight:normal\">3</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;其中</span><span style=\"font-weight:normal\">2</span><span style=\"font-family:&#34;STSong&#34;\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">中就是读出错但是有写权限的&#xff0c;交于</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是具体的处理函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量为真&#xff0c;也即仅仅是</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;便会给</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">赋一个新页。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后如果页面存在的话&#xff0c;获取其</span><span style=\"font-weight:normal\">Page</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">相关处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先就是根据</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">将</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">释放掉&#xff0c;不然会造成内存泄漏。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后对换入的页进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">的检测。关于这个&#xff0c;</span>ucorebook<span style=\"font-family:&#34;STSong&#34;\">上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上 了&#xff0c;则需要把此页通过</span>swap_in_page<span style=\"font-family:&#34;STSong&#34;\">函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的“如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页”是通过“</span>if (!(error_code &amp; 2) &amp;&amp; cow)”<span style=\"font-family:&#34;STSong&#34;\">来判断的</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1”<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;如果满足这个条件的话&#xff0c;会将</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">设为</span>0<span style=\"font-family:&#34;STSong&#34;\">。为什么要这样做&#xff1f;为什么不恢复换出之前的</span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;我的猜测是换出的时候就没有保存该 </span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在要根据</span>vma<span style=\"font-family:&#34;STSong&#34;\">对</span>perm<span style=\"font-family:&#34;STSong&#34;\">进行恢复。对于有</span>COW<span style=\"font-family:&#34;STSong&#34;\">嫌疑的&#xff08;</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1<span style=\"font-family:&#34;STSong&#34;\">&#xff09;&#xff0c;都使其</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">使其再接受一次判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再接受一次判断会让其再因为页故障进入一次</span>do_pgfault<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在会使</span>may_copy<span style=\"font-family:&#34;STSong&#34;\">为</span>0,<span style=\"font-family:&#34;STSong&#34;\">也就是本次先不进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么不在本次就处理好那&#xff1f;</span></p>\n<p></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的处理了。如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">指向。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里引用次数为什么还会使用</span>swap_page_count<span style=\"font-family:&#34;STSong&#34;\">这个函数&#xff1f;为什么现在的</span>ucore_lab<span style=\"font-family:&#34;STSong&#34;\">中已经没有了这个函数&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会将</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构插入到页目录表中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">最后再进行一些收尾工作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">因为</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">的实现过程中参考了</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;我去翻了翻</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;发现很多相同功能的函数名称在</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中和</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中都相同或相近&#xff0c;有些关键的算法</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span><span style=\"font-weight:normal\">ucore </span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;下一步可以考虑去研究下</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的算法。这里推荐毛徳操老师的《</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">内核源代码情景分析》&#xff0c;同样是基于</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的。</span></p>\n<p><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">i386</span><span style=\"font-family:&#34;STSong&#34;\">部分的代码与</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的代码部分对应关系如下&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\">是在</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\">中用汇编实现的。</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">对应与</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_page_fault</span></p>\n<p><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中然后会进入</span><span style=\"font-weight:normal\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\">以及</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;并在</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">中根据情况进入具体的实现函数&#xff0c;如对</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_wp_page</span></p>\n<p><span style=\"font-weight:normal\"><br /></span><span style=\"font-family:&#34;STSong&#34;\">上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</span></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T02:15:50Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/tree/lab5_X\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">不过</span><span style=\"font-weight:normal\">ucorebook_code</span><span style=\"font-family:&#34;STSong&#34;\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">下面是我在看代码的过程中的总结和一些疑问。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是</span><span style=\"font-weight:normal\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。这个函数会判断</span><span style=\"font-weight:normal\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">为是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。这里的</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">并没啥关系&#xff0c;而是说父子进程共用一个</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">标志的话&#xff0c;就会进行内存的复制。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">复制的关键函数在</span><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">。这个函数有两个参数&#xff0c;父子进程的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\">进程会对父进程的所有</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">进行遍历&#xff0c;然后创建相应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构给子进程。最后会调用</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">复制</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的内容。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\">有一个参数是</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;不过这个同样跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">没啥直接的关系。</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;STSong&#34;\">的值是这样确定的&#xff1a;“</span><span style=\"font-weight:normal\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">和</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。要注意两者的区别&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">是</span><span style=\"font-weight:normal\">clone</span><span style=\"font-family:&#34;STSong&#34;\">的参数&#xff0c;说明父子进程是否使用相同的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构。而</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是具体某个</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的标志&#xff0c;如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会将父进程所有的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构都复制给子进程&#xff0c;在这个过程中会判断该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是的话则对该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不是使用复制操作而是直接共享内存。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个我觉得需要注意的地方是&#xff0c;这个</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的地方都会用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里实现</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">主要就是如果发现源</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">具体操作是把改</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构和权限</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">都提出来&#xff0c;去掉</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">属性&#xff0c;然后再重现通过</span><span style=\"font-weight:normal\">page_insert</span><span style=\"font-family:&#34;STSong&#34;\">添加到原来的位置&#xff0c;以实现修改</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;STSong&#34;\">的效果。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;</span><span style=\"font-weight:normal\">&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;而对于子进程则是</span><span style=\"font-weight:normal\">&#34;page_insert(to, page, start, perm);&#34;</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;这里的</span><span style=\"font-weight:normal\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\">起到什么作用&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里如果</span><span style=\"font-weight:normal\">ptep</span><span style=\"font-family:&#34;STSong&#34;\">的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位置一的话会进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的复制&#xff0c;可是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">则会通过</span><span style=\"font-weight:normal\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\">进行一些处理。这个处理是干什么的&#xff1f;在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中也有</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">这个函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这个函数有三个参数&#xff0c;发生故障的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;发生错误的内存地址。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先会找到发生错误的内存地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会对错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">进行判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里主要判断了第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位和第一位。其中&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示该页不存在&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示该页存在。第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为读内存中的内容出错的&#xff0c;第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">表示是因为向内存中写东西出错的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里还会根据出错的原因对</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">的权限进行判断。如果因为读内存出错的会查看</span><span style=\"font-weight:normal\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;如果是因为写内存出错会查看</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里总共会出现</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 有读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 有读权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">该页不存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中&#xff0c;</span><span style=\"font-weight:normal\">4</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">没有相应权限的直接错误退出&#xff0c;不过还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">种情况是“该页存在、读出 错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该 是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">上有</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">标志&#xff0c;这就有可能导致</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">那有写权限而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">无写权限&#xff0c;所以“该页存在、写出错、有写权限”还是有可能发生的。而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">中却没有</span><span style=\"font-weight:normal\">PTE_R</span><span style=\"font-family:&#34;STSong&#34;\">之类的标记其是否可读的标志&#xff0c;也就是</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这里的页是否存在是根据</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">判断的&#xff0c;而不是根据</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">判断的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">我不太清楚这里</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\">中的注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br /></span><span style=\"font-family:&#34;STSong&#34;\">在</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">bit 0 == 0 means no page found, 1 means protection fault<br /></span><span style=\"font-family:&#34;STSong&#34;\">在我手头的一本</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">书上是这样说的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是虚拟页不在物理内存</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;STSong&#34;\">的值为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">意义是引起故障的原因是违反了页保护规定</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;总之第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">一定是因为该页不存在。不过这个是跟</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">直接相关吗&#xff1f;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></p>\n<p> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会获取出错地址对应的</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">。如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则会根据</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">位进行新建页或共享页的操作。与</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">无关&#xff0c;暂且不表。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">不全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则进行以下操作&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先有</span><span style=\"font-weight:normal\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;代表该页是否可以进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">注意这句话的意义是 </span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">且 </span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。不过这里不关心</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">接着是一句</span><span style=\"font-weight:normal\">assert</span><span style=\"font-family:&#34;STSong&#34;\">&#xff1a;</span></p>\n<p style=\"font-weight:normal\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这说明程序走到这应该是只有两种可能&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一种是</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;按下面的操作来看是意味着要进行</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">换入操作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一种是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;则一定有这是因为写出错、且</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">且符合</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff08;</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff09;。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">也就是说</span><span style=\"font-weight:normal\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构是可写的&#xff0c;而对应的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;STSong&#34;\">是不可写的。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">一个是页故障的错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是读&#xff0c;是</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">的话说明引起故障的操作是写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">另一个是错误地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构的标志位中&#xff0c;</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;STSong&#34;\">结构不可写</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">还有一个是错误地址对应的页表项&#xff0c;看其</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">说明可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">说明不可写。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再重述一遍&#xff0c;</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的条件&#xff1a;</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">、</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">但</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">。但</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量仅仅说明了</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">其实这里还有另一种情况&#xff0c;就是考虑换出的页的情况。这个后面再说。</span></p>\n<p><br /> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">如果这里的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\">和前面</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;STSong&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;STSong&#34;\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;STSong&#34;\">种情况中的</span><span style=\"font-weight:normal\">3</span><span style=\"font-family:&#34;STSong&#34;\">种情况&#xff0c;其中</span><span style=\"font-weight:normal\">2</span><span style=\"font-family:&#34;STSong&#34;\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">中就是读出错但是有写权限的&#xff0c;交于</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是具体的处理函数。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先是如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">变量为真&#xff0c;也即仅仅是</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;便会给</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">赋一个新页。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后如果页面存在的话&#xff0c;获取其</span><span style=\"font-weight:normal\">Page</span><span style=\"font-family:&#34;STSong&#34;\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">相关处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">首先就是根据</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;STSong&#34;\">将</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;STSong&#34;\">释放掉&#xff0c;不然会造成内存泄漏。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后对换入的页进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">的检测。关于这个&#xff0c;</span>ucorebook<span style=\"font-family:&#34;STSong&#34;\">上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上 了&#xff0c;则需要把此页通过</span>swap_in_page<span style=\"font-family:&#34;STSong&#34;\">函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">这里的“如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;STSong&#34;\">页”是通过“</span>if (!(error_code &amp; 2) &amp;&amp; cow)”<span style=\"font-family:&#34;STSong&#34;\">来判断的</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1”<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;如果满足这个条件的话&#xff0c;会将</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">设为</span>0<span style=\"font-family:&#34;STSong&#34;\">。为什么要这样做&#xff1f;为什么不恢复换出之前的</span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff1f;我的猜测是换出的时候就没有保存该 </span>PTE<span style=\"font-family:&#34;STSong&#34;\">的</span>perm<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在要根据</span>vma<span style=\"font-family:&#34;STSong&#34;\">对</span>perm<span style=\"font-family:&#34;STSong&#34;\">进行恢复。对于有</span>COW<span style=\"font-family:&#34;STSong&#34;\">嫌疑的&#xff08;</span>VM_WRITE<span style=\"font-family:&#34;STSong&#34;\">为</span>1<span style=\"font-family:&#34;STSong&#34;\">&#xff09;&#xff0c;都使其</span>PTE_W<span style=\"font-family:&#34;STSong&#34;\">使其再接受一次判断。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">再接受一次判断会让其再因为页故障进入一次</span>do_pgfault<span style=\"font-family:&#34;STSong&#34;\">&#xff0c;现在会使</span>may_copy<span style=\"font-family:&#34;STSong&#34;\">为</span>0,<span style=\"font-family:&#34;STSong&#34;\">也就是本次先不进行</span>COW<span style=\"font-family:&#34;STSong&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;为什么不在本次就处理好那&#xff1f;</span></p>\n<p><br /> </p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后就是对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">的处理了。如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;STSong&#34;\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;STSong&#34;\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">指向。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">疑问&#xff1a;这里引用次数为什么还会使用</span>swap_page_count<span style=\"font-family:&#34;STSong&#34;\">这个函数&#xff1f;为什么现在的</span>ucore_lab<span style=\"font-family:&#34;STSong&#34;\">中已经没有了这个函数&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">然后会将</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;STSong&#34;\">结构插入到页目录表中。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">最后再进行一些收尾工作。</span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\">因为</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">的实现过程中参考了</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;我去翻了翻</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">的代码&#xff0c;发现很多相同功能的函数名称在</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中和</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">中都相同或相近&#xff0c;有些关键的算法</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span><span style=\"font-weight:normal\">ucore </span><span style=\"font-family:&#34;STSong&#34;\">的话&#xff0c;下一步可以考虑去研究下</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的算法。这里推荐毛徳操老师的《</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;STSong&#34;\">内核源代码情景分析》&#xff0c;同样是基于</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">的。</span></p>\n<p><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\">中</span><span style=\"font-weight:normal\">i386</span><span style=\"font-family:&#34;STSong&#34;\">部分的代码与</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的代码部分对应关系如下&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\">是在</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\">中用汇编实现的。</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\">对应与</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中的</span><span style=\"font-weight:normal\">do_page_fault</span></p>\n<p><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;STSong&#34;\">中然后会进入</span><span style=\"font-weight:normal\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\">以及</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;并在</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\">中根据情况进入具体的实现函数&#xff0c;如对</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\">&#xff0c;对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;STSong&#34;\">处理进入</span><span style=\"font-weight:normal\">do_wp_page</span></p>\n<p><span style=\"font-weight:normal\"><br /></span><span style=\"font-family:&#34;STSong&#34;\">上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</span></p>\n<p><br /> </p>\n<p><br /> </p>\n<p></p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T02:14:15Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/tree/lab5_X\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">不过</span></span><span style=\"font-weight:normal\">ucorebook_code</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span></span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">下面是我在看代码的过程中的总结和一些疑问。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">首先是</span><span style=\"font-weight:normal\">copy_mm</span><span style=\"font-family:&#34;SimSun&#34;\">这个函数。这个函数会判断</span><span style=\"font-weight:normal\">clone_flags</span><span style=\"font-family:&#34;SimSun&#34;\">中</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;SimSun&#34;\">为是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">。这里的</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;SimSun&#34;\">跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">并没啥关系&#xff0c;而是说父子进程共用一个</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;SimSun&#34;\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;SimSun&#34;\">标志的话&#xff0c;就会进行内存的复制。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">复制的关键函数在</span><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;SimSun&#34;\">。这个函数有两个参数&#xff0c;父子进程的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;SimSun&#34;\">结构。</span></p>\n<p><span style=\"font-weight:normal\">dup_mmap</span><span style=\"font-family:&#34;SimSun&#34;\">进程会对父进程的所有</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">进行遍历&#xff0c;然后创建相应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构给子进程。最后会调用</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;SimSun&#34;\">复制</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">的内容。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里的</span><span style=\"font-weight:normal\">copy_range</span><span style=\"font-family:&#34;SimSun&#34;\">有一个参数是</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;不过这个同样跟</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">没啥直接的关系。</span><span style=\"font-weight:normal\">share</span><span style=\"font-family:&#34;SimSun&#34;\">的值是这样确定的&#xff1a;“</span><span style=\"font-weight:normal\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;SimSun&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;SimSun&#34;\">和</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;SimSun&#34;\">。要注意两者的区别&#xff1a;</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;SimSun&#34;\">是</span><span style=\"font-weight:normal\">clone</span><span style=\"font-family:&#34;SimSun&#34;\">的参数&#xff0c;说明父子进程是否使用相同的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;SimSun&#34;\">结构。而</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;SimSun&#34;\">是具体某个</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">的标志&#xff0c;如果没有</span><span style=\"font-weight:normal\">CLONE_VM</span><span style=\"font-family:&#34;SimSun&#34;\">的话&#xff0c;则会将父进程所有的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构都复制给子进程&#xff0c;在这个过程中会判断该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构的</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;SimSun&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;如果是的话则对该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构不是使用复制操作而是直接共享内存。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">一个我觉得需要注意的地方是&#xff0c;这个</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">的地方都会用到</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里实现</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">主要就是如果发现源</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;SimSun&#34;\">的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">具体操作是把改</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;SimSun&#34;\">的</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;SimSun&#34;\">结构和权限</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;SimSun&#34;\">都提出来&#xff0c;去掉</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;SimSun&#34;\">中的</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;SimSun&#34;\">属性&#xff0c;然后再重现通过</span><span style=\"font-weight:normal\">page_insert</span><span style=\"font-family:&#34;SimSun&#34;\">添加到原来的位置&#xff0c;以实现修改</span><span style=\"font-weight:normal\">perm</span><span style=\"font-family:&#34;SimSun&#34;\">的效果。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;</span><span style=\"font-weight:normal\">&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;而对于子进程则是</span><span style=\"font-weight:normal\">&#34;page_insert(to, page, start, perm);&#34;</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;这里的</span><span style=\"font-weight:normal\">PTE_SWAP</span><span style=\"font-family:&#34;SimSun&#34;\">起到什么作用&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;这里如果</span><span style=\"font-weight:normal\">ptep</span><span style=\"font-family:&#34;SimSun&#34;\">的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">位置一的话会进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">的复制&#xff0c;可是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">则会通过</span><span style=\"font-weight:normal\">swap_duplicate</span><span style=\"font-family:&#34;SimSun&#34;\">进行一些处理。这个处理是干什么的&#xff1f;在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;SimSun&#34;\">中也有</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;SimSun&#34;\">这个函数。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这个函数有三个参数&#xff0c;发生故障的</span><span style=\"font-weight:normal\">mm</span><span style=\"font-family:&#34;SimSun&#34;\">结构&#xff0c;错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;发生错误的内存地址。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">首先会找到发生错误的内存地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">然后会对错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">进行判断。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里主要判断了第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位和第一位。其中&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">表示该页不存在&#xff0c;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">表示该页存在。第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">表示是因为读内存中的内容出错的&#xff0c;第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">表示是因为向内存中写东西出错的。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里还会根据出错的原因对</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">的权限进行判断。如果因为读内存出错的会查看</span><span style=\"font-weight:normal\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;如果是因为写内存出错会查看</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里总共会出现</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;SimSun&#34;\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页存在 读出错 有读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页不存在 读出错 有读权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页不存在 写出错 有写权限 继续处理</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页不存在 读出错 无读权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">该页不存在 写出错 无写权限 错误退出</span></p>\n<p><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;SimSun&#34;\">种情况中&#xff0c;</span><span style=\"font-weight:normal\">4</span><span style=\"font-family:&#34;SimSun&#34;\">中</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">没有相应权限的直接错误退出&#xff0c;不过还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">种情况是“该页存在、读出 错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该 是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;SimSun&#34;\">上有</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;SimSun&#34;\">标志&#xff0c;这就有可能导致</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">那有写权限而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;SimSun&#34;\">无写权限&#xff0c;所以“该页存在、写出错、有写权限”还是有可能发生的。而</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;SimSun&#34;\">中却没有</span><span style=\"font-weight:normal\">PTE_R</span><span style=\"font-family:&#34;SimSun&#34;\">之类的标记其是否可读的标志&#xff0c;也就是</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;SimSun&#34;\">总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">注意这里的页是否存在是根据</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">判断的&#xff0c;而不是根据</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">判断的。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">我不太清楚这里</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">在</span><span style=\"font-weight:normal\">ucore_lab</span><span style=\"font-family:&#34;SimSun&#34;\">中的注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br /></span><span style=\"font-family:&#34;SimSun&#34;\">在</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;SimSun&#34;\">的代码注释中是这样解释的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">bit 0 == 0 means no page found, 1 means protection fault<br /></span><span style=\"font-family:&#34;SimSun&#34;\">在我手头的一本</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;SimSun&#34;\">书上是这样说的&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;SimSun&#34;\">的值为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">意义是引起故障的原因是虚拟页不在物理内存</span></p>\n<p><span style=\"font-weight:normal\">P</span><span style=\"font-family:&#34;SimSun&#34;\">的值为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">意义是引起故障的原因是违反了页保护规定</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;总之第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">一定是因为该页不存在。不过这个是跟</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">直接相关吗&#xff1f;第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></p>\n<p> </p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">然后会获取出错地址对应的</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;SimSun&#34;\">。如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;SimSun&#34;\">全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">的话&#xff0c;则会根据</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;SimSun&#34;\">位进行新建页或共享页的操作。与</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">无关&#xff0c;暂且不表。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">如果</span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;SimSun&#34;\">不全为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">的话&#xff0c;则进行以下操作&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">首先有</span><span style=\"font-weight:normal\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;代表该页是否可以进行</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">注意这句话的意义是 </span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">且 </span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">。不过这里不关心</span><span style=\"font-weight:normal\">VM_SHARE</span><span style=\"font-family:&#34;SimSun&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">接着是一句</span><span style=\"font-weight:normal\">assert</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff1a;</span></p>\n<p style=\"font-weight:normal\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这说明程序走到这应该是只有两种可能&#xff1a;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">一种是</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;按下面的操作来看是意味着要进行</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;SimSun&#34;\">换入操作。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">另一种是如果</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">的话&#xff0c;则一定有这是因为写出错、且</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">且符合</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">的条件&#xff08;</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">中的</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff09;。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">也就是说</span><span style=\"font-weight:normal\">Copy on Write</span><span style=\"font-family:&#34;SimSun&#34;\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构是可写的&#xff0c;而对应的</span><span style=\"font-weight:normal\">pte</span><span style=\"font-family:&#34;SimSun&#34;\">是不可写的。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">一个是页故障的错误代码</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">的话说明引起故障的操作是读&#xff0c;是</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">的话说明引起故障的操作是写。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">另一个是错误地址对应的</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构的标志位中&#xff0c;</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">说明该</span><span style=\"font-weight:normal\">vma</span><span style=\"font-family:&#34;SimSun&#34;\">结构不可写</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">还有一个是错误地址对应的页表项&#xff0c;看其</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;SimSun&#34;\">位是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">说明可写&#xff0c;为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">说明不可写。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">再重述一遍&#xff0c;</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">的条件&#xff1a;</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">第</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">位为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">、</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">但</span><span style=\"font-weight:normal\">PTE_W</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">。但</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;SimSun&#34;\">变量仅仅说明了</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">是否为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">其实这里还有另一种情况&#xff0c;就是考虑换出的页的情况。这个后面再说。</span></p>\n<p><br /> </p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">如果这里的</span><span style=\"font-weight:normal\">PTE_P</span><span style=\"font-family:&#34;SimSun&#34;\">和前面</span><span style=\"font-weight:normal\">error_code</span><span style=\"font-family:&#34;SimSun&#34;\">的第</span><span style=\"font-weight:normal\">0</span><span style=\"font-family:&#34;SimSun&#34;\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span><span style=\"font-weight:normal\">8</span><span style=\"font-family:&#34;SimSun&#34;\">种情况中的</span><span style=\"font-weight:normal\">3</span><span style=\"font-family:&#34;SimSun&#34;\">种情况&#xff0c;其中</span><span style=\"font-weight:normal\">2</span><span style=\"font-family:&#34;SimSun&#34;\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">中就是读出错但是有写权限的&#xff0c;交于</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">然后就是具体的处理函数。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">首先是如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;SimSun&#34;\">变量为真&#xff0c;也即仅仅是</span><span style=\"font-weight:normal\">VM_WRITE</span><span style=\"font-family:&#34;SimSun&#34;\">为</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;便会给</span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;SimSun&#34;\">赋一个新页。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">然后如果页面存在的话&#xff0c;获取其</span></span><span style=\"font-weight:normal\">Page</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span></span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">相关处理。</span></span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">首先就是根据</span></span><span style=\"font-weight:normal\">PTE</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">将</span></span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span></span><span style=\"font-weight:normal\">newpage</span><span style=\"font-family:&#34;SimSun&#34;\"><span style=\"font-weight:normal\">释放掉&#xff0c;不然会造成内存泄漏。</span></span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">然后对换入的页进行</span>COW<span style=\"font-family:&#34;SimSun&#34;\">的检测。关于这个&#xff0c;</span>ucorebook<span style=\"font-family:&#34;SimSun&#34;\">上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上 了&#xff0c;则需要把此页通过</span>swap_in_page<span style=\"font-family:&#34;SimSun&#34;\">函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;SimSun&#34;\">页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">这里的“如果进一步发现换入的 页是一个</span>COW<span style=\"font-family:&#34;SimSun&#34;\">页”是通过“</span>if (!(error_code &amp; 2) &amp;&amp; cow)”<span style=\"font-family:&#34;SimSun&#34;\">来判断的</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且</span>VM_WRITE<span style=\"font-family:&#34;SimSun&#34;\">为</span>1”<span style=\"font-family:&#34;SimSun&#34;\">&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;如果满足这个条件的话&#xff0c;会将</span>PTE_W<span style=\"font-family:&#34;SimSun&#34;\">设为</span>0<span style=\"font-family:&#34;SimSun&#34;\">。为什么要这样做&#xff1f;为什么不恢复换出之前的</span>PTE<span style=\"font-family:&#34;SimSun&#34;\">的</span>perm<span style=\"font-family:&#34;SimSun&#34;\">&#xff1f;我的猜测是换出的时候就没有保存该 </span>PTE<span style=\"font-family:&#34;SimSun&#34;\">的</span>perm<span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;现在要根据</span>vma<span style=\"font-family:&#34;SimSun&#34;\">对</span>perm<span style=\"font-family:&#34;SimSun&#34;\">进行恢复。对于有</span>COW<span style=\"font-family:&#34;SimSun&#34;\">嫌疑的&#xff08;</span>VM_WRITE<span style=\"font-family:&#34;SimSun&#34;\">为</span>1<span style=\"font-family:&#34;SimSun&#34;\">&#xff09;&#xff0c;都使其</span>PTE_W<span style=\"font-family:&#34;SimSun&#34;\">使其再接受一次判断。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">再接受一次判断会让其再因为页故障进入一次</span>do_pgfault<span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;现在会使</span>may_copy<span style=\"font-family:&#34;SimSun&#34;\">为</span>0,<span style=\"font-family:&#34;SimSun&#34;\">也就是本次先不进行</span>COW<span style=\"font-family:&#34;SimSun&#34;\">处理。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;为什么不在本次就处理好那&#xff1f;</span></p>\n<p><br /> </p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">然后就是对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">的处理了。如果</span><span style=\"font-weight:normal\">cow</span><span style=\"font-family:&#34;SimSun&#34;\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span><span style=\"font-weight:normal\">1</span><span style=\"font-family:&#34;SimSun&#34;\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;SimSun&#34;\">指向。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">疑问&#xff1a;这里引用次数为什么还会使用</span>swap_page_count<span style=\"font-family:&#34;SimSun&#34;\">这个函数&#xff1f;为什么现在的</span>ucore_lab<span style=\"font-family:&#34;SimSun&#34;\">中已经没有了这个函数&#xff1f;</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">然后会将</span><span style=\"font-weight:normal\">page</span><span style=\"font-family:&#34;SimSun&#34;\">结构插入到页目录表中。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">最后再进行一些收尾工作。</span></p>\n<p><span style=\"font-family:&#34;SimSun&#34;\">因为</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;SimSun&#34;\">的实现过程中参考了</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;SimSun&#34;\">的代码&#xff0c;我去翻了翻</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;SimSun&#34;\">的代码&#xff0c;发现很多相同功能的函数名称在</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;SimSun&#34;\">中和</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;SimSun&#34;\">中都相同或相近&#xff0c;有些关键的算法</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;SimSun&#34;\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span><span style=\"font-weight:normal\">ucore </span><span style=\"font-family:&#34;SimSun&#34;\">的话&#xff0c;下一步可以考虑去研究下</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;SimSun&#34;\">的算法。这里推荐毛徳操老师的《</span><span style=\"font-weight:normal\">Linux</span><span style=\"font-family:&#34;SimSun&#34;\">内核源代码情景分析》&#xff0c;同样是基于</span><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;SimSun&#34;\">的。</span></p>\n<p><span style=\"font-weight:normal\">Linux 2.4.0</span><span style=\"font-family:&#34;SimSun&#34;\">中</span><span style=\"font-weight:normal\">i386</span><span style=\"font-family:&#34;SimSun&#34;\">部分的代码与</span><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;SimSun&#34;\">中的代码部分对应关系如下&#xff1a;</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;SimSun&#34;\">中的</span><span style=\"font-weight:normal\">trap_dispatch</span><span style=\"font-family:&#34;SimSun&#34;\">是在</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;SimSun&#34;\">中的</span><span style=\"font-weight:normal\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;SimSun&#34;\">中用汇编实现的。</span></p>\n<p><span style=\"font-weight:normal\">ucore</span><span style=\"font-family:&#34;SimSun&#34;\">中的</span><span style=\"font-weight:normal\">do_pgfault</span><span style=\"font-family:&#34;SimSun&#34;\">对应与</span><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;SimSun&#34;\">中的</span><span style=\"font-weight:normal\">do_page_fault</span></p>\n<p><span style=\"font-weight:normal\">linux</span><span style=\"font-family:&#34;SimSun&#34;\">中然后会进入</span><span style=\"font-weight:normal\">handle_mm_fault</span><span style=\"font-family:&#34;SimSun&#34;\">以及</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;并在</span><span style=\"font-weight:normal\">handle_pte_fault</span><span style=\"font-family:&#34;SimSun&#34;\">中根据情况进入具体的实现函数&#xff0c;如对</span><span style=\"font-weight:normal\">swap</span><span style=\"font-family:&#34;SimSun&#34;\">处理进入</span><span style=\"font-weight:normal\">do_swap_page</span><span style=\"font-family:&#34;SimSun&#34;\">&#xff0c;对</span><span style=\"font-weight:normal\">COW</span><span style=\"font-family:&#34;SimSun&#34;\">处理进入</span><span style=\"font-weight:normal\">do_wp_page</span></p>\n<p><span style=\"font-weight:normal\"><br /></span><span style=\"font-family:&#34;SimSun&#34;\">上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</span></p>\n<p></p>\n<p></p>\n<p></p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T02:01:33Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/tree/lab5_X\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">不过</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下面是我在看代码的过程中的总结和一些疑问。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先是</span></span><span style=\"font-size:medium\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数。这个函数会判断</span></span><span style=\"font-size:medium\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。这里的</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">跟</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">并没啥关系&#xff0c;而是说父子进程共用一个</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果没有</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">标志的话&#xff0c;就会进行内存的复制。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">复制的关键函数在</span></span><span style=\"font-size:medium\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。这个函数有两个参数&#xff0c;父子进程的</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进程会对父进程的所有</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行遍历&#xff0c;然后创建相应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构给子进程。最后会调用</span></span><span style=\"font-size:medium\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">复制</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的内容。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里的</span></span><span style=\"font-size:medium\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">有一个参数是</span></span><span style=\"font-size:medium\">share</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;不过这个同样跟</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">没啥直接的关系。</span></span><span style=\"font-size:medium\">share</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的值是这样确定的&#xff1a;“</span></span><span style=\"font-size:medium\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;<span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-size:medium\">CLONE_VM和</span><span style=\"font-size:medium\">VM_SHARE。要注意两者的区别&#xff1a;</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-size:medium\">CLONE_VM是clone的参数&#xff0c;说明父子进程是否使用相同的mm结构。而<span style=\"font-size:medium\"></span><span style=\"font-size:medium\">VM_SHARE</span>是具体某个vma的</span>标志&#xff0c;如果没有<span style=\"font-size:medium\">CLONE_VM的话&#xff0c;则会将父进程所有的vma结构都复制给子进程&#xff0c;在这个过程中会判断该vma结构的<span style=\"font-size:medium\"><span style=\"font-size:medium\">VM_SHARE</span></span>是否为1&#xff0c;如果是的话则对该vma结构不是使用复制操作而是直接共享内存。</span></p>\n<p style=\"font-weight:normal\"></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">一个我觉得需要注意的地方是&#xff0c;这个</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">的地方都会用到</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里实现</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">主要就是如果发现源</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">具体操作是把改PTE的page结构和权限perm都提出来&#xff0c;去掉perm中的PTE_W属性&#xff0c;然后再重现通过page_insert添加到原来的位置&#xff0c;以实现修改perm的效果。<br /></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;&#xff0c;而对于子进程则是&#34;page_insert(to, page, start, perm);&#34;&#xff0c;这里的</span></span><span style=\"font-size:medium\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">起到什么作用&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里如果</span></span><span style=\"font-size:medium\">ptep</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位置一的话会进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的复制&#xff0c;可是如果</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">则会通过</span></span><span style=\"font-size:medium\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行一些处理。这个处理是干什么的&#xff1f;在</span></span><span style=\"font-size:medium\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中也有</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数有三个参数&#xff0c;发生故障的</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;发生错误的内存地址。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先会找到发生错误的内存地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会对错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行判断。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里主要判断了第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位和第一位。其中&#xff0c;第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示该页不存在&#xff0c;第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示该页存在。第</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示是因为读内存中的内容出错的&#xff0c;第</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示是因为向内存中写东西出错的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里还会根据出错的原因对</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的权限进行判断。如果因为读内存出错的会查看</span></span><span style=\"font-size:medium\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;如果是因为写内存出错会查看</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里总共会出现</span></span><span style=\"font-size:medium\">8</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 读出错 有读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 读出错 有读权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 写出错 有写权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 写出错 有写权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 读出错 无读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 读出错 无读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 写出错 无写权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 写出错 无写权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\">8种情况中&#xff0c;4中vma没有相应权限的直接错误退出&#xff0c;不过还有1种情况是“该页存在、读出错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的pte上有PTE_W标志&#xff0c;这就有可能导致vma那有写权限而pte无写权限&#xff0c;所以<span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span>“该页存在、写出错、有写权限”还是有可能发生的。而pte中却没有PTE_R之类的标记其是否可读的标志&#xff0c;也就是pte总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">注意这里的页是否存在是根据</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">判断的&#xff0c;而不是根据</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">判断的。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我不太清楚这里error_code的第0位的意义&#xff0c;不过我找了相关的一些说明&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">在ucore_lab中的注释中是这样解释的&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">The P flag   (bit 0) indicates whether the exception was due to a not-present page (0)<br /> *            or to either an access rights violation or the use of a reserved bit (1).<br />在Linux 2.4.0的代码注释中是这样解释的&#xff1a;<br /></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">bit 0 == 0 means no page found, 1 means protection fault<br />在我手头的一本Linux书上是这样说的&#xff1a;<br /></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">P的值为0意义是引起故障的原因是虚拟页不在物理内存</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">P的值为1意义是引起故障的原因是违反了页保护规定</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;总之第0位为0一定是因为该页不存在。不过这个是跟PTE_P直接相关吗&#xff1f;第0位为1说明违反了页保护规定&#xff0c;是不是这样的话一定有无权限写或无权限读&#xff1f;</span></span></p>\n<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会获取出错地址对应的</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。如果</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">全为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则会根据</span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位进行新建页或共享页的操作。与</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">无关&#xff0c;暂且不表。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">不全为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则进行以下操作&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先有</span></span><span style=\"font-size:medium\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;代表该页是否可以进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">注意这句话的意义是 </span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">且 </span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。不过这里不关心</span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">接着是一句</span></span><span style=\"font-size:medium\">assert</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这说明程序走到这应该是只有两种可能&#xff1a;</span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">一种是</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_P</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">&#xff0c;按下面的操作来看是意味着要进行</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">换入操作。</span></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">另一种是如果</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则一定有这是因为写出错、且</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">且符合</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的条件&#xff08;</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff09;。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">也就是说</span></span><span style=\"font-size:medium\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构是可写的&#xff0c;而对应的</span></span><span style=\"font-size:medium\">pte</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是不可写的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">一个是页故障的错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话说明引起故障的操作是读&#xff0c;是</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话说明引起故障的操作是写。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">另一个是错误地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构的标志位中&#xff0c;</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明该</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构可写&#xff0c;为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明该</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构不可写</span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">还有一个是错误地址对应的页表项&#xff0c;看其</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_W</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位是否为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">&#xff0c;为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">说明可写&#xff0c;为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">说明不可写。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">再重述一遍&#xff0c;</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的条件&#xff1a;</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">第1位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">但</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。但</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量仅仅说明了</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p>不过还有另一种情况&#xff0c;就是考虑换出的页的情况。ucorebook上是这样说的&#xff1a;“这里还有一个特殊情况&#xff0c;如果产生访问异常的页已经被换出到硬盘上了&#xff0c;则需要把此页通过swap_in_page函数换入到内存中来&#xff0c;如果进一步发现换入的 页是一个COW页&#xff0c;则把其属性设置为只读&#xff0c;然后异常处理结束返回。但这样重新执行产生异常的写操作&#xff0c;又会触发一次内存访问异常&#xff0c;则又要执行上一段描述的过 程了。”</p>\n<p>这里的“如果进一步发现换入的 页是一个COW页”是通过“if (!(error_code &amp; 2) &amp;&amp; cow)”来判断的</p>\n<p>疑问&#xff1a;为什么这里的判断条件是“是在读该页的时候出错的并且VM_WRITE为1”&#xff1f;那如果是在写这个被交换的页的时候出错的算什么&#xff1f;</p>\n<p>疑问&#xff1a;如果满足这个条件的话&#xff0c;会将PTE_W设为0。为什么要这样做&#xff1f;为什么不恢复换出之前的PTE的perm&#xff1f;我的猜测是换出的时候就没有保存该PTE的perm&#xff0c;现在要根据vma对perm进行恢复。对于有COW嫌疑的&#xff08;VM_WRITE为1&#xff09;&#xff0c;都使其PTE_W使其再接受一次判断</p>\n<p style=\"font-weight:normal\"></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">如果这里的</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_P</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">和前面</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">error_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">的第</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">8</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种情况中的</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">3</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种情况&#xff0c;其中</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">2</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">中就是读出错但是有写权限的&#xff0c;交于</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">处理。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后就是具体的处理函数。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先是如果</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量为真&#xff0c;也即仅仅是</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;便会给</span></span><span style=\"font-size:medium\">newpage</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">赋一个新页。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;为什么要这么早就申请一个</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff1f;这个</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构会在哪些情况下被用到&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后如果页面存在的话&#xff0c;获取其</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">相关处理。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先就是根据</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">将</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span></span><span style=\"font-size:medium\">newpage</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">释放掉&#xff0c;不然会造成内存泄漏。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果成功的话&#xff0c;会再进行一个判断。如果是因为读的原因造成的异常同时</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为真的话&#xff0c;会将</span></span><span style=\"font-size:medium\">perm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">标记去除&#xff0c;且</span></span><span style=\"font-size:medium\">may_copy</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">置为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;也就意味着不会进行接下来的</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里又是为什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后就是对</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的处理了。如果</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span></span><span style=\"font-size:medium\">page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">指向。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;引用次数大于</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是如何判断的&#xff1f;如果到这里这个判断却不满足意味着什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会将</span></span><span style=\"font-size:medium\">page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构插入到页目录表中。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里权限是怎么设的&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">实现之后何时所有的页会重现变为可写&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">最后再进行一些收尾工作。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">因为</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的实现过程中参考了</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的代码&#xff0c;我去翻了翻</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的代码&#xff0c;发现很多相同功能的函数名称在</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中和</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中都相同或相近&#xff0c;有些关键的算法</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span></span><span style=\"font-size:medium\">ucore </span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;下一步可以考虑去研究下</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的算法。这里推荐毛徳操老师的《</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">内核源代码情景分析》&#xff0c;同样是基于</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中</span></span><span style=\"font-size:medium\">i386</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">部分的代码与</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的代码部分对应关系如下&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在</span></span><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中用汇编实现的。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">对应与</span></span><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">do_page_fault</span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中然后会进入</span></span><span style=\"font-size:medium\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">以及</span></span><span style=\"font-size:medium\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;并在</span></span><span style=\"font-size:medium\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中根据情况进入具体的实现函数&#xff0c;如对</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理进入</span></span><span style=\"font-size:medium\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;对</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理进入</span></span><span style=\"font-size:medium\">do_wp_page</span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><br />上面的报告都是我看代码的时候的自己的理解&#xff0c;难免有些不对的地方&#xff0c;希望大家能给我指出。上面那些疑问是我还没解决的&#xff0c;也希望能得到大家的帮助。</p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-14T01:12:45Z", "content": "<p></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/tree/lab5_X\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/commit/86a6\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">不过</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下面是我在看代码的过程中的总结和一些疑问。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先是</span></span><span style=\"font-size:medium\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数。这个函数会判断</span></span><span style=\"font-size:medium\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。这里的</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">跟</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">并没啥关系&#xff0c;而是说父子进程共用一个</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果没有</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">标志的话&#xff0c;就会进行内存的复制。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">复制的关键函数在</span></span><span style=\"font-size:medium\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。这个函数有两个参数&#xff0c;父子进程的</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进程会对父进程的所有</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行遍历&#xff0c;然后创建相应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构给子进程。最后会调用</span></span><span style=\"font-size:medium\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">复制</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的内容。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里的</span></span><span style=\"font-size:medium\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">有一个参数是</span></span><span style=\"font-size:medium\">share</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;不过这个同样跟</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">没啥直接的关系。</span></span><span style=\"font-size:medium\">share</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的值是这样确定的&#xff1a;“</span></span><span style=\"font-size:medium\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\">注意&#xff1a;这里我们可以发现有两个有关共享内存的标志&#xff1a;<span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-size:medium\">CLONE_VM和</span><span style=\"font-size:medium\">VM_SHARE。要注意两者的区别&#xff1a;</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-size:medium\">CLONE_VM是clone的参数&#xff0c;说明父子进程是否使用相同的mm结构。而<span style=\"font-size:medium\"></span><span style=\"font-size:medium\">VM_SHARE</span>是具体某个vma的</span>标志&#xff0c;如果没有<span style=\"font-size:medium\">CLONE_VM的话&#xff0c;则会将父进程所有的vma结构都复制给子进程&#xff0c;在这个过程中会判断该vma结构的<span style=\"font-size:medium\"><span style=\"font-size:medium\">VM_SHARE</span></span>是否为1&#xff0c;如果是的话则对该vma结构不是使用复制操作而是直接共享内存。</span></p>\n<p style=\"font-weight:normal\"></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">一个我觉得需要注意的地方是&#xff0c;这个</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">的地方都会用到</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里实现</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">主要就是如果发现源</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">具体操作是把改PTE的page结构和权限perm都提出来&#xff0c;去掉perm中的PTE_W属性&#xff0c;然后再重现通过page_insert添加到原来的位置&#xff0c;以实现修改perm的效果。<br /></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;对于父进程&#xff0c;有&#xff1a;&#34;page_insert(from, page, start, perm | (*ptep &amp; PTE_SWAP));&#34;&#xff0c;而对于子进程则是&#34;page_insert(to, page, start, perm);&#34;&#xff0c;这里的</span></span><span style=\"font-size:medium\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">起到什么作用&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里如果</span></span><span style=\"font-size:medium\">ptep</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位置一的话会进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的复制&#xff0c;可是如果</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">则会通过</span></span><span style=\"font-size:medium\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行一些处理。这个处理是干什么的&#xff1f;在</span></span><span style=\"font-size:medium\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中也有</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数有三个参数&#xff0c;发生故障的</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;发生错误的内存地址。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先会找到发生错误的内存地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会对错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行判断。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里主要判断了第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位和第一位。其中&#xff0c;第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示该页不存在&#xff0c;第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示该页存在。第</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示是因为读内存中的内容出错的&#xff0c;第</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示是因为向内存中写东西出错的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里还会根据出错的原因对</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的权限进行判断。如果因为读内存出错的会查看</span></span><span style=\"font-size:medium\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;如果是因为写内存出错会查看</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里总共会出现</span></span><span style=\"font-size:medium\">8</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 读出错 有读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 读出错 有读权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 写出错 有写权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 写出错 有写权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 读出错 无读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 读出错 无读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 写出错 无写权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 写出错 无写权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\">8种情况中&#xff0c;4中vma没有相应权限的直接错误退出&#xff0c;不过还有1种情况是“该页存在、读出错、有读权限”也会直接错误退出。与之对应的是&#xff0c;“该页存在、写出错、有写权限”却会被继续处理。这是为什么那&#xff1f;我感觉应该是因为这两种情况看起来都应该是正常的却出了错&#xff0c;这是不应该出现的。不过在具体的pte上有PTE_W标志&#xff0c;这就有可能导致vma那有写权限而pte无写权限&#xff0c;所以<span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span>“该页存在、写出错、有写权限”还是有可能发生的。而pte中却没有PTE_R之类的标记其是否可读的标志&#xff0c;也就是pte总是可读的。这样的话出现“该页存在、读出错、有读权限”就实在解释不通了&#xff0c;于是就退出了。</p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">注意这里的页是否存在是根据</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">判断的&#xff0c;而不是根据</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">判断的。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里的</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明什么&#xff1f;有些地方写的这说明违反页保护规定&#xff0c;是不是意味着如果进入</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">时出错地址对应的</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">就一定是无相应权限&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">页故障的错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">第0位记录了引起故障的原因是不是因为虚拟页不在物理内存&#xff1f;这个是如何判断的&#xff0c;是看页表项的</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位吗&#xff1f;如果该项为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话那故障又为什么会发生那&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会获取出错地址对应的</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。如果</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">全为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则会根据</span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位进行新建页或共享页的操作。与</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">无关&#xff0c;暂且不表。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">不全为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则进行以下操作&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先有</span></span><span style=\"font-size:medium\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;代表该页是否可以进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">注意这句话的意义是 </span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">且 </span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。不过这里不关心</span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">接着是一句</span></span><span style=\"font-size:medium\">assert</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这说明程序走到这应该是只有两种可能&#xff1a;</span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">一种是</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_P</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">&#xff0c;按下面的操作来看是意味着要进行</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">换入操作。</span></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">另一种是如果</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则一定有这是因为写出错、且</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">且符合</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的条件&#xff08;</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff09;。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">也就是说</span></span><span style=\"font-size:medium\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构是可写的&#xff0c;而对应的</span></span><span style=\"font-size:medium\">pte</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是不可写的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">一个是页故障的错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话说明引起故障的操作是读&#xff0c;是</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话说明引起故障的操作是写。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">另一个是错误地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构的标志位中&#xff0c;</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明该</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构可写&#xff0c;为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明该</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构不可写</span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">还有一个是错误地址对应的页表项&#xff0c;看其</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_W</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位是否为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">&#xff0c;为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">说明可写&#xff0c;为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">说明不可写。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">再重述一遍&#xff0c;</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的条件&#xff1a;</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">第一位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">但</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。但</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量仅仅说明了</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">但是&#xff0c;要注意这里的推断是根据</span></span><span style=\"font-size:medium\">assert</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">来的。推的过程不是非常严谨&#xff0c;因为到现在并没有哪个地方明确说明了满足</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的时候不会进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。事实上后面也证实了这一点。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;注意到</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量与是否满足</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">并不完全一样&#xff0c;</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量为真时并不一定会引起我上面所说的那种</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">条件。而后面有几处就是对</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量进行判断的。是不是对与另一种情况&#xff08;</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">随意&#xff09;的情况下&#xff0c;也是按</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理的&#xff1f;</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是不是在换出之后才知道&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">如果这里的</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_P</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">和前面</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">error_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">的第</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">8</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种情况中的</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">3</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种情况&#xff0c;其中</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">2</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">中就是读出错但是有写权限的&#xff0c;交于</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">处理。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后就是具体的处理函数。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先是如果</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量为真&#xff0c;也即仅仅是</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;便会给</span></span><span style=\"font-size:medium\">newpage</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">赋一个新页。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;为什么要这么早就申请一个</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff1f;这个</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构会在哪些情况下被用到&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后如果页面存在的话&#xff0c;获取其</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">相关处理。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先就是根据</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">将</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span></span><span style=\"font-size:medium\">newpage</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">释放掉&#xff0c;不然会造成内存泄漏。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果成功的话&#xff0c;会再进行一个判断。如果是因为读的原因造成的异常同时</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为真的话&#xff0c;会将</span></span><span style=\"font-size:medium\">perm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">标记去除&#xff0c;且</span></span><span style=\"font-size:medium\">may_copy</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">置为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;也就意味着不会进行接下来的</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里又是为什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后就是对</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的处理了。如果</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span></span><span style=\"font-size:medium\">page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">指向。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;引用次数大于</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是如何判断的&#xff1f;如果到这里这个判断却不满足意味着什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会将</span></span><span style=\"font-size:medium\">page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构插入到页目录表中。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里权限是怎么设的&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">实现之后何时所有的页会重现变为可写&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">最后再进行一些收尾工作。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">因为</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的实现过程中参考了</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的代码&#xff0c;我去翻了翻</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的代码&#xff0c;发现很多相同功能的函数名称在</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中和</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中都相同或相近&#xff0c;有些关键的算法</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span></span><span style=\"font-size:medium\">ucore </span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;下一步可以考虑去研究下</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的算法。这里推荐毛徳操老师的《</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">内核源代码情景分析》&#xff0c;同样是基于</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中</span></span><span style=\"font-size:medium\">i386</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">部分的代码与</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的代码部分对应关系如下&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在</span></span><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中用汇编实现的。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">对应与</span></span><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">do_page_fault</span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中然后会进入</span></span><span style=\"font-size:medium\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">以及</span></span><span style=\"font-size:medium\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;并在</span></span><span style=\"font-size:medium\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中根据情况进入具体的实现函数&#xff0c;如对</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理进入</span></span><span style=\"font-size:medium\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;对</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理进入</span></span><span style=\"font-size:medium\">do_wp_page</span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">其实上面的一些疑问我觉得我还是可以再多查阅些相关代码来解决&#xff0c;不过一方面是我前期已经花了大量的时间了&#xff0c;一方面这两天我正好有事&#xff0c;一方面不知道如果周末再发的话还能不能得到老师和助教的回复&#xff0c;因为我想有可能的话在周末实现在最新的</span></span><span style=\"font-size:medium\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中加入</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的支持&#xff0c;所以就现在先发出来了。这两天有空的话我会继续修改我的描述&#xff0c;把新的发现加进去。不过还是希望大家能够多解答些我的这些疑问&#xff01;</span></span></p>\n<p></p>"}, {"anon": "no", "uid": "i74g3aomM8b", "subject": "ucore中实现COW的报告和疑问", "created": "2015-06-11T16:31:29Z", "content": "<p></p><p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">我想做下</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Lab5</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Challenge</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Copy on Write</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。搜了一下资料&#xff0c;发现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的直接实现有两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code\">ucorebook_code</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;做的比较早&#xff0c;与现在的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_lab</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">还是有一定的差距的&#xff0c;另一个是</span></span><a href=\"https://github.com/chyyuu/ucore_lab/tree/lab5_X\" target=\"_blank\">ucore_lab中的lab5_X分支</a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;实现较为简陋&#xff0c;没有实现</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制。还有就是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的一部分算法思想是基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux 2.4.0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff0c;可以在这里找到一些相关实现。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里我主要研究的是 </span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">上的实现。这里在</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj9.2\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj9.2</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、物理内存管理的时候就已经开始为</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">做准备&#xff0c;到</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/tree/proj12\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">proj12</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、实现用户态程序的地方算是完整实现了基于</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的进程创建。主要实现在两个地方&#xff0c;一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/proj12/code/kern/mm/pmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">pmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">copy_range</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;是在创建进程、复制内存的时候起作用。还有一个是</span></span><a target=\"_blank\" href=\"https://github.com/chyyuu/ucorebook_code/blob/master/code/kern/mm/vmm.c\"><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">vmm.c</span></span></a><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">do_pgfault&#xff0c;</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在中断处理的时候起作用。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里有一个参考资料是</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucore_book</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的<a target=\"_blank\" href=\"http://chyyuu.gitbooks.io/ucorebook/content/zh/chapter-3/implement_copy_on_write.html\">实现写时复制</a></span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">不过</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">ucorebook_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的代码注释很少&#xff0c;相关的资料也比较少&#xff0c;我看这个花了很长实现&#xff0c;查看了</span></span><span style=\"font-family:&#34;DejaVu Serif&#34;,serif\"><span style=\"font-size:medium\">Linux</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的相关实现以及其他一些参考资料&#xff0c;也半推断半猜测地解决了一些问题&#xff0c;但觉得还是有很多不是很清楚的问题。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">下面是我在看代码的过程中的总结和一些疑问。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先是</span></span><span style=\"font-size:medium\">copy_mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数。这个函数会判断</span></span><span style=\"font-size:medium\">clone_flags</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。这里的</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">跟</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">并没啥关系&#xff0c;而是说父子进程共用一个</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;也就意味着一个进程对于其内存的修改会直接影响到另一个进程。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果没有</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">标志的话&#xff0c;就会进行内存的复制。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">复制的关键函数在</span></span><span style=\"font-size:medium\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。这个函数有两个参数&#xff0c;父子进程的</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">dup_mmap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进程会对父进程的所有</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行遍历&#xff0c;然后创建相应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构给子进程。最后会调用</span></span><span style=\"font-size:medium\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">复制</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的内容。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里的</span></span><span style=\"font-size:medium\">copy_range</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">有一个参数是</span></span><span style=\"font-size:medium\">share</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;不过这个同样跟</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">没啥直接的关系。</span></span><span style=\"font-size:medium\">share</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的值是这样确定的&#xff1a;“</span></span><span style=\"font-size:medium\">bool share = (vma-&gt;vm_flags &amp; VM_SHARE);”</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里的 </span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">好像也是负责共享内存的&#xff0c;实现的结果好像也都一样&#xff0c;拿它跟前面的</span></span><span style=\"font-size:medium\">CLONE_VM</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">有什么区别那&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">一个我觉得需要注意的地方是&#xff0c;这个</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">机制&#xff0c;其实并没有哪个函数的哪个参数指定要不要使用。而是跟操作系统是否实现了这个机制有关。如果操作系统实现了&#xff0c;那能用到</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">的地方都会用到</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">。如果操作系统没实现&#xff0c;那么就都不使用。这里把具体细节屏蔽了&#xff0c;具体的进程是感觉不到的。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里实现</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">主要就是如果发现源</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;则将该位清零之后同时加入到父子进程中。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里是如何清除</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的&#xff1f;依靠</span></span><span style=\"font-size:medium\">perm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1f;具体如何实现&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里的</span></span><span style=\"font-size:medium\">PTE_SWAP</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里如果</span></span><span style=\"font-size:medium\">ptep</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位置一的话会进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的复制&#xff0c;可是如果</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">则会通过</span></span><span style=\"font-size:medium\">swap_duplicate</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行一些处理。这个处理是干什么的&#xff1f;在</span></span><span style=\"font-size:medium\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中也有</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;为什么没有进行这个操作&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数还是总体比较好理解的&#xff0c;最让我纠结的是</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这个函数有三个参数&#xff0c;发生故障的</span></span><span style=\"font-size:medium\">mm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;发生错误的内存地址。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先会找到发生错误的内存地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会对错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">进行判断。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里主要判断了第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位和第一位。其中&#xff0c;第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示该页不存在&#xff0c;第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示该页存在。第</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示是因为读内存中的内容出错的&#xff0c;第</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">表示是因为向内存中写东西出错的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里还会根据出错的原因对</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的权限进行判断。如果因为读内存出错的会查看</span></span><span style=\"font-size:medium\">VM_READ | VM_EXEC</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;如果是因为写内存出错会查看</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里总共会出现</span></span><span style=\"font-size:medium\">8</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">种情况&#xff0c;根据判断看起来好像处理是这样的&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 读出错 有读权限 错误退出&#xff08;疑问&#xff1a;是因为不可能吗&#xff1f;&#xff09;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 读出错 有读权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 写出错 有写权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 写出错 有写权限 继续处理</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 读出错 无读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 读出错 无读权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页存在 写出错 无写权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">该页不存在 写出错 无写权限 错误退出</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">注意这里的页是否存在是根据</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">判断的&#xff0c;而不是根据</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">判断的。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里的</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明什么&#xff1f;有些地方写的这说明违反页保护规定&#xff0c;是不是意味着如果进入</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">时出错地址对应的</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的第</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">就一定是无相应权限&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">页故障的错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">第零位记录了引起故障的原因是不是因为虚拟页不在物理内存&#xff1f;这个是如何判断的&#xff0c;是看页表项的</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位吗&#xff1f;如果该项为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话那故障又为什么会发生那&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会获取出错地址对应的</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。如果</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">全为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则会根据</span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位进行新建页或共享页的操作。与</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">无关&#xff0c;暂且不表。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">不全为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则进行以下操作&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先有</span></span><span style=\"font-size:medium\">bool cow = ((vma-&gt;vm_flags &amp; (VM_SHARE | VM_WRITE)) == VM_WRITE)</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;代表该页是否可以进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">注意这句话的意义是 </span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">且 </span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。不过这里不关心</span></span><span style=\"font-size:medium\">VM_SHARE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">接着是一句</span></span><span style=\"font-size:medium\">assert</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">assert(!(*ptep &amp; PTE_P) || ((error_code &amp; 2) &amp;&amp; !(*ptep &amp; PTE_W) &amp;&amp; cow));</span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这说明程序走到这应该是只有两种可能&#xff1a;</span></span></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">一种是</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_P</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">&#xff0c;按下面的操作来看是意味着要进行</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">swap</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">换入操作。</span></span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">另一种是如果</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;则一定有这是因为写出错、且</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">且符合</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的条件&#xff08;</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff09;。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">也就是说</span></span><span style=\"font-size:medium\">Copy on Write</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">机制执行的条件是&#xff0c;引起故障的原因是写&#xff0c;该地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构是可写的&#xff0c;而对应的</span></span><span style=\"font-size:medium\">pte</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是不可写的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">这里需要格外注意的是&#xff0c;这里涉及到三个是否可写的标志&#xff0c;一定要分清楚。我一开始就在这纠结了好长好长时间。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">一个是页故障的错误代码</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;其第一位记录引起故障的原因是读还是写&#xff0c;如果是</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话说明引起故障的操作是读&#xff0c;是</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话说明引起故障的操作是写。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">另一个是错误地址对应的</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构的标志位中&#xff0c;</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">位是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明该</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构可写&#xff0c;为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">说明该</span></span><span style=\"font-size:medium\">vma</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构不可写</span></span></p>\n<p> <span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">还有一个是错误地址对应的页表项&#xff0c;看其</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_W</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位是否为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">&#xff0c;为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">说明可写&#xff0c;为</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">说明不可写。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">再重述一遍&#xff0c;</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的条件&#xff1a;</span></span><span style=\"font-size:medium\">error_code</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">第一位为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">但</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。但</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量仅仅说明了</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是否为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">但是&#xff0c;但是&#xff0c;要注意这里的推断是根据</span></span><span style=\"font-size:medium\">assert</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">来的。推的过程不是非常严谨&#xff0c;因为到现在并没有哪个地方明确说明了满足</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的时候不会进行</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。事实上后面也证实了这一点。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;注意到</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量与是否满足</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">并不完全一样&#xff0c;</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量为真时并不一定会引起我上面所说的那种</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">条件。而后面有几处就是对</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量进行判断的。是不是对与另一种情况&#xff08;</span></span><span style=\"font-size:medium\">PTE_P</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">、</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">随意&#xff09;的情况下&#xff0c;也是按</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理的&#xff1f;</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是不是在换出之后才知道&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">如果这里的</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">PTE_P</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">和前面</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">error_code</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">的第</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">0</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">位意义一样的话&#xff0c;这也就是说&#xff0c;之前</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">8</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种情况中的</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">3</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种情况&#xff0c;其中</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">2</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">种为有读写权限但页不存在的&#xff0c;交于虚拟内存处理&#xff0c;还有</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">1</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">中就是读出错但是有写权限的&#xff0c;交于</span></span></span><span style=\"font-size:medium\"><span style=\"font-weight:normal\">COW</span></span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\"><span style=\"font-weight:normal\">处理。</span></span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后就是具体的处理函数。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先是如果</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">变量为真&#xff0c;也即仅仅是</span></span><span style=\"font-size:medium\">VM_WRITE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;便会给</span></span><span style=\"font-size:medium\">newpage</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">赋一个新页。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;为什么要这么早就申请一个</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff1f;这个</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构会在哪些情况下被用到&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后如果页面存在的话&#xff0c;获取其</span></span><span style=\"font-size:medium\">Page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构&#xff0c;如果页面不存在的话&#xff0c;则进入</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">相关处理。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">首先就是根据</span></span><span style=\"font-size:medium\">PTE</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">将</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">从外存中换入。如果未能成功换入的话&#xff0c;函数退出前要记得把刚才新分配的</span></span><span style=\"font-size:medium\">newpage</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">释放掉&#xff0c;不然会造成内存泄漏。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">如果成功的话&#xff0c;会再进行一个判断。如果是因为读的原因造成的异常同时</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为真的话&#xff0c;会将</span></span><span style=\"font-size:medium\">perm</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">PTE_W</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">标记去除&#xff0c;且</span></span><span style=\"font-size:medium\">may_copy</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">置为</span></span><span style=\"font-size:medium\">0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;也就意味着不会进行接下来的</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里又是为什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后就是对</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的处理了。如果</span></span><span style=\"font-size:medium\">cow</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">为真且未通过上面的判断的话&#xff0c;就会判断该页被引用的次数是否大于</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">。如果是的话则会将将原来的页的内容复制到新的页中&#xff0c;同时让新的页被</span></span><span style=\"font-size:medium\">page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">指向。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;引用次数大于</span></span><span style=\"font-size:medium\">1</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是如何判断的&#xff1f;如果到这里这个判断却不满足意味着什么&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">然后会将</span></span><span style=\"font-size:medium\">page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">结构插入到页目录表中。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;这里权限是怎么设的&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">疑问&#xff1a;</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">实现之后何时所有的页会重现变为可写&#xff1f;</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">最后再进行一些收尾工作。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">因为</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的实现过程中参考了</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的代码&#xff0c;我去翻了翻</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的代码&#xff0c;发现很多相同功能的函数名称在</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中和</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中都相同或相近&#xff0c;有些关键的算法</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">也只是做了简化&#xff0c;核心部分并没有删掉。所以我觉得如果能够深入了解</span></span><span style=\"font-size:medium\">ucore </span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的话&#xff0c;下一步可以考虑去研究下</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的算法。这里推荐毛徳操老师的《</span></span><span style=\"font-size:medium\">Linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">内核源代码情景分析》&#xff0c;同样是基于</span></span><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的。</span></span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">Linux 2.4.0</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中</span></span><span style=\"font-size:medium\">i386</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">部分的代码与</span></span><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的代码部分对应关系如下&#xff1a;</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">trap_dispatch</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">是在</span></span><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">arch/i386/kernel/entry.S</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中用汇编实现的。</span></span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">ucore</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">do_pgfault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">对应与</span></span><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中的</span></span><span style=\"font-size:medium\">do_page_fault</span></p>\n<p style=\"font-weight:normal\"><span style=\"font-size:medium\">linux</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中然后会进入</span></span><span style=\"font-size:medium\">handle_mm_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">以及</span></span><span style=\"font-size:medium\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;并在</span></span><span style=\"font-size:medium\">handle_pte_fault</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中根据情况进入具体的实现函数&#xff0c;如对</span></span><span style=\"font-size:medium\">swap</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理进入</span></span><span style=\"font-size:medium\">do_swap_page</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">&#xff0c;对</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">处理进入</span></span><span style=\"font-size:medium\">do_wp_page</span></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"></p>\n<p style=\"font-weight:normal\"><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">其实上面的一些疑问我觉得我还是可以再多查阅些相关代码来解决&#xff0c;不过一方面是我前期已经花了大量的时间了&#xff0c;一方面这两天我正好有事&#xff0c;一方面不知道如果周末再发的话还能不能得到老师和助教的回复&#xff0c;因为我想有可能的话在周末实现在最新的</span></span><span style=\"font-size:medium\">ucore_lab</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">中加入</span></span><span style=\"font-size:medium\">COW</span><span style=\"font-family:&#34;STSong&#34;\"><span style=\"font-size:medium\">的支持&#xff0c;所以就现在先发出来了。这两天有空的话我会继续修改我的描述&#xff0c;把新的发现加进去。不过还是希望大家能够多解答些我的这些疑问&#xff01;</span></span></p>\n<p></p>"}], "type": "question", "tags": ["lab5", "student", "unanswered"], "tag_good": [{"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 158, "children": [], "tag_good_arr": ["hcrrjuyequh4bt"], "no_answer": 1, "id": "iasek91snli3rd", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 2, "num_favorites": 2, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167870591, "default_anonymity": "no"}, "error": null, "aid": "kyuzq3cvi3b17m"}