{"result": {"history_size": 1, "folders": ["lab2"], "nr": 1522, "data": {"embed_links": []}, "created": "2021-04-05T09:04:59Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "kma28mmq2242ou", "data": "kn4db8bxuk54jy", "v": "all", "type": "create", "when": "2021-04-05T09:04:59Z"}, {"anon": "no", "uid": "kker3fspnhl7go", "data": "kn7n1uz0ppo2uq", "to": "kn4db8bu6zo4jx", "type": "s_answer", "when": "2021-04-07T16:00:56Z"}, {"anon": "no", "uid": "kma28mmq2242ou", "to": "kn4db8bu6zo4jx", "type": "followup", "when": "2021-04-08T03:35:22Z", "cid": "kn8buwpo9c5694"}, {"anon": "no", "uid": "kma28mmq2242ou", "to": "kn4db8bu6zo4jx", "type": "feedback", "when": "2021-04-08T03:38:34Z", "cid": "kn8bz0wvi7x3sg"}, {"anon": "no", "uid": "kker3fspnhl7go", "to": "kn4db8bu6zo4jx", "type": "feedback", "when": "2021-04-08T05:59:09Z", "cid": "kn8gzt4arkk44d"}, {"anon": "no", "uid": "kma28mmq2242ou", "to": "kn4db8bu6zo4jx", "type": "feedback", "when": "2021-04-08T06:02:15Z", "cid": "kn8h3snc3j71hl"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "kma28mmq2242ou", "subject": "关于page的reference", "created": "2021-04-05T09:04:59Z", "content": "<md>在函数boot_map_segment中将虚拟地址KERNBASE-KERNBASE+KMEMSIZE一一映射到0-KERNBASE的物理地址，可是并没有将物理page的reference加1，请问这不会出问题吗？包括boot_alloc_page之后页目录表对应的物理frame的reference还是0，也就是说它可能会被kernel在不知情的情况下free掉，因为只要reference为0就可以free，这里是不是有点问题呢？还是说我忽略掉了哪些代码可以保证这里不会出问题？</md>"}], "type": "question", "tags": ["lab2", "student"], "tag_good": [], "unique_views": 130, "children": [{"history_size": 1, "folders": [], "data": {"embed_links": []}, "created": "2021-04-07T16:00:56Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "ZYOYO", "endorser": {}, "admin": false, "photo": "1616123641_200.jpg", "id": "kma28mmq2242ou", "photo_url": "https://cdn-uploads.piazza.com/photos/kma28mmq2242ou/1616123641_200.jpg", "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "kker3fspnhl7go", "subject": "", "created": "2021-04-07T16:00:56Z", "content": "<p>1. boot_map_segment 是将虚拟地址0xC000,0000~0xF800,0000映射线型地址0x0~0x3800,0000,但是根据log信息&#xff0c;实际的物理内存只有大约128M左右&#xff0c;<br />映射的范围远远超过了实际内存&#xff0c;我想原因可能是&#xff1a;a.为了兼容更大物理的内存&#xff0c;b.便于kernel直接访问所有的内存<br />2. 只要映射关系存在&#xff0c;不管是否被alloc_pages/free_pages管理&#xff0c;kernel都可以访问该地址。<br />我在page_init中添加了一个打印&#xff1a;<br />page_init(void) {<br />...<br />                 cprintf (&#34;=&gt;begin=0x%08llx,end=0x%08llx,pa2page=0x%08x,num=%d\\n&#34;,<br />                    begin, end, (unsigned int)pa2page(begin),<br />                    (end - begin) / PGSIZE);<br />                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);<br />log是&#xff1a;<br />=&gt;begin=0x00229000,end=0x07ffe000,pa2page=0xc012d520,num=32213<br />可以看到&#xff0c;被alloc_pages/free_pages 管理的物理地址范围是0x00229000~0x07ffe000&#xff0c;对应的虚拟地址就是0x0C0229000~0xC7ffe000&#xff0c;大小是125M。</p>\n<p>打个不恰当的比分&#xff0c;老板要求财务的账本要把公司的钱都管理起来&#xff0c;员工申请/退回的报销都要由财务登记入册&#xff0c;但是老板有权绕开财务直接花公司的钱。kernel就是这个老板。</p>"}], "type": "s_answer", "tag_endorse_arr": ["kma28mmq2242ou"], "children": [], "id": "kn7n1uyy5se2up", "config": {"editor": "rte"}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<md>谢谢你的回答！确实被alloc_pages/free_pages 管理的物理地址范围是0x00229000~0x07ffe000（我的输出是begin=0x001ba000,end=0x07ffe000,这个和kernel的大小有关），所以kernel对应的物理内存（是reserved）确实是不会被free掉，这没有问题。但是还有一个问题，就是boot_alloc_page返回的就是可alloc/free的范围里面的，但是此时这个page的reference是0，如果又有别的虚拟页映射到这个pdt所在的物理页（通过page_insert），再通过page_remove_pte删除这个映射关系，那这个物理页就会被free（我也验证过了，再pmm_init方法加入如下代码，输出的是page free？1，见下图，说明这个时候这个物理页是空闲可分配的），\n![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fkma28mmq2242ou%2Fdda692e645c8b7ba610acee28dc45465c481c27d6a5b345d7213fe5133561676%2Fimage.png)\n![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fkma28mmq2242ou%2F9b3bce568927b0d93f9ab2cb42f246a67d5ba509dae92b831f1986db60b98bc4%2Fimage.png)\n如果刚好别的用户进程因为缺页而被分配到了这一页，那这一页的内容不就会被覆盖了吗？（因为这个物理页和其他的可分配物理页地位是一样，没有什么特殊的权限，而且实际上就是可分配区域的第一个page）这个时候kernel确实还是可以访问到这里的内容，但是已经不是它想要的pde了。\n当然我不确定用户进程是否有方法能够将虚拟页映射到特定的物理页，如果不行的话就没有我说的这种情况。但我还是觉得只要分配得到了一个page就还是马上将它的reference设成1比较好，（没错，说的就是boot_alloc_page）这样也符合reference本身的含义。</md>", "created": "2021-04-08T03:35:22Z", "bucket_order": 14, "bucket_name": "Week 4/4 - 4/10", "type": "followup", "tag_good": [], "uid": "kma28mmq2242ou", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<md>上面的代码的2-4行都是要被注释掉才可以运行到下面的，我忘记注释掉了orz</md>", "created": "2021-04-08T03:38:34Z", "bucket_order": 14, "bucket_name": "Week 4/4 - 4/10", "type": "feedback", "tag_good": [], "uid": "kma28mmq2242ou", "children": [], "tag_good_arr": [], "id": "kn8bz0wvi7x3sg", "updated": "2021-04-08T03:38:34Z", "config": {"editor": "md"}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>1.如果boot_pgdir对应的page被再分配使用&#xff0c;肯定会造成映射关系的混乱&#xff0c;毕竟boot_pgdir是一级页表&#xff0c;会使kernel崩溃</p>\n<p>2.get_pte(boot_pgdir, 0x0, 0)拿到的是虚拟地址0对应的pte&#xff0c;boot_pgdir对应的pte是get_pte(boot_pgdir, (uintptr_t)boot_pgdir, 0)</p>\n<p>我在 boot_map_segment后做了你的测试&#xff1a;</p>\n<p>    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);</p>\n<p>    pte_t * ptep = get_pte(boot_pgdir, (uintptr_t)boot_pgdir, 0);<br />    page_remove_pte(boot_pgdir, (uintptr_t)boot_pgdir, ptep);</p>\n<p>会造成ucore不断重启。</p>\n<p>3.boot_pgdir的使用是在kernel下&#xff0c;应用程序没有权限能访问到</p>", "created": "2021-04-08T05:59:09Z", "bucket_order": 14, "bucket_name": "Week 4/4 - 4/10", "type": "feedback", "tag_good": [{"role": "student", "name": "ZYOYO", "endorser": {}, "admin": false, "photo": "1616123641_200.jpg", "id": "kma28mmq2242ou", "photo_url": "https://cdn-uploads.piazza.com/photos/kma28mmq2242ou/1616123641_200.jpg", "published": true, "us": false, "facebook_id": null}], "uid": "kker3fspnhl7go", "children": [], "tag_good_arr": ["kma28mmq2242ou"], "id": "kn8gzt4arkk44d", "updated": "2021-04-08T05:59:09Z", "config": {"editor": "rte"}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<md>确实，我也是会不断的重启，谢谢你的解答~</md>", "created": "2021-04-08T06:02:15Z", "bucket_order": 14, "bucket_name": "Week 4/4 - 4/10", "type": "feedback", "tag_good": [], "uid": "kma28mmq2242ou", "children": [], "tag_good_arr": [], "id": "kn8h3snc3j71hl", "updated": "2021-04-08T06:02:15Z", "config": {"editor": "md"}}], "tag_good_arr": [], "no_answer": 0, "id": "kn8buwpo9c5694", "updated": "2021-04-08T03:35:22Z", "config": {"editor": "md"}}], "tag_good_arr": [], "no_answer": 0, "id": "kn4db8bu6zo4jx", "config": {"editor": "md", "seen": {"1404": 0, "1303": 9, "1331": 4, "1452": 8, "1350": 1, "172": 7, "507": 2, "262": 6, "1307": 3, "274": 5}, "has_emails_sent": 1}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 2, "num_favorites": 2, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643170258801, "default_anonymity": "no"}, "error": null, "aid": "kyv15a418d17m8"}