{"result": {"folders": ["lab4"], "nr": 754, "data": {"embed_links": []}, "created": "2016-03-31T02:57:44Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-03-31T02:57:44Z", "data": "imfoy732wm06su", "type": "create"}, {"to": "imfoy72ztnk6st", "uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-31T03:05:53Z", "data": "imfp8ospqtq65m", "type": "s_answer"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0ayxqk6wry734", "subject": "关于idleproc和initproc切换时的通用寄存器恢复问题", "created": "2016-03-31T02:57:44Z", "content": "<p>idleproc创建完initproc之后继续运行并等待调度&#xff0c;真正切换是发生在schedule函数里面</p>\n<p>switch_to把两个进程的通用寄存器分别进行了保存和恢复&#xff0c;但initproc之后执行的位置是forkret</p>\n<p>也就是说我们模拟了一次中断&#xff08;其实这里应该并没中断&#xff09;&#xff0c;然后iret了&#xff0c;但是在iret之前popal又把所有通用寄存器刷新了一遍。。前面的switch_to意义何在。。</p>\n<p>一般来说&#xff0c;如果进程切换是先中断的&#xff0c;那么tf应该存了一份regs&#xff0c;然后你swtich_to换一遍regs&#xff0c;可是iret之前还得刷新一遍&#xff0c;所以context和tf-&gt;tf_regs到底有什么区别=_=</p>"}], "type": "question", "tags": ["lab4", "student"], "tag_good": [{"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "邓博文", "endorser": {}, "admin": false, "photo": null, "id": "k3dsnn1uqxy75v", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "liuyu", "endorser": {}, "admin": false, "photo": null, "id": "k6ngyr7kqun3oi", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "unique_views": 126, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2016-03-31T03:05:53Z", "bucket_order": 3, "tag_endorse": [], "bucket_name": "Today", "id": "imfp8osm4bj65l", "history": [{"anon": "no", "uid": "i0f9pvv0uxm6ko", "subject": "", "created": "2016-03-31T03:05:53Z", "content": "<p>我的理解是</p>\n<p></p>\n<p>tf在lab4中的使用&#xff1a;tf用来保存中断帧&#xff0c;在lab4中线程初始化的时候被使用&#xff0c;之后的lab中还被用于处理中断、特权级切换。在调度通过switch_to第一次切换到线程时&#xff0c;先进入forkret函数&#xff0c;这个函数利用中断帧起到一个权限改变的作用。之后&#xff0c;forkret函数根据中断帧的情况iret到kernel_thread_entry这个通用的线程入口函数&#xff0c;由这个函数跳转到线程的执行地址(在*%ebx中)。</p>\n<p></p>\n<p>总的来说&#xff0c;两者的定位完全不同。tf是用来处理中断的&#xff0c;里面会记录中断时候的信息&#xff0c;交给trap处理。而context是用来切换进程的。你会产生它们作用重叠&#xff0c;仅仅是因为&#xff0c;在一个进程第一次起来的时候&#xff0c;系统是通过构造中断帧跳转到用户态的&#xff0c;看起来就像tf起到了切换的作用。</p>"}], "type": "s_answer", "tag_endorse_arr": [], "config": {}, "is_tag_endorse": false}], "tag_good_arr": ["hdjonbiyfs62ie", "k3dsnn1uqxy75v", "k6ngyr7kqun3oi"], "no_answer": 0, "id": "imfoy72ztnk6st", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 5, "num_favorites": 2, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168396426, "default_anonymity": "no"}, "error": null, "aid": "kyv01d3ex2iza"}