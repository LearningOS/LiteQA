{"result": {"folders": ["lab4"], "nr": 1402, "data": {"embed_links": []}, "created": "2020-02-27T23:18:20Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "stud", "data": "k75dcczqlnq36e", "type": "create", "when": "2020-02-27T23:18:20Z", "uid_a": "a_0"}, {"anon": "no", "uid": "jsjp32n2zAHb", "data": "k75m24nlsc57gy", "to": "k75dcczofzk36d", "type": "s_answer", "when": "2020-02-28T03:22:20Z"}, {"anon": "stud", "to": "k75dcczofzk36d", "type": "followup", "when": "2020-02-28T08:26:17Z", "uid_a": "a_0"}, {"anon": "no", "uid": "jsjp32n2zAHb", "data": "k761loego5qql", "type": "s_answer_update", "when": "2020-02-28T10:37:26Z"}, {"anon": "no", "uid": "jsjp32n2zAHb", "to": "k75dcczofzk36d", "type": "feedback", "when": "2020-02-28T12:50:43Z"}, {"anon": "no", "uid": "jshne0d1gvw4mr", "to": "k75dcczofzk36d", "type": "feedback", "when": "2020-02-28T23:53:28Z"}], "bucket_name": "Today", "history": [{"anon": "stud", "uid_a": "a_0", "subject": "关于lab4动态内存分配的问题", "created": "2020-02-27T23:18:20Z", "content": "<p>在这一章当中&#xff0c;<a href=\"https://rcore-os.github.io/rCore_tutorial_doc/chapter4/part2.html\">https://rcore-os.github.io/rCore_tutorial_doc/chapter4/part2.html</a>&#xff0c; 要求是一个动态管理内存的模块。 </p>\n<p></p>\n<p>我想问的一个问题就是&#xff0c;这个buddy system 和上一节写的静态segment tree的管理器之间是什么关系呢&#xff1f;</p>\n<p></p>\n<p>从我个人的理解来看&#xff0c;似乎必须实现这样一个动态分配器&#xff0c;并告诉rust编译器我们有这样一个allocator&#xff0c;才能使用Box 或Rc。 看上去像是在写runtime。可是文档也说&#xff0c;它期待在虚存上完成分配&#xff0c;可是我们写的却是实际的物理内存&#xff1f;</p>\n<p></p>\n<p>第三个问题来自 学长 buddy system的一个实现&#xff1a; <a href=\"https://docs.rs/buddy_system_allocator/0.3.6/src/buddy_system_allocator/lib.rs.html#1-334\">https://docs.rs/buddy_system_allocator/0.3.6/src/buddy_system_allocator/lib.rs.html#1-334</a> 。 这是一个基于linked list的真正意义上 unix-like的 buddy system&#xff0c;但是把真正动态分配物理内存的那部分隐藏在了linked list的抽象之下了&#xff1f; </p>\n<p></p>\n<p>第四个问题是 &#xff1a; <a href=\"https://doc.rust-lang.org/beta/std/alloc/trait.GlobalAlloc.html\">https://doc.rust-lang.org/beta/std/alloc/trait.GlobalAlloc.html</a>&#xff0c; 在trait GlobalAlloc上&#xff0c; 它规定了alloc api</p>\n<pre>unsafe fn alloc(&amp;self, layout: Layout) -&gt; *mut u8\n[−]\nAllocate memory as described by the given layout.\n\nReturns a pointer to newly-allocated memory, or null to indicate allocation failure.</pre>\n<p>这个memory地址是8 bits &#xff0c; 说明肯定是基于一个偏移的&#xff0c;从我们自己的test可以看到&#xff0c;是基于 .bss的基地址的。那么是什么机制保证了rust在只知道偏移的情况下自己安排到相应地方上的。</p>\n<p></p>\n<p>期待助教和老师和各位大佬不吝赐教&#xff01;</p>"}], "type": "question", "tags": ["lab4", "student"], "tag_good": [], "unique_views": 113, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2020-02-28T03:22:20Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "JiahzengSpring2020", "endorser": {}, "admin": false, "photo": null, "id": "k6uaovmjpor6j7", "photo_url": null, "us": false, "facebook_id": null}, {"role": "student", "name": "郑逢时", "endorser": {}, "admin": false, "photo": null, "id": "k6ojtppjd4xxr", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "id": "k75m24nhj437gx", "history": [{"anon": "no", "uid": "jsjp32n2zAHb", "subject": "", "created": "2020-02-28T10:37:26Z", "content": "<md>第一、二题&#xff1a;\n*buddy system* 实际上是&#xff1a;在内核中开了一块静态数组(放在 &#96;&#96;.bss&#96;&#96; 段中)供它使用&#xff0c;这块数组可分为两部分&#xff1a;一部分用来维护分配算法所需的数据结构&#xff1b;另一部分则是用来分配的那部分空间。因此 *buddy system* 所分配出去的空间一定在这块静态数组之内。如 &#96;&#96;Box::new vec!&#96;&#96; 都是如此&#xff0c;当然也就在 &#96;&#96;.bss&#96;&#96; 段之内。它作为内核堆使用&#xff0c;主要用于动态分配、回收内核所需的数据结构。无论如何&#xff0c;这块静态数组是在内核之内的&#xff1a;内核是一个程序&#xff0c;程序所见到的一定是虚拟内存。然而为什么打印出来却是物理地址呢&#xff1f;这是因为此时页表机制尚未启动&#xff0c;从虚拟地址到物理地址的翻译过程是一个恒等映射&#xff0c;也即虚拟地址等于物理地址。在之后页表机制启用之后&#xff0c;则可以看到虚拟地址与物理地址的不同。&#xff08;请思考&#xff1a;为什么在虚拟内存机制不存在的情况下&#xff0c;内核仍能正常运行&#xff1f;&#xff09;\n而 *segment tree* 同样是在内核中开了一块静态数组&#xff0c;然而这块静态数组只用来维护分配算法(线段树)所需的数据结构。它分配的空间在内核之外&#xff0c;是那块目前空闲的物理内存。\n若想更深刻的理解这些内容&#xff0c;请继续阅读第五章。\n\n第三题建议原作者 &#64;jiegec 来回答。\n\n第四题&#xff1a;\n不太懂“肯定是基于一个偏移”是什么意思&#xff0c;这里的 &#96;&#96;u8&#96;&#96; 只是说明需要返回一个字节地址(因为分配、对齐都是以字节为单位的&#xff0c;每个地址对应一个字节也是约定俗成的)&#xff0c;它需要在内核的地址空间即可。就如同 *buddy system* 也就是返回了那块静态数组&#xff08;实际上在内核数据中的 &#96;&#96;.bss&#96;&#96; 段中&#xff09;中的一个位置。</md>"}, {"anon": "no", "uid": "jsjp32n2zAHb", "subject": "", "created": "2020-02-28T03:22:20Z", "content": "<md>第一、二题&#xff1a;\n*buddy system* 实际上是&#xff1a;在内核中开了一块静态数组(放在 &#96;&#96;.bss&#96;&#96; 段中)供它使用&#xff0c;这块数组可分为两部分&#xff1a;一部分用来维护分配算法所需的数据结构&#xff1b;另一部分则是用来分配的那部分空间。因此 *buddy system* 所分配出去的空间一定在这块静态数组之内。如 &#96;&#96;Box::new&#xff0c;vec!&#96;&#96; 都是如此&#xff0c;当然也就在 &#96;&#96;.bss&#96;&#96; 段之内。它作为内核堆使用&#xff0c;主要用于动态分配、回收内核所需的数据结构。无论如何&#xff0c;这块静态数组是在内核之内的&#xff1a;内核是一个程序&#xff0c;程序所见到的一定是虚拟内存。然而为什么打印出来却是物理地址呢&#xff1f;这是因为此时页表机制尚未启动&#xff0c;从虚拟地址到物理地址的翻译过程是一个恒等映射&#xff0c;也即虚拟地址等于物理地址。在之后页表机制启用之后&#xff0c;则可以看到虚拟地址与物理地址的不同。&#xff08;请思考&#xff1a;为什么在虚拟内存机制不存在的情况下&#xff0c;内核仍能正常运行&#xff1f;&#xff09;\n而 *segment tree* 同样是在内核中开了一块静态数组&#xff0c;然而这块静态数组只用来维护分配算法(线段树)所需的数据结构。它分配的空间在内核之外&#xff0c;是那块目前空闲的物理内存。\n若想更深刻的理解这些内容&#xff0c;请继续阅读第五章。\n\n第三题建议原作者 &#64;jiegec 来回答。\n\n第四题&#xff1a;\n不太懂“肯定是基于一个偏移”是什么意思&#xff0c;这里的 &#96;&#96;u8&#96;&#96; 只是说明需要返回一个字节地址(因为分配、对齐都是以字节为单位的&#xff0c;每个地址对应一个字节也是约定俗成的)&#xff0c;它需要在内核的地址空间即可。就如同 *buddy system* 也就是返回了那块静态数组&#xff08;实际上在内核数据中的 &#96;&#96;.bss&#96;&#96; 段中&#xff09;中的一个位置。</md>"}], "type": "s_answer", "tag_endorse_arr": ["k6uaovmjpor6j7", "k6ojtppjd4xxr"], "config": {}, "is_tag_endorse": false}, {"anon": "stud", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>感谢回答&#xff0c;</p>\n<p>问题一 followup &#xff1a; 看起来segment tree是在管理空闲内存&#xff0c;所谓的“它所分配的空间在内核之外”的意思是&#xff1f;</p>\n<p>                               看上去好像这是两种概念平行的allocator&#xff0c;buddy system用以分配.bss 段上的内存&#xff08;heap&#xff09;&#xff0c;segment tree也在内存上驻     留&#xff0c;但它管理的不在“内核”&#xff1f;</p>\n<p></p>\n<p>问题四followup &#xff1a; u8作为一个字节的地址&#xff0c;这个可以理解&#xff0c;一个地址&#xff0c;加上申请者要求的长度&#xff0c;就可以自己知道这块内存多大&#xff0c; 但是u8的表达能力岂不是只有 pow&#xff08;2&#xff0c;8&#xff09;= 512 ............除非.....这里储存的语义是log2&#xff08;u8&#xff09;&#xff1f;</p>\n<p>不过值得注意的是&#xff0c;这会儿用allocator找到地址还原回去是不是都是绝对地址........</p>", "created": "2020-02-28T08:26:17Z", "bucket_order": 6, "bucket_name": "Last week", "type": "followup", "tag_good": [], "uid_a": "a_0", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<md>第一、二题&#xff1a;\nbuddy system 管理的内存在内核的数据段中&#xff0c;用来在内核内动态分配、回收一些数据结构&#xff1b;而 segment tree 整个放在内核中&#xff0c;而内核的代码数据只占用物理内存的一小部分&#xff0c;segment tree 管理的是剩下的那部分物理内存。它们就是有这样的不同。另外&#xff0c;前面讨论中的 &#34;buddy system&#34; 指的是内核动态内存分配器&#xff0c;&#34;segment tree&#34; 指的是物理页帧分配器&#xff0c;这样按照功能命名更为准确&#xff0c;我们之前用实现算法来称呼它们容易引起混淆。两种分配器都需要一种连续内存分配算法作为实现&#xff0c;事实上它们可以都采用 buddy system 作为实现。\n第四题&#xff1a;\n函数返回值是 *mut u8 &#xff0c;这是一个指针&#xff0c;或者说引用。它的意义取决于我们如何使用它。\n如果使用 &#96;&#96;*&#96;&#96; 运算符进行解引用&#xff0c;得到的类型是 u8 &#xff0c;也就是一个字节&#xff0c;事实上它表示的是在虚拟地址空间分配的那块内存中的第一个字节&#xff1b;\n如果不解引用&#xff0c;它还是表示那个字节&#xff0c;只不过不是那 8 bits &#xff0c;而是表示这个字节在虚拟地址空间中的**位置**。你可以将它转成 usize 类型(在 RV64 中也就是 u64)来看到这个位置具体在哪里。\n在 alloc 函数的语义下&#xff0c;我们显然相比开头那一个字节里面的内容&#xff0c;更加关注这个字节所在的位置&#xff0c;它也就等于分配的那块内存在虚拟地址空间中的位置。\n因此&#xff0c;我们不会对这个指针解引用&#xff0c;而是直接将其转成 u64&#xff0c;信息量是 64 位&#xff0c;足以描述一个虚拟地址空间中的位置。至于 Layout 中的其他信息无需在这里返回&#xff0c;有其他机制进行处理。\n你可能会发现&#xff0c;既然只需要位置&#xff0c;那么 u8 随便换成其他数据类型不是也都可以吗&#xff1f;没错&#xff0c;但是为了“约定俗成”&#xff0c;一般的地址都是指字节地址&#xff0c;因此这里的“工具”数据类型选择使用 u8。 \n</md>", "created": "2020-02-28T12:50:43Z", "bucket_order": 6, "bucket_name": "Last week", "type": "feedback", "tag_good": [], "uid": "jsjp32n2zAHb", "children": [], "tag_good_arr": [], "id": "k766d3ddpqj2ug", "updated": "2020-02-28T12:50:43Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>问题三&#xff1a;不是抽象&#xff0c;那个LinkedList也是自己写的&#xff0c;在另一个文件里。</p>\n<p>问题四&#xff1a;你把 *mut u8 对应成 char * 就可以了。</p>", "created": "2020-02-28T23:53:28Z", "bucket_order": 6, "bucket_name": "Last week", "type": "feedback", "tag_good": [], "uid": "jshne0d1gvw4mr", "children": [], "tag_good_arr": [], "id": "k76u1dlf3gt2ln", "updated": "2020-02-28T23:53:28Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "k75wx0kojvf7e5", "updated": "2020-02-28T08:26:17Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "k75dcczofzk36d", "config": {"seen": {"267": 5, "1202": 2, "622": 9, "458": 8, "656": 4, "1121": 0, "1385": 3, "1308": 7, "164": 6, "939": 1}}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169959546, "default_anonymity": "no"}, "error": null, "aid": "kyv0yv7ejx83eg"}