{"result": {"history_size": 2, "folders": ["lab1"], "nr": 122, "data": {"embed_links": []}, "created": "2015-03-16T14:04:55Z", "bucket_order": 3, "no_answer_followup": 1, "change_log": [{"uid": "i6xxjjocYdf", "anon": "no", "when": "2015-03-16T14:04:56Z", "data": "i7by0ny8cyc2px", "type": "create"}, {"uid": "i6xxjjocYdf", "anon": "no", "when": "2015-03-16T14:25:47Z", "data": "i7byrh956hy2bm", "type": "update"}, {"to": "i7by0ny5b792pw", "uid": "hdjoucuyb836fq", "anon": "no", "when": "2015-03-17T00:28:22Z", "data": "i7ckaf8indg20e", "type": "i_answer"}, {"to": "i7by0ny5b792pw", "uid": "i72xyao1QhO", "anon": "no", "when": "2015-03-17T01:07:59Z", "type": "followup"}, {"to": "i7by0ny5b792pw", "uid": "hdjoucuyb836fq", "anon": "no", "when": "2015-03-17T01:50:37Z", "type": "feedback"}, {"to": "i7by0ny5b792pw", "uid": "i72xyao1QhO", "anon": "no", "when": "2015-03-17T01:52:09Z", "type": "followup"}, {"to": "i7by0ny5b792pw", "uid": "i72xyao1QhO", "anon": "no", "when": "2015-03-17T01:55:04Z", "type": "feedback"}, {"to": "i7by0ny5b792pw", "uid": "i72xyao1QhO", "anon": "no", "when": "2015-03-17T02:03:46Z", "type": "feedback"}, {"to": "i7by0ny5b792pw", "uid": "hdjoucuyb836fq", "anon": "no", "when": "2015-03-17T02:10:24Z", "type": "feedback"}, {"to": "i7by0ny5b792pw", "uid": "hdjoucuyb836fq", "anon": "no", "when": "2015-03-17T02:14:03Z", "type": "feedback"}, {"to": "i7by0ny5b792pw", "uid": "i72xyao1QhO", "anon": "no", "when": "2015-03-17T02:18:17Z", "type": "feedback"}, {"to": "i7by0ny5b792pw", "uid": "i6xxjjocYdf", "anon": "no", "when": "2015-03-17T04:15:29Z", "type": "followup"}, {"to": "i7by0ny5b792pw", "uid": "i72xyao1QhO", "anon": "no", "when": "2015-03-17T07:37:16Z", "type": "feedback"}, {"anon": "no", "uid": "j0hxs9xevOM", "to": "i7by0ny5b792pw", "type": "followup", "when": "2017-10-04T10:14:37Z"}, {"anon": "no", "uid": "j0hxs9xevOM", "to": "i7by0ny5b792pw", "type": "feedback", "when": "2017-12-08T09:41:45Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i6xxjjocYdf", "subject": "lab 1 challenge 1 的问题", "created": "2015-03-16T14:25:47Z", "content": "<p>1. 我看了 lab1_result 的实现&#xff0c;在处理向用户态切换的部分中&#xff0c;将 (uint32_t *)tf - 1 的内容换成了 switchk2u 的地址&#xff0c;我猜测这是因为在进入中断时&#xff0c;是内核态进入内核态&#xff0c;因此 CPU 没有压入 esp 与 ss&#xff0c;但在退出中断时&#xff0c;将从内核态返回用户态&#xff0c;原本的 trapframe 里并不包含 esp 与 ss&#xff0c;所以建立了一个临时的 trapframe&#xff0c;是不是这样&#xff1f;</p>\n<p>2. 而在处理向内核态切换的部分中&#xff0c;由于进入中断时&#xff0c;是用户态进入内核态&#xff0c;而退出中断时&#xff0c;是内核态返回内核态&#xff0c;所以要去掉最后的 esp 与 ss。在这里我对这一行不太了解&#xff1a;</p>\n<pre>switchu2k = (struct trapframe *)(tf-&gt;tf_esp - (sizeof(struct trapframe) - 8));</pre>\n<p>为什么不可以直接用原来的 trapframe 地址呢&#xff1f;我试着将原来的 trapframe&#xff08;不含 esp 与 ss&#xff09;向后挪动了 8 个字节&#xff0c;再把 ((uint32_t *)tf - 1) 的内容换为挪动后的地址&#xff0c;结果程序挂了&#xff0c;求解…</p>"}, {"anon": "no", "uid": "i6xxjjocYdf", "subject": "lab 1 challenge 1 的问题", "created": "2015-03-16T14:04:56Z", "content": "<p>1. 我看了 lab1_result 的实现&#xff0c;在处理向用户态切换的部分中&#xff0c;将 (uint32_t *)tf - 1 的内容换成了 switchk2u 的地址&#xff0c;我猜测这是因为在进入中断时&#xff0c;是内核态进入内核态&#xff0c;因此 CPU 没有压入 esp 与 ss&#xff0c;但在退出中断时&#xff0c;将从内核态返回用户态&#xff0c;原本的 trapframe 里并不包含 esp 与 ss&#xff0c;所以建立了一个临时的 trapframe&#xff0c;是不是这样&#xff1f;</p>\n<p>2. 而在处理向内核态切换的部分中&#xff0c;由于进入中断时&#xff0c;是用户态进入内核态&#xff0c;而退出中断时&#xff0c;是内核态返回内核态&#xff0c;所以要去掉最后的 esp 与 ss。在这里我对这一行不太了解&#xff1a;</p>\n<pre>switchu2k = (struct trapframe *)(tf-&gt;tf_esp - (sizeof(struct trapframe) - 8));</pre>\n<p>为什么不可以直接用原来的 trapframe 地址呢&#xff1f;我试着将原来的 trapframe&#xff08;不含 esp 与 ss&#xff09;向后挪动了 8 个字节&#xff0c;再把 ((uint32_t *)tf - 1) 的内容换乘挪动后的地址&#xff0c;结果程序挂了&#xff0c;求解…</p>"}], "type": "question", "tags": ["lab1", "student"], "tag_good": [{"role": "student", "name": "Darin", "endorser": {}, "admin": false, "photo": null, "id": "i7c0xilj1k44kf", "photo_url": null, "us": false, "facebook_id": null}, {"role": "", "name": "yangyuantianming", "endorser": {}, "admin": false, "photo": "1427116085_35.png", "id": "i6t76fg9sEh", "photo_url": "https://cdn-uploads.piazza.com/photos/i6t76fg9sEh/1427116085_35.png", "published": true, "us": false, "class_sections": ["清华学生_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "melouver", "endorser": {}, "admin": false, "photo": null, "id": "j0hxs9xevOM", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "unique_views": 207, "children": [{"history_size": 1, "folders": [], "data": {"embed_links": []}, "created": "2015-03-17T00:28:22Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "Ray Chow", "endorser": {}, "admin": false, "photo": null, "id": "i6xxjjocYdf", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjoucuyb836fq", "subject": "", "created": "2015-03-17T00:28:22Z", "content": "<p>这一行的意思与你所述一样&#xff0c;就是“将原来的 trapframe&#xff08;不含 esp 与 ss&#xff09;向后挪动了 8 个字节&#xff0c;再把 ((uint32_t *)tf - 1) 的内容换为挪动后的地址”&#xff0c;我这边变换了switchu2k的计算方法&#xff0c;测试仍然可以通过&#xff0c;请再次检查一下你的实现。</p>\n<p></p>\n<p>将相关的地址用cprintf打印出来会有助于分析和调试。</p>"}], "type": "i_answer", "tag_endorse_arr": ["i6xxjjocYdf"], "children": [], "id": "i7ckaf8ev1r20d", "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>扩展实验中移动的8字节的这部分貌似能从切换的代码中看出来?这个在ucore提示中有,说是tf结构中的ss和esp在切换时候有用处,但是在trapentry中看不出来,难道是硬件里面这么规定的???求解</p>", "created": "2015-03-17T01:07:59Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "followup", "tag_good": [], "uid": "i72xyao1QhO", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>不太明白你想问的是什么……</p>\n<p></p>\n<p>就硬件来说&#xff0c;执行iret时存在两种情况&#xff0c;一是栈上保存的CS的权限级别&#xff08;内核态或用户态&#xff09;与当前一致&#xff0c;不考虑ss和esp&#xff1b;二是栈上保存的权限级别与当前不同&#xff0c;需要恢复ss和esp。OS的任务&#xff0c;是利用iret的功能&#xff0c;在修改CS的同时不改动其它寄存器的值。</p>", "created": "2015-03-17T01:50:37Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [{"role": "student", "name": "QimingZhai", "endorser": {}, "admin": false, "photo": null, "id": "kd1n37a8zze7d6", "photo_url": null, "us": false, "facebook_id": null}], "uid": "hdjoucuyb836fq", "children": [], "tag_good_arr": ["kd1n37a8zze7d6"], "id": "i7cn86z21z24ch", "updated": "2015-03-17T01:50:37Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>不好意思,可能说的不明确,简单说来就是:切换时的函数是trapentry,但是那段代码压入的东西是明确的,但是内核态和用户态直接切换的时候,多压了两个寄存器ss和esp,这个压入过程是硬件实现的么?我在代码中未看到相应的部分,</p>", "created": "2015-03-17T01:55:04Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [], "uid": "i72xyao1QhO", "children": [], "tag_good_arr": [], "id": "i7cndwijohr3x3", "updated": "2015-03-17T01:55:04Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>哦,,那就是硬件方面实现的,因为在执行iret的时候,在权限级别上识别了用户态和内核态,从而处理了多出来的ss和esp,这个我在其他资料上看得是说,在内核态直接切换的时候,ss和esp可以从tss中获得,所以不用保存而用户态和内核态之间的时候,需要保存用户态的ss和esp,所以就多了这个区别</p>", "created": "2015-03-17T02:03:46Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [], "uid": "i72xyao1QhO", "children": [], "tag_good_arr": [], "id": "i7cnp3viv845m5", "updated": "2015-03-17T02:03:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>tss的作用是用户态触发中断进入内核态时&#xff0c;CPU获取内核栈所在的位置&#xff1b;因为这是ss和esp被修改了&#xff0c;所以需要在栈上保存ss和esp。</p>\n<p></p>\n<p>内核态切换内核态时&#xff0c;ss没有修改&#xff0c;esp也只是移动了几个字节而已&#xff0c;所以硬件不保存ss和esp。</p>", "created": "2015-03-17T02:10:24Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [], "uid": "hdjoucuyb836fq", "children": [], "tag_good_arr": [], "id": "i7cnxmfs2x15wx", "updated": "2015-03-17T02:10:24Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7clpcv92vdbo", "updated": "2015-03-17T01:07:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>直接在原来的栈上改动的话难道应该比较大吧!因为函数切换的时候,栈是连续的,((uint32_t *)tf - 1) 能直接换成是上一个trapframe,但是是不完全的,因为最开始的时候没有压用户的ss和esp,这个应该是在最开头(栈的高位置),后面压了不全的trapframe,然后后面继续在这个栈上压了trap函数的esp(相当于参数地址),eip,trap_dispatch的参数地址以及其ebp,eip还有一些局部变量,,这个时候,要改的话,可定会覆盖前面的,除非整体移动,,但是这个不好搞吧??</p>\n<p>目前栈的示意:</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>老数据</p>\n<p>-----------栈底</p>\n<p>想要达到的效果,就是在下面的trapframe(不含ss和esp)之下在多ss和esp,,前面一部分都得挪</p>\n<p>-----------栈顶</p>\n<p>各种局部变量(trap_dispatch中的局部变量)</p>\n<p>eip(trap_dispatch函数压入)</p>\n<p>ebp(trap_dispatch函数压入)</p>\n<p>trapfram指针(trap_dispatch参数)</p>\n<p>eip(trapentry中的call指令压入的)</p>\n<p>esp(就是个参数,相当于那个trapframe指针)</p>\n<p>trapframe(不含ss和esp)</p>\n<p>esp</p>\n<p>ss</p>\n<p>老数据</p>\n<p>-----------栈底</p>", "created": "2015-03-17T01:52:09Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "followup", "tag_good": [], "uid": "i72xyao1QhO", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>你所说的是内核态转用户态时发生的事情&#xff0c;这是因为tf需要多放两个寄存器的值&#xff0c;现有的栈放不下&#xff0c;所以ucore里才会有一个静态全局变量switchk2u作为临时的tf。</p>\n<p></p>\n<p>而问题里所讨论的是用户态转内核态的事情&#xff08;u2k&#xff09;&#xff0c;这是tf需要少放两个寄存器的值&#xff0c;所以可以直接在栈上改动。</p>", "created": "2015-03-17T02:14:03Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [], "uid": "hdjoucuyb836fq", "children": [], "tag_good_arr": [], "id": "i7co2bw8htc4cp", "updated": "2015-03-17T02:14:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>恩恩,,对,,k2u没法直接,u2k可以,而且ucore参考答案就是这么实现的,很经典啊,感觉其实ucore参考答案不应该这么给,应该给个粗制滥造的,然后让我们在理解之后再去优化它</p>", "created": "2015-03-17T02:18:17Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [], "uid": "i72xyao1QhO", "children": [], "tag_good_arr": [], "id": "i7co7ri9zv83xv", "updated": "2015-03-17T02:18:17Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7cna5t5rzd4ok", "updated": "2015-03-17T01:52:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>感谢老师的解答&#xff0c;我发现是因为没有在 lab1_switch_to_kernel() 里恢复 %esp 导致了错误。</p>\n<p>另外&#xff0c;我还发现 lab1_switch_to_user() 在进入中断之前&#xff0c;先把 %esp 减 8&#xff0c;就留出了之后 trapframe 的 esp 与 ss 的空间&#xff0c;因此连临时的 switchk2u 都不需要了&#xff0c;直接在原 tf 上面修改就可以&#xff0c;例如&#xff1a;</p>\n<pre>    // 进入中断\n    asm volatile (\n            &#34;sub $0x8, %%esp;&#34;\n            &#34;int %0;&#34;\n            &#34;movl %%ebp, %%esp;&#34;\n            :\n            : &#34;i&#34; (T_SWITCH_TOU));\n\n    // 中断处理函数\n    if (USER_CS != tf-&gt;tf_cs) {\n        tf-&gt;tf_cs = USER_CS;\n        tf-&gt;tf_ds = USER_DS;\n        tf-&gt;tf_es = USER_DS;\n        tf-&gt;tf_fs = USER_DS;\n        tf-&gt;tf_gs = USER_DS;\n        tf-&gt;tf_eflags |= FL_IOPL_MASK;\n        tf-&gt;tf_ss = USER_DS;\n    }</pre>\n<p></p>", "created": "2015-03-17T04:15:29Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "followup", "tag_good": [], "uid": "i6xxjjocYdf", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>恩恩,是这样的,</p>", "created": "2015-03-17T07:37:16Z", "bucket_order": 330, "bucket_name": "Week 3/15 - 3/21", "type": "feedback", "tag_good": [], "uid": "i72xyao1QhO", "children": [], "tag_good_arr": [], "id": "i7czlzsjh5n1d0", "updated": "2015-03-17T07:37:16Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "i7csehc06882fc", "updated": "2015-03-17T04:15:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>我有一些疑问&#xff0c;限于我能力有限&#xff0c;想先说一个陈述&#xff0c;如果正确再提出我最后的问题。</p>\n<p>1.*((uint32_t*)tf - 1) = ... </p>\n<p>这条语句在不同情况下出现过&#xff0c;但它的目的是一样的&#xff0c;就是决定call trap 后的 popl %rsp的结果(trapentry.S)。在这里&#xff0c;我们相当于决定了esp是指向内核态时压入的%esp或者是指向switchk2u所在位置。</p>\n<p></p>\n<p>那么&#xff0c;在这里我们引入switchk2u这个静态变量的原因是哪些&#xff1f;</p>\n<p>一个是“内核态切换用户态时&#xff0c;ss esp有修改&#xff0c;所以硬件保存ss和esp。”&#xff0c;这使得原来的trapframe大小不足&#xff0c;所以我们需要使用一个完整大小的trapframe&#xff0c;即switchk2u。</p>\n<p>第二个我不确定&#xff0c;我的想法是&#xff0c;用户态需要自己的栈&#xff0c;而这个栈的base是USER_DS&#xff0c;栈顶指针即是 &amp;switchk2u 。switchk2u这个变量所在位置有一个完整的trapframe&#xff0c;但它也是我们用户态的栈顶。但这似乎又困扰了我&#xff1a;如果&amp;switchk2u作为用户态的栈的顶部&#xff0c;那么栈增长时是否有足够空间&#xff1f;注意到静态变量所在的区域.bss似乎不能增长&#xff1f;</p>\n<p>另外上面有位同学不使用switchk2u&#xff0c;结果是正确的&#xff0c;但好像与代码中的注释&#34;jump to temporary stack&#34;相违背&#xff0c;等同于你的用户态和内核态用的同样的栈。 这点我也不确定。</p>\n<p></p>\n<p>如果如上都正确&#xff0c;那么我可以理解switchu2k为何只需要一个指针而不需要完整的trapframe.</p>\n<p>切换回那个<strong>唯一</strong>的 已存在的 内核态栈时&#xff0c;我们只需用从用户态的栈中获得tf_esp变量即可完全跳转回内核栈&#xff0c;而不必申请新的空间来作为新的栈。</p>\n<p></p>\n<p></p>\n<p>希望有人能解答&#xff0c;非常感谢&#xff01;</p>\n<p></p>", "created": "2017-10-04T10:14:37Z", "bucket_order": 197, "bucket_name": "Week 10/1 - 10/7", "type": "followup", "tag_good": [], "uid": "j0hxs9xevOM", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><pre>(gdb) <br />=&gt; 0x1001af &lt;lab1_switch_to_user&#43;8&gt;: mov %ebp,%esp\nWatchpoint 4: $esp\nOld value = (void *) 0x10f958 &lt;switchk2u&#43;56&gt;<br />New value = (void *) 0x7bb0<br />0x001001af in lab1_switch_to_user () at kern/init/init.c:90<br />(gdb) disas<br />Dump of assembler code for function lab1_switch_to_user:<br /> 0x001001a7 &lt;&#43;0&gt;: push %ebp<br /> 0x001001a8 &lt;&#43;1&gt;: mov %esp,%ebp<br /> 0x001001aa &lt;&#43;3&gt;: sub $0x8,%esp<br /> 0x001001ad &lt;&#43;6&gt;: int $0x78<br />=&gt; 0x001001af &lt;&#43;8&gt;: mov %ebp,%esp<br /> 0x001001b1 &lt;&#43;10&gt;: nop<br /> 0x001001b2 &lt;&#43;11&gt;: pop %ebp<br /> 0x001001b3 &lt;&#43;12&gt;: ret</pre>\n<p>Add some piece of gdb output for future use.</p>\n<p></p>", "created": "2017-12-08T09:41:45Z", "bucket_order": 188, "bucket_name": "Week 12/3 - 12/9", "type": "feedback", "tag_good": [], "uid": "j0hxs9xevOM", "children": [], "tag_good_arr": [], "id": "jaxq2d9847o2t8", "updated": "2017-12-08T09:41:45Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "j8cvm9e9xcb4sn", "updated": "2017-10-04T10:14:37Z", "config": {}}], "tag_good_arr": ["i7c0xilj1k44kf", "i6t76fg9sEh", "j0hxs9xevOM"], "no_answer": 0, "id": "i7by0ny5b792pw", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 6, "num_favorites": 6, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643167344946, "default_anonymity": "no"}, "error": null, "aid": "kyuzetrmse76gx"}