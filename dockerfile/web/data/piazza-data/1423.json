{"result": {"folders": ["lecture6"], "nr": 1423, "data": {"embed_links": []}, "created": "2020-03-10T03:19:56Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "je2ib27z6a7691", "data": "k7lbtf67xua25a", "type": "create", "when": "2020-03-10T03:19:56Z"}, {"anon": "no", "uid": "je2ib27z6a7691", "data": "k7lbucn0bad33p", "type": "update", "when": "2020-03-10T03:20:39Z"}, {"anon": "no", "uid": "je2ib27z6a7691", "data": "k7lbus9y7tm3mm", "type": "update", "when": "2020-03-10T03:21:00Z"}, {"anon": "no", "uid": "je2ib27z6a7691", "data": "k7lbxcu29gf6nz", "type": "update", "when": "2020-03-10T03:23:00Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "je2ib27z6a7691", "subject": "第六讲课后练习参考解答", "created": "2020-03-10T03:23:00Z", "content": "<md>## 手算\n\n&gt; 2017011114\n\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb4fxsaxof%2FLec6HW_HW08.jpg)\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb7frr6lm0%2FLec6HW_HW08_2.jpg)\n\n## 程序实现 (python)\n\n&gt; 2017011062\n\n&#96;&#96;&#96;\ndef PDBR():\n    return 0xd80\n\n\nif __name__ == &#34;__main__&#34;:\n    def func(x): return int(x, 16)\n    with open(&#39;disk.txt&#39;, &#39;r&#39;) as f:\n        disk = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(disk)\n    with open(&#39;mem.txt&#39;, &#39;r&#39;) as f:\n        mem = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(mem)\n\n    va = int(input(&#39;input vaddr, gkd: &#39;), 16)\n    print(&#39;Virtual Address {:03x}:&#39;.format(va))\n    pde_index = va &gt;&gt; 10 &amp; 0x1f\n    pde_content = mem[PDBR() &gt;&gt; 5][pde_index]\n    valid = pde_content &gt;&gt; 7\n    pfn = pde_content &amp; 0x7f\n    print(&#39;  --&gt; pde index:0x{:02x}  pde contents:(valid {}, pfn {:02x})&#39;.format(pde_index, valid, pfn))\n    if valid == 0 and pfn == 0x7f:\n        print(&#39;Fault (page directory not valid)&#39;)\n    elif valid == 1:\n        pte_index = va &gt;&gt; 5 &amp; 0x1f\n        pte_content = mem[pfn][pte_index]\n        valid = pte_content &gt;&gt; 7\n        pfn = pte_content &amp; 0x7f\n        print(&#39;    --&gt; pte index:0x{:02x}  pte contents:(valid {}, pfn {:02x})&#39;.format(pte_index, valid, pfn))\n        if valid == 0 and pfn == 0x7f:\n            print(&#39;Fault (page table entry not valid)&#39;)\n        elif valid == 1:\n            pa = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = mem[pfn][va &amp; 0x1f]\n            print(&#39;      --&gt; To Physical Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(pa, value))\n        else:\n            da = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = disk[da &gt;&gt; 5][da &amp; 0x1f]\n            print(&#39;      --&gt; To Disk Sector Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(da, value))\n    else:\n        pass\n&#96;&#96;&#96;\n\n输出&#xff1a;\n\n&#96;&#96;&#96;\nVirtual Address 6653:\n  --&gt; pde index:0x19  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address 1c13:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x00  pte contents:(valid 1, pfn 76)\n      --&gt; To Physical Address 0xed3 --&gt; Value: 12\n\nVirtual Address 6890:\n  --&gt; pde index:0x1a  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address af6:\n  --&gt; pde index:0x02  pde contents:(valid 1, pfn 21)\n    --&gt; pte index:0x17  pte contents:(valid 0, pfn 7f)\nFault (page table entry not valid)\n\nVirtual Address 1e6f:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x13  pte contents:(valid 0, pfn 16)\n      --&gt; To Disk Sector Address 0x2cf --&gt; Value: 1c\n&#96;&#96;&#96;\n\n## 简评\n\n对于第四个地址 &#96;0af6&#96;&#xff0c;PTE 的内容是 &#96;0x7f&#96;&#xff0c;很多同学并没有注意到题目中的说明&#xff1a;\n\n&gt; VALID==1表示&#xff0c;表示映射存在&#xff1b;VALID==0表示&#xff0c;表示内存映射不存在&#xff08;有两种情况&#xff1a;a.对应的物理页帧swap out在硬盘上&#xff1b;b.既没有在内存中&#xff0c;也没有在硬盘上&#xff0c;这时页帧号为0x7F&#xff09;。\n\n而是去硬盘上查找了&#xff0c;得到了错误的结果 &#96;0x03&#96;。正确的结果应该是题目中描述的情况 b&#xff1a;“既没有在内存中&#xff0c;也没有在硬盘上”。</md>"}, {"anon": "no", "uid": "je2ib27z6a7691", "subject": "第六讲课后练习参考解答", "created": "2020-03-10T03:21:00Z", "content": "<md>## 手算\n\n&gt; 2017011114\n\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb4fxsaxof%2FLec6HW_HW08.jpg)\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb7frr6lm0%2FLec6HW_HW08_2.jpg)\n\n## 程序实现 (python)\n\n&gt; 2017011062\n\n&#96;&#96;&#96;\ndef PDBR():\n    return 0xd80\n\n\nif __name__ == &#34;__main__&#34;:\n    def func(x): return int(x, 16)\n    with open(&#39;disk.txt&#39;, &#39;r&#39;) as f:\n        disk = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(disk)\n    with open(&#39;mem.txt&#39;, &#39;r&#39;) as f:\n        mem = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(mem)\n\n    va = int(input(&#39;input vaddr, gkd: &#39;), 16)\n    print(&#39;Virtual Address {:03x}:&#39;.format(va))\n    pde_index = va &gt;&gt; 10 &amp; 0x1f\n    pde_content = mem[PDBR() &gt;&gt; 5][pde_index]\n    valid = pde_content &gt;&gt; 7\n    pfn = pde_content &amp; 0x7f\n    print(&#39;  --&gt; pde index:0x{:02x}  pde contents:(valid {}, pfn {:02x})&#39;.format(pde_index, valid, pfn))\n    if valid == 0 and pfn == 0x7f:\n        print(&#39;Fault (page directory not valid)&#39;)\n    elif valid == 1:\n        pte_index = va &gt;&gt; 5 &amp; 0x1f\n        pte_content = mem[pfn][pte_index]\n        valid = pte_content &gt;&gt; 7\n        pfn = pte_content &amp; 0x7f\n        print(&#39;    --&gt; pte index:0x{:02x}  pte contents:(valid {}, pfn {:02x})&#39;.format(pte_index, valid, pfn))\n        if valid == 0 and pfn == 0x7f:\n            print(&#39;Fault (page table entry not valid)&#39;)\n        elif valid == 1:\n            pa = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = mem[pfn][va &amp; 0x1f]\n            print(&#39;      --&gt; To Physical Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(pa, value))\n        else:\n            da = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = disk[da &gt;&gt; 5][da &amp; 0x1f]\n            print(&#39;      --&gt; To Disk Sector Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(da, value))\n    else:\n        pass\n&#96;&#96;&#96;\n\n输出&#xff1a;\n\n&#96;&#96;&#96;\nVirtual Address 6653:\n  --&gt; pde index:0x19  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address 1c13:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x00  pte contents:(valid 1, pfn 76)\n      --&gt; To Physical Address 0xed3 --&gt; Value: 12\n\nVirtual Address 6890:\n  --&gt; pde index:0x1a  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address af6:\n  --&gt; pde index:0x02  pde contents:(valid 1, pfn 21)\n    --&gt; pte index:0x17  pte contents:(valid 0, pfn 7f)\nFault (page table entry not valid)\n\nVirtual Address 1e6f:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x13  pte contents:(valid 0, pfn 16)\n      --&gt; To Disk Sector Address 0x2cf --&gt; Value: 1c\n&#96;&#96;&#96;\n\n## 简评\n\n对于第四个地址 &#96;0af6&#96;&#xff0c;PTE 的内容是 &#96;0x7f&#96;&#xff0c;很多同学并没有注意到题目中的说明&#xff1a;\n\n&gt; VALID==1表示&#xff0c;表示映射存在&#xff1b;VALID==0表示&#xff0c;表示内存映射不存在&#xff08;有两种情况&#xff1a;a.对应的物理页帧swap out在硬盘上&#xff1b;b.既没有在内存中&#xff0c;也没有在硬盘上&#xff0c;这时页帧号为0x7F&#xff09;。\n\n而是去硬盘上查找了&#xff0c;得到了错误的结果 &#96;0x03&#96;。正确的结果应该是题目中描述的情况 b&#xff1a;“既没有在内存中&#xff0c;也没有在硬盘上”。</md>"}, {"anon": "no", "uid": "je2ib27z6a7691", "subject": "第六讲课后练习参考解答", "created": "2020-03-10T03:20:39Z", "content": "<md>## 手算\n\n&gt; 2017011114\n\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb4fxsaxof%2FLec6HW_HW08.jpg)\n\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb7frr6lm0%2FLec6HW_HW08_2.jpg)\n\n## 程序实现 (python)\n\n&gt; 2017011062\n\n&#96;&#96;&#96;\ndef PDBR():\n    return 0xd80\n\n\nif __name__ == &#34;__main__&#34;:\n    def func(x): return int(x, 16)\n    with open(&#39;disk.txt&#39;, &#39;r&#39;) as f:\n        disk = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(disk)\n    with open(&#39;mem.txt&#39;, &#39;r&#39;) as f:\n        mem = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(mem)\n\n    va = int(input(&#39;input vaddr, gkd: &#39;), 16)\n    print(&#39;Virtual Address {:03x}:&#39;.format(va))\n    pde_index = va &gt;&gt; 10 &amp; 0x1f\n    pde_content = mem[PDBR() &gt;&gt; 5][pde_index]\n    valid = pde_content &gt;&gt; 7\n    pfn = pde_content &amp; 0x7f\n    print(&#39;  --&gt; pde index:0x{:02x}  pde contents:(valid {}, pfn {:02x})&#39;.format(pde_index, valid, pfn))\n    if valid == 0 and pfn == 0x7f:\n        print(&#39;Fault (page directory not valid)&#39;)\n    elif valid == 1:\n        pte_index = va &gt;&gt; 5 &amp; 0x1f\n        pte_content = mem[pfn][pte_index]\n        valid = pte_content &gt;&gt; 7\n        pfn = pte_content &amp; 0x7f\n        print(&#39;    --&gt; pte index:0x{:02x}  pte contents:(valid {}, pfn {:02x})&#39;.format(pte_index, valid, pfn))\n        if valid == 0 and pfn == 0x7f:\n            print(&#39;Fault (page table entry not valid)&#39;)\n        elif valid == 1:\n            pa = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = mem[pfn][va &amp; 0x1f]\n            print(&#39;      --&gt; To Physical Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(pa, value))\n        else:\n            da = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = disk[da &gt;&gt; 5][da &amp; 0x1f]\n            print(&#39;      --&gt; To Disk Sector Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(da, value))\n    else:\n        pass\n&#96;&#96;&#96;\n\n输出&#xff1a;\n\n&#96;&#96;&#96;\nVirtual Address 6653:\n  --&gt; pde index:0x19  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address 1c13:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x00  pte contents:(valid 1, pfn 76)\n      --&gt; To Physical Address 0xed3 --&gt; Value: 12\n\nVirtual Address 6890:\n  --&gt; pde index:0x1a  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address af6:\n  --&gt; pde index:0x02  pde contents:(valid 1, pfn 21)\n    --&gt; pte index:0x17  pte contents:(valid 0, pfn 7f)\nFault (page table entry not valid)\n\nVirtual Address 1e6f:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x13  pte contents:(valid 0, pfn 16)\n      --&gt; To Disk Sector Address 0x2cf --&gt; Value: 1c\n&#96;&#96;&#96;\n\n## 简评\n\n对于第四个地址 &#96;0af6&#96;&#xff0c;PTE 的内容是 &#96;0x7f&#96;&#xff0c;很多同学并没有注意到题目中的说明&#xff1a;\n\n&gt; VALID==1表示&#xff0c;表示映射存在&#xff1b;VALID==0表示&#xff0c;表示内存映射不存在&#xff08;有两种情况&#xff1a;a.对应的物理页帧swap out在硬盘上&#xff1b;b.既没有在内存中&#xff0c;也没有在硬盘上&#xff0c;这时页帧号为0x7F&#xff09;。\n\n而是去硬盘上查找了&#xff0c;得到了错误的结果 &#96;0x03&#96;。正确的结果应该是题目中描述的情况 b&#xff1a;“既没有在内存中&#xff0c;也没有在硬盘上”。</md>"}, {"anon": "no", "uid": "je2ib27z6a7691", "subject": "第六讲课后练习参考解答", "created": "2020-03-10T03:19:56Z", "content": "<md># 手算\n\n&gt; 2017011114\n\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb4fxsaxof%2FLec6HW_HW08.jpg)\n\n![](/redirect/s3?bucket=uploads&amp;prefix=attach%2Fi5j09fnsl7k5x0%2Fje2ib27z6a7691%2Fk7lb7frr6lm0%2FLec6HW_HW08_2.jpg)\n\n# 程序实现 (python)\n\n&gt; 2017011062\n\n&#96;&#96;&#96;\ndef PDBR():\n    return 0xd80\n\n\nif __name__ == &#34;__main__&#34;:\n    def func(x): return int(x, 16)\n    with open(&#39;disk.txt&#39;, &#39;r&#39;) as f:\n        disk = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(disk)\n    with open(&#39;mem.txt&#39;, &#39;r&#39;) as f:\n        mem = list(map(lambda line: list(map(lambda hexstr: int(hexstr, 16), line.split(&#39; &#39;))), f.readlines()))\n        # print(mem)\n\n    va = int(input(&#39;input vaddr, gkd: &#39;), 16)\n    print(&#39;Virtual Address {:03x}:&#39;.format(va))\n    pde_index = va &gt;&gt; 10 &amp; 0x1f\n    pde_content = mem[PDBR() &gt;&gt; 5][pde_index]\n    valid = pde_content &gt;&gt; 7\n    pfn = pde_content &amp; 0x7f\n    print(&#39;  --&gt; pde index:0x{:02x}  pde contents:(valid {}, pfn {:02x})&#39;.format(pde_index, valid, pfn))\n    if valid == 0 and pfn == 0x7f:\n        print(&#39;Fault (page directory not valid)&#39;)\n    elif valid == 1:\n        pte_index = va &gt;&gt; 5 &amp; 0x1f\n        pte_content = mem[pfn][pte_index]\n        valid = pte_content &gt;&gt; 7\n        pfn = pte_content &amp; 0x7f\n        print(&#39;    --&gt; pte index:0x{:02x}  pte contents:(valid {}, pfn {:02x})&#39;.format(pte_index, valid, pfn))\n        if valid == 0 and pfn == 0x7f:\n            print(&#39;Fault (page table entry not valid)&#39;)\n        elif valid == 1:\n            pa = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = mem[pfn][va &amp; 0x1f]\n            print(&#39;      --&gt; To Physical Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(pa, value))\n        else:\n            da = (pfn &lt;&lt; 5) | (va &amp; 0x1f)\n            value = disk[da &gt;&gt; 5][da &amp; 0x1f]\n            print(&#39;      --&gt; To Disk Sector Address 0x{:03x} --&gt; Value: {:02x}&#39;.format(da, value))\n    else:\n        pass\n&#96;&#96;&#96;\n\n输出&#xff1a;\n\n&#96;&#96;&#96;\nVirtual Address 6653:\n  --&gt; pde index:0x19  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address 1c13:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x00  pte contents:(valid 1, pfn 76)\n      --&gt; To Physical Address 0xed3 --&gt; Value: 12\n\nVirtual Address 6890:\n  --&gt; pde index:0x1a  pde contents:(valid 0, pfn 7f)\nFault (page directory not valid)\n\nVirtual Address af6:\n  --&gt; pde index:0x02  pde contents:(valid 1, pfn 21)\n    --&gt; pte index:0x17  pte contents:(valid 0, pfn 7f)\nFault (page table entry not valid)\n\nVirtual Address 1e6f:\n  --&gt; pde index:0x07  pde contents:(valid 1, pfn 3d)\n    --&gt; pte index:0x13  pte contents:(valid 0, pfn 16)\n      --&gt; To Disk Sector Address 0x2cf --&gt; Value: 1c\n&#96;&#96;&#96;\n\n# 简评\n\n对于第四个地址 &#96;0af6&#96;&#xff0c;PTE 的内容是 &#96;0x7f&#96;&#xff0c;很多同学并没有注意到题目中的说明&#xff1a;\n\n&gt; VALID==1表示&#xff0c;表示映射存在&#xff1b;VALID==0表示&#xff0c;表示内存映射不存在&#xff08;有两种情况&#xff1a;a.对应的物理页帧swap out在硬盘上&#xff1b;b.既没有在内存中&#xff0c;也没有在硬盘上&#xff0c;这时页帧号为0x7F&#xff09;。\n\n而是去硬盘上查找了&#xff0c;得到了错误的结果 &#96;0x03&#96;。正确的结果应该是题目中描述的情况 b&#xff1a;“既没有在内存中&#xff0c;也没有在硬盘上”。</md>"}], "type": "note", "tags": ["lecture6", "student", "unanswered"], "tag_good": [], "unique_views": 140, "children": [], "tag_good_arr": [], "id": "k7lbtf64uw3259", "config": {"seen": {"34": 4, "423": 7, "1311": 6, "6": 8, "1288": 1, "1161": 5, "1172": 0, "174": 2, "175": 3}}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 2, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643170014200, "default_anonymity": "no"}, "error": null, "aid": "kyv101dkbk0jg"}