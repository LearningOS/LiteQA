{"result": {"folders": ["lab1"], "nr": 1377, "data": {"embed_links": []}, "created": "2020-02-06T13:18:57Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "k0keglbgnqt59c", "data": "k6aronb2sk66t0", "type": "create", "when": "2020-02-06T13:18:57Z"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "data": "k6bayznuxrh4ul", "to": "k6aronb042q6sz", "type": "s_answer", "when": "2020-02-06T22:18:52Z"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "data": "k6bb2o6r9z41si", "type": "s_answer_update", "when": "2020-02-06T22:21:44Z"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "data": "k6bb5qpiti65fb", "type": "s_answer_update", "when": "2020-02-06T22:24:07Z"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "data": "k6bbkp3ekpt7i8", "type": "s_answer_update", "when": "2020-02-06T22:35:45Z"}, {"anon": "no", "uid": "k0keglbgnqt59c", "to": "k6aronb042q6sz", "type": "followup", "when": "2020-02-07T01:56:18Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "k0keglbgnqt59c", "subject": "/boot/asm.h中宏SEG_ASM实现segment descriptor的疑问", "created": "2020-02-06T13:18:57Z", "content": "<p>我不太明白在lab1/boot/asm.h里实现segment descriptor结构的宏里为什么要把在第一个word里lim右移12位&#xff0c;和后面右移28位的操作。是因为在bootasm.S里传给这个宏大时候的lim已经先左移了12位么&#xff1f;我自己有点想不明白&#xff0c;向助教、老师请教一下&#xff0c;谢谢助教、老师&#xff01;</p>"}], "type": "question", "tags": ["lab1", "student"], "tag_good": [], "unique_views": 144, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2020-02-06T22:18:52Z", "bucket_order": 3, "tag_endorse": [{"role": "student", "name": "Esoom", "endorser": {}, "admin": false, "photo": null, "id": "k0keglbgnqt59c", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "张伦冲", "endorser": {}, "admin": false, "photo": null, "id": "ka3jyvwwlb7273", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "bucket_name": "Today", "id": "k6bayznq2ra4uk", "history": [{"anon": "no", "uid": "jvwis9vjc9t6d3", "subject": "", "created": "2020-02-06T22:35:45Z", "content": "<p>同为学生&#xff0c;冒昧回答一下。段描述符如下图&#xff1a;</p>\n<p></p>\n<p><img src=\"/img/1377-2548740569a9f3d2.gif\" alt=\"segment descriptor\" /></p>\n<p></p>\n<p><tt>limit </tt>字段为 20 bits&#xff0c;表示上限为 1 MB&#xff0c;但是我们的 <tt>limit</tt> 实际上有4 GB&#xff0c;那么如何表示 4 GB 呢&#xff1f;注意 <tt>G</tt> (granularity) 字段&#xff0c;<tt>G </tt>设置为1时粒度为 4 KB&#xff0c;那么1M  $$\\times $$4KB = 4GB. 同时应该设置<tt> D/B</tt> (default operation size/default stack pointer size and/or upper bound) 为 1 表示默认操作数大小为 32 bits。</p>\n<p></p>\n<p>所以在 <tt>SEG_ASM </tt>中&#xff0c;注意<tt> </tt></p>\n<pre>(0xC0 | (((lim) &gt;&gt; 28) &amp; 0xf))</pre>\n<p><tt>部分&#xff0c;其中 </tt><tt>0xC0</tt> 就是设置了<tt>G=1, D/B=1</tt>.</p>\n<p></p>\n<p>所以先右移12位就是以4 KB为粒度&#xff0c;相当于除以 4 KB 取其商。右移28位同理。</p>\n<p></p>\n<p>参考资料&#xff1a;Intel 手册 Segment Descriptors 一节。</p>"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "subject": "", "created": "2020-02-06T22:24:07Z", "content": "<p>段描述符如下图&#xff1a;</p>\n<p></p>\n<p><img src=\"/img/1377-2548740569a9f3d2.gif\" alt=\"segment descriptor\" /></p>\n<p></p>\n<p><tt>limit </tt>字段为 20 bits&#xff0c;表示上限为 1 MB&#xff0c;但是我们的 <tt>limit</tt> 实际上有4 GB&#xff0c;那么如何表示 4 GB 呢&#xff1f;注意 <tt>G</tt> (granularity) 字段&#xff0c;<tt>G </tt>设置为1时粒度为 4 KB&#xff0c;那么1M  $$\\times $$4KB = 4GB. 同时应该设置<tt> D/B</tt> (default operation size/default stack pointer size and/or upper bound) 为 1 表示默认操作数大小为 32 bits。</p>\n<p></p>\n<p>所以在 <tt>SEG_ASM </tt>中&#xff0c;注意<tt> </tt></p>\n<pre>(0xC0 | (((lim) &gt;&gt; 28) &amp; 0xf))</pre>\n<p><tt>部分&#xff0c;其中 </tt><tt>0xC0</tt> 就是设置了<tt>G=1, D/B=1</tt>.</p>\n<p></p>\n<p>所以先右移12位就是以4 KB为粒度&#xff0c;相当于除以 4 KB 取其商。右移28位同理。</p>\n<p></p>\n<p>参考资料&#xff1a;Intel 手册 Segment Descriptors 一节。</p>"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "subject": "", "created": "2020-02-06T22:21:44Z", "content": "<p><tt>limit </tt>字段为 20 bits&#xff0c;表示上限为 1 MB&#xff0c;但是我们的 <tt>limit</tt> 实际上有4 GB&#xff0c;那么如何表示 4 GB 呢&#xff1f;注意 <tt>G</tt> (granularity) 字段&#xff0c;<tt>G </tt>设置为1时粒度为 4 KB&#xff0c;那么1M  $$\\times $$4KB = 4GB. 同时应该设置<tt> D/B</tt> (default operation size/default stack pointer size and/or upper bound) 为 1 表示默认操作数大小为 32 bits。</p>\n<p></p>\n<p>所以在 <tt>SEG_ASM </tt>中&#xff0c;注意<tt> </tt></p>\n<pre>(0xC0 | (((lim) &gt;&gt; 28) &amp; 0xf))</pre>\n<p><tt>部分&#xff0c;其中 </tt><tt>0xC0</tt> 就是设置了<tt>G=1, D/B=1</tt>.</p>\n<p></p>\n<p>所以先右移12位就是以4 KB为粒度&#xff0c;相当于除以 4 KB 取其商。右移28位同理。</p>\n<p></p>\n<p>建议参考 Intel 手册 Segment Descriptors 一节。</p>"}, {"anon": "no", "uid": "jvwis9vjc9t6d3", "subject": "", "created": "2020-02-06T22:18:52Z", "content": "<p><tt>limit </tt>字段为 20 bits&#xff0c;表示上限为 1 MB&#xff0c;但是我们的 <tt>limit</tt> 实际上有4 GB&#xff0c;那么如何表示 4 GB 呢&#xff1f;注意 <tt>G</tt> (granularity) 字段&#xff0c;<tt>G </tt>设置为1时粒度为 4 Kb&#xff0c;那么1M  $$\\times $$4KB = 4GB. 同时应该设置<tt> D/B</tt> (default operation size/default stack pointer size and/or upper bound) 为 1 表示默认操作数大小为 32 bits。</p>\n<p></p>\n<p>所以在 <tt>SEG_ASM </tt>中&#xff0c;注意<tt> </tt></p>\n<pre>(0xC0 | (((lim) &gt;&gt; 28) &amp; 0xf))</pre>\n<p><tt>部分&#xff0c;其中 </tt><tt>0xC0</tt> 就是设置了<tt>G=1, D/B=1</tt>.</p>\n<p></p>\n<p>建议参考 Intel 手册 Segment Descriptors 一节。</p>"}], "type": "s_answer", "tag_endorse_arr": ["k0keglbgnqt59c", "ka3jyvwwlb7273"], "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>谢谢你的回答&#xff0c;非常详细的解释&#xff01;</p>", "created": "2020-02-07T01:56:18Z", "bucket_order": 38, "bucket_name": "Week 2/2 - 2/8", "type": "followup", "tag_good": [], "uid": "k0keglbgnqt59c", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "k6biqlnj7mc5i3", "updated": "2020-02-07T01:56:18Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "k6aronb042q6sz", "config": {"seen": {"144": 3, "375": 5, "386": 8, "485": 0, "554": 2, "225": 7, "732": 6, "73": 1, "815": 9, "508": 4}}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169899573, "default_anonymity": "no"}, "error": null, "aid": "kyv0xkxhf9w5vj"}