{"result": {"folders": ["quiz2"], "nr": 1303, "data": {"embed_links": []}, "created": "2019-04-07T06:59:40Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "j3621o15xuk2h6", "data": "ju6ku2i49a35ff", "type": "create", "when": "2019-04-07T06:59:40Z"}, {"anon": "no", "uid": "j7f1tr6wJNH", "to": "ju6ku2i24w55fe", "type": "followup", "when": "2019-04-07T07:14:15Z"}, {"anon": "no", "uid": "j7f1tr6wJNH", "to": "ju6ku2i24w55fe", "type": "feedback", "when": "2019-04-11T15:08:18Z"}, {"anon": "no", "uid": "j7f1tr6wJNH", "to": "ju6ku2i24w55fe", "type": "feedback", "when": "2019-04-15T11:44:37Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "j3621o15xuk2h6", "subject": "本帖主要讨论问题是关于虚拟地址和物理地址在页表机制下的正确描述&#xff0c;我的论述是两个角度&#xff0c;一个是从cpu角度&#xff0c;一个是MMU角度。", "created": "2019-04-07T06:59:40Z", "content": "<p>预先说明&#xff1a;</p>\n<p>1. 我下面的相关代码来源于ucore_os_lab中的代码。</p>\n<p>2. 所涉及的书籍为&#xff1a;</p>\n<p>1&#xff09;Computer Systems - A Programmer Perspective -- third edition</p>\n<p>2&#xff09;Operating System Concepts -- ten edition</p>\n<p>3&#xff09;ucore实验指导书 -- 最新版</p>\n<p>3. 我认为虚拟地址和逻辑地址为指同样的东西</p>\n<p>讨论汇总&#xff1a;</p>\n<p>1. 在学堂在线OS课程交流群中&#xff0c;向老师关于这个问题的第一次回答为&#xff1a;</p>\n<p>CPU可以看到的地址都是虚拟地址&#xff0c;经过MMU后才会有物理地址。定位二级页表的事情由MMU做。</p>\n<p>第二次回答的内容为&#xff1a;</p>\n<p>1. 在保护模式下CPU可以看到的地址都是虚拟地址&#xff0c;经过MMU后才会有物理地址。定位二级页表的事由MMU做。所以&#xff0c;CPU不能直接用物理地址来访问内存&#xff0c;而必须使用虚拟地址来访问。这时才有&#xff0c;CPU要修改页表项内容时&#xff0c;也是通过虚拟地址来访问的。<br />2. 在X86-32 CPU上&#xff0c;物理地址可能不是32位的。如在使用物理地址扩展&#xff08;PAE&#xff09;时&#xff0c;物理地址会是36位&#xff0c;使用4KB页面大小时物理页号也就变成了24位&#xff0c;于是一个页表项就占了8字节。<br />3. CR3寄存器中保存的是页目录的起始物理地址&#xff0c;CPU只在地址转换中使用它的内容。</p>\n<p>我的理解为&#xff1a;</p>\n<p>1. 首先&#xff0c;CPU在保护模式下&#xff0c;CPU所面对的地址均是虚拟地址&#xff0c;所有的内容访问操作均由MMU来完成&#xff0c;实际数据的获取将由高速缓存或主存来返回实际的数据&#xff0c;这个情形适用于CPU执行用户程序时和ucore内核的内存映射机制。</p>\n<p><img src=\"/img/1303-519b022357dbafbb.png\" alt=\"\" /></p>\n<p><img src=\"/img/1303-b6715b136019bacc.png\" alt=\"\" /></p>\n<p><img src=\"/img/1303-a3b4c430cdfdd1d9.png\" alt=\"\" /></p>\n<p>2. 关于页表的问题</p>\n<p>关于二级页表的中各个部分所存储的地址均为实际的物理地址&#xff0c;&#xff08;不考虑权限位的问题&#xff09;&#xff0c;因为本身cpu所给到mmu的的地址就是虚拟地址&#xff0c;而mmu就是去完成确认这个虚拟地址所对应的物理地址是什么&#xff0c;无论是页表机制还是段机制&#xff0c;其核心就是拿到一个虚拟地址&#xff0c;返回对应的物理地址&#xff0c;这个返回的对象是内存&#xff0c;从上面图中就可以得出&#xff0c;cpu最终拿到的数据由主存或高速缓存所提供。</p>\n<p>理论支撑&#xff08;以ucore的代码为例&#xff09;&#xff1a;</p>\n<p>源码目录&#xff1a;kern/init/entry.s</p>\n<p>#define REALLOC(x) (x - KERNBASE)</p>\n<p>movl $REALLOC(__boot_pgdir), %eax<br /> movl %eax, %cr3</p>\n<p>通过这两句话把页目录表的物理地址传递给cr3寄存器&#xff0c;说明cr3寄存器中拿到的数据就是页目录表的物理地址</p>\n<p>__boot_pgdir:<br />.globl __boot_pgdir<br /> # map va 0 ~ 4M to pa 0 ~ 4M (temporary)<br /> .long REALLOC(__boot_pt1) &#43; (PTE_P | PTE_U | PTE_W)<br /> .space (KERNBASE / PGSIZE / 1024 * 4) - (. - __boot_pgdir) # pad to PDE of KERNBASE<br /> # map va KERNBASE &#43; (0 ~ 4M) to pa 0 ~ 4M<br /> .long REALLOC(__boot_pt1) &#43; (PTE_P | PTE_U | PTE_W)<br /> .space PGSIZE - (. - __boot_pgdir) # pad to PGSIZE</p>\n<p>这段代码实现了对页目录的内容填写&#xff0c;完成了对va 0 ~ 4M to pa 0 ~ 4M和va KERNBASE &#43; (0 ~ 4M) to pa 0 ~ 4M的映射。这里就说明了页目录表中的地址为物理地址。</p>\n<p>【注】&#xff1a;&#39;.long&#39; 代表的是一个32位的数据&#xff1b; &#39;.space&#39; 代表的是以字节为单位申请内存空间&#xff0c;默认填充值为零</p>\n<p>.set i, 0<br />__boot_pt1:<br />.rept 1024<br /> .long i * PGSIZE &#43; (PTE_P | PTE_W)<br /> .set i, i &#43; 1</p>\n<p>上面的代码完成了一个二级页表的申请和内容的填写&#xff1b;通过一个循环和对对应的物理地址的计算&#xff0c;对 pa 0 ~ 4M所需填写的二级页表的内容进行了填写。</p>\n<p><img src=\"/img/1303-53b42252362c7d56.png\" alt=\"\" /></p>\n<p>3. 上述讨论中未涉及TLB相关内容&#xff0c;若有同学愿意补充将更好。</p>\n<p>4. 上述陈述若有不对的地方&#xff0c;希望大家指出。</p>"}], "type": "question", "tags": ["quiz2", "student", "unanswered"], "tag_good": [{"role": "student", "name": "289212182@qq.com", "endorser": {}, "admin": false, "photo": "1551463481_35.png", "id": "j7f1tr6wJNH", "photo_url": "https://d1b10bmlvqabco.cloudfront.net/photos/j7f1tr6wJNH/1551463481_35.png", "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "Kyrie", "endorser": {}, "admin": false, "photo": null, "id": "ju69lug52OdQ", "photo_url": null, "published": true, "us": false, "facebook_id": null}, {"role": "student", "name": "Esoom", "endorser": {}, "admin": false, "photo": null, "id": "k0keglbgnqt59c", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "unique_views": 163, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>下面是昨天群里大家的若干讨论发言&#xff0c;做一下摘录保存于此楼。&#xff08;向老师的发言标注了<strong>★号</strong>&#xff09;</p>\n<p></p>\n<p><strong>## 问题&#xff1a;页目录表中保存的二级页表地址是线性地址还是虚拟地址呢&#xff1f;&#xff08;——by&#xff1a;nullptr&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言1</strong>&#xff1a;物理地址<strong>&#xff08;——by&#xff1a;Crowerly&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言2</strong>&#xff1a;[pic]这是 entry.s 的代码&#xff1b;这是系统头一次初始化页目录表和二级页表的地方&#xff1b;[pic]这是我在pmm_init中的测试 &#xff1b;最新的代码对于entry.s有所修改 但是基本一样&#xff1b;&#64;nullptr &#xff1b;二级页表的物理地址基本是通过循环迭代算出来的&#xff1b;那个_boot_pt1 就是代表了一个二级页表的地址&#xff1b;抱歉 是我的问题 他调用了realloc 就是物理地址<strong>&#xff08;——by&#xff1a;&amp;你的心link我的心&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言3</strong>&#xff1a;&#64;&amp;你的心link我的心 同学 页目录如果存的是虚拟地址&#xff0c;那还怎么定位二级页表的页啊<strong>&#xff08;——by&#xff1a;Crowerly&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言4<strong>★</strong></strong>&#xff1a;“CPU可以看到的地址都是虚拟地址&#xff0c;经过MMU后才会有物理地址。&#64;Crowerly 定位二级页表的事由MMU做。”<strong>&#xff08;——by&#xff1a;向老师&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言5</strong>&#xff1a;&#64;向老师 老师 页表就是用来给MMU做地址翻译的啊&#xff0c;如果一级页表里头存的是虚拟地址&#xff0c;MMU就无法定位二级页表的位置了吧&#xff1b;我再回去确认一下吧&#xff1b;<strong>&#xff08;——by&#xff1a;Crowerly&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言6</strong>&#xff1a;其实 你们说的就是对的&#xff1b;代码是通过realloc一个简单的减法&#xff1b;实现了物理地址和虚拟地址的转换&#xff1b;老师的意思是强调CPU拿到的地址是虚拟地址&#xff1b;我们讨论的地址是mmu看到的地址&#xff1b;页表也是由mmu来实现的&#xff1b;不冲突&#xff1b;我声明我观点的错误 因为没有看到realloc&#xff1b;页目录表和二级页表都是存储的物理地址包括cr3 代码中均有体现&#xff1b;所站视角不同&#xff1b;<strong>&#xff08;——by&#xff1a;&amp;你的心link我的心&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言7</strong>&#xff1a;&#64;某普通大学的数学汪 仔细捋了捋代码&#xff0c;确实是物理地址&#xff0c;书上也写了是物理地址<strong>&#xff08;——by&#xff1a;nullptr&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言8</strong>&#xff1a;也就是说根据线性地址生成最终物理地址的工作由MMU完成。cpu拿到的第一手地址都是虚拟地址&#xff0c;由分段机制生成线性地址&#xff0c;若不启动分页则线性地址就是最终物理地址&#xff0c;若启用分页机制则再对线性地址进行加工。 所以页表的地址是物理地址还是虚拟地址哇&#xff1f;<strong>&#xff08;——by&#xff1a;cumt周文&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言9</strong>&#xff1a;cr3有页目录表物理地址&#xff0c;然后查找到存放的页表物理地址&#xff0c;然后从页表查到物理页号和offset拼起来&#xff0c;应该是这样吧?<strong>&#xff08;——by&#xff1a;null&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言10</strong>&#xff1a;我突然想起来一件事情&#xff1b;咱们访问必须是32位地址。页目录项给的所谓&#34;物理地址&#34;是这种可以直接拿来不做任何变化访存的地址吗&#xff1f;&#xff1b;如果不是&#xff0c;mmu必须对它进行变换&#xff0c;那所谓的&#34;物理地址&#34;也就不是真正的物理地址鸭&#xff1f;&#xff1b;能这样理解吗&#xff1f;轻喷。<strong>&#xff08;——by&#xff1a;cumt周文&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言11</strong>&#xff1a;页目录存的是物理页框号&#xff1b;确实不是真的物理地址&#xff1b;真的物理地址需要做12位左移位。<strong>&#xff08;——by&#xff1a;Crowerly&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言12</strong>&#xff1a;是吧&#xff1f;我觉得所有的访存工作都是mmu在做&#xff0c;cpu并不知情&#xff0c;它俩谁也不认识谁&#xff1b;个人粗俗理解<strong>&#xff08;——by&#xff1a;cumt周文&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言13</strong>&#xff1a;...&#xff08;若干&#xff09;</p>\n<p><strong></strong></p>\n<p><strong>发言14<strong>★</strong></strong>&#xff1a;“我注意到大家对虚拟地址和物理地址的讨论。这是操作系统课的重要概念&#xff0c;需要仔细理解代码才能有准确的了解。有必要进行深入的讨论。<br />我先说说我的理解。<br />1. 在保护模式下CPU可以看到的地址都是虚拟地址&#xff0c;经过MMU后才会有物理地址。定位二级页表的事由MMU做。所以&#xff0c;CPU不能直接用物理地址来访问内存&#xff0c;而必须使用虚拟地址来访问。这时才有&#xff0c;CPU要修改页表项内容时&#xff0c;也是通过虚拟地址来访问的。<br />2. 在X86-32 CPU上&#xff0c;物理地址可能不是32位的。如在使用物理地址扩展&#xff08;PAE&#xff09;时&#xff0c;物理地址会是36位&#xff0c;使用4KB页面大小时物理页号也就变成了24位&#xff0c;于是一个页表项就占了8字节。<br />3. CR3寄存器中保存的是页目录的起始物理地址&#xff0c;CPU只在地址转换中使用它的内容。<br />请同学们继续置疑和修正描述&#xff0c;并补充相关的代码例证。希望有同学来整理大家的交流结果&#xff0c;并放到Piazza上&#xff0c;以方便以后的同学。谁有兴趣来做此事&#xff1f;”<strong>&#xff08;——by&#xff1a;向老师&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言15</strong>&#xff1a;我愿意提供ucore相关代码的解析 因为当初探究过这个问题<strong>&#xff08;——by&#xff1a;&amp;你的心link我的心&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言16★</strong>&#xff1a;&#64;&amp;你的心link我的心 好学生。那就先由你来补充整理第一个版本。如何&#xff1f;<strong>&#xff08;——by&#xff1a;向老师&#xff09;</strong></p>\n<p><strong></strong></p>\n<p><strong>发言17</strong>&#xff1a;好的 老师 pizza我是很会使用 我先试一下<strong>&#xff08;——by&#xff1a;&amp;你的心link我的心&#xff09;</strong></p>", "created": "2019-04-07T07:14:15Z", "bucket_order": 51, "bucket_name": "Week 4/7 - 4/13", "type": "followup", "tag_good": [{"role": "student", "name": "Esoom", "endorser": {}, "admin": false, "photo": null, "id": "k0keglbgnqt59c", "photo_url": null, "published": true, "us": false, "facebook_id": null}], "uid": "j7f1tr6wJNH", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我还没有详细的完成LAB2物理内存管理的实验内容。不过据现在已经掌握的知识信息来看&#xff0c;存在于段选择子中的地址被称作“<strong>线性地址</strong>”。 完成实验我再来补充补充哈。</p>", "created": "2019-04-11T15:08:18Z", "bucket_order": 51, "bucket_name": "Week 4/7 - 4/13", "type": "feedback", "tag_good": [], "uid": "j7f1tr6wJNH", "children": [], "tag_good_arr": [], "id": "jucs1vb24741zg", "updated": "2019-04-11T15:08:18Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>", "created": "2019-04-15T11:44:37Z", "bucket_order": 50, "bucket_name": "Week 4/14 - 4/20", "type": "feedback", "tag_good": [], "uid": "j7f1tr6wJNH", "children": [], "tag_good_arr": [], "id": "juiajby6iiq49p", "updated": "2019-04-15T11:44:37Z", "config": {}}], "tag_good_arr": ["k0keglbgnqt59c"], "no_answer": 0, "id": "ju6lctqbhx27f2", "updated": "2019-04-07T07:14:15Z", "config": {}}], "tag_good_arr": ["j7f1tr6wJNH", "ju69lug52OdQ", "k0keglbgnqt59c"], "no_answer": 1, "id": "ju6ku2i24w55fe", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 3, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169695370, "default_anonymity": "no"}, "error": null, "aid": "kyv0t7d6jjp2uy"}