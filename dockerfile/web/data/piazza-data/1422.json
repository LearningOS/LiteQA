{"result": {"folders": ["lecture6"], "nr": 1422, "data": {"embed_links": []}, "created": "2020-03-09T13:24:58Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "k71vna4kh1r59q", "data": "k7khzn35k1e5r5", "type": "create", "when": "2020-03-09T13:24:58Z"}, {"anon": "no", "uid": "k71vna4kh1r59q", "data": "k7ki1u2pfur70u", "type": "update", "when": "2020-03-09T13:26:40Z"}, {"anon": "full", "uid_a": "a_0", "data": "k9bzqlauhaf2tn", "type": "update", "when": "2020-04-22T23:51:18Z"}], "bucket_name": "Today", "history": [{"anon": "full", "uid_a": "a_0", "subject": "虚拟存储初始化", "created": "2020-04-22T23:51:18Z", "content": "<p><md>### 虚拟内存初始化\n为了了解虚拟内存初始化的过程和虚拟内存开启后的效果&#xff0c;首先需要了解在寻你内存初始化之前计算机的内存组织方式。\n在刚刚完成的lab1中&#xff0c;我们所完成的os实际上就还不具备虚拟内存的功能&#xff0c;恰好符合没有开启虚拟内存的os运行状态。此时cpu在进行内存寻址时&#xff0c;会直接使用物理地址进行寻址&#xff0c;访问特殊内存地址&#xff08;IO设备地址&#xff09;时同样会使用固定的物理地址直接访问。os的寻址方式的示意图为&#xff1a;\n![avatar](https://miro.medium.com/max/1316/1*8GE0S4lsBN37jQKwrvE9tw.png)\n为了开启虚拟内存&#xff0c;就需要使用页表将物理地址与虚拟地址建立联系&#xff0c;利用页表进行查找&#xff0c;从而实现从os需要访问的虚拟地址到硬件所支持的物理地址的转化过程。具体的转化过程依赖于硬件上MMU部件的设计&#xff0c;课程中也已经讲解。\n![avatar](https://miro.medium.com/max/659/1*DC7ZRbNJ8OQ1BL3cLgTf2w.jpeg)\n虚拟内存开启后的内存寻址方式就变为下图所示&#xff1a;\n![avatar](https://miro.medium.com/max/1172/1*zMcNVhj21I8G1Fgle9zw5A.png)\nos会经过硬件上的MMU器件进行寻址转换&#xff0c;实现虚拟内存的功能。\n\n### 虚拟内存的开启方式\n虚拟内存的功能主要由硬件上的MMU部件进行支持&#xff0c;os为了使用虚拟内存功能&#xff0c;以X86架构为例&#xff0c;仅需要设定页表初始地址和状态寄存器即可&#xff08;cr3和cr0&#xff09;\n```s\nmov ecx, page_table ; 设定顶层页表起始地址\nmov cr3, ecx ; 将顶层页表地址传递给cr3寄存器\nmov ecx, cr0 ; 复制cr0寄存器当前状态\nor ecx, 0x80000000 ; 页表使能位置1&#xff08;从0起第31位&#xff09;\nmov cr0, ecx ; 重新设定cr0寄存器&#xff0c;页表功能使能\n```\n图片加载出现问题时&#xff0c;可见参考网址\n参考网址&#xff1a;https://medium.com/@connorstack/how-does-an-os-enable-virtual-memory-696a8f75f274\nEdit by 计74 王荻&#xff0c;董昊文</md>\n</p>"}, {"anon": "no", "uid": "k71vna4kh1r59q", "subject": "虚拟存储初始化", "created": "2020-03-09T13:26:40Z", "content": "<md>### 虚拟内存初始化\n为了了解虚拟内存初始化的过程和虚拟内存开启后的效果&#xff0c;首先需要了解在寻你内存初始化之前计算机的内存组织方式。\n在刚刚完成的lab1中&#xff0c;我们所完成的os实际上就还不具备虚拟内存的功能&#xff0c;恰好符合没有开启虚拟内存的os运行状态。此时cpu在进行内存寻址时&#xff0c;会直接使用物理地址进行寻址&#xff0c;访问特殊内存地址&#xff08;IO设备地址&#xff09;时同样会使用固定的物理地址直接访问。os的寻址方式的示意图为&#xff1a;\n![avatar](https://miro.medium.com/max/1316/1*8GE0S4lsBN37jQKwrvE9tw.png)\n为了开启虚拟内存&#xff0c;就需要使用页表将物理地址与虚拟地址建立联系&#xff0c;利用页表进行查找&#xff0c;从而实现从os需要访问的虚拟地址到硬件所支持的物理地址的转化过程。具体的转化过程依赖于硬件上MMU部件的设计&#xff0c;课程中也已经讲解。\n![avatar](https://miro.medium.com/max/659/1*DC7ZRbNJ8OQ1BL3cLgTf2w.jpeg)\n虚拟内存开启后的内存寻址方式就变为下图所示&#xff1a;\n![avatar](https://miro.medium.com/max/1172/1*zMcNVhj21I8G1Fgle9zw5A.png)\nos会经过硬件上的MMU器件进行寻址转换&#xff0c;实现虚拟内存的功能。\n\n### 虚拟内存的开启方式\n虚拟内存的功能主要由硬件上的MMU部件进行支持&#xff0c;os为了使用虚拟内存功能&#xff0c;以X86架构为例&#xff0c;仅需要设定页表初始地址和状态寄存器即可&#xff08;cr3和cr0&#xff09;\n&#96;&#96;&#96;s\nmov ecx, page_table ; 设定顶层页表起始地址\nmov cr3, ecx        ; 将顶层页表地址传递给cr3寄存器\nmov ecx, cr0        ; 复制cr0寄存器当前状态\nor  ecx, 0x80000000 ; 页表使能位置1&#xff08;从0起第31位&#xff09;\nmov cr0, ecx        ; 重新设定cr0寄存器&#xff0c;页表功能使能\n&#96;&#96;&#96;\n图片加载出现问题时&#xff0c;可见参考网址\n参考网址&#xff1a;https://medium.com/&#64;connorstack/how-does-an-os-enable-virtual-memory-696a8f75f274\nEdit by 计74 王荻&#xff0c;董昊文</md>"}, {"anon": "no", "uid": "k71vna4kh1r59q", "subject": "虚拟存储初始化", "created": "2020-03-09T13:24:58Z", "content": "<md>### 虚拟内存初始化\n为了了解虚拟内存初始化的过程和虚拟内存开启后的效果&#xff0c;首先需要了解在寻你内存初始化之前计算机的内存组织方式。\n在刚刚完成的lab1中&#xff0c;我们所完成的os实际上就还不具备虚拟内存的功能&#xff0c;恰好符合没有开启虚拟内存的os运行状态。此时cpu在进行内存寻址时&#xff0c;会直接使用物理地址进行寻址&#xff0c;访问特殊内存地址&#xff08;IO设备地址&#xff09;时同样会使用固定的物理地址直接访问。os的寻址方式的示意图为&#xff1a;\n![avatar](https://miro.medium.com/max/1316/1*8GE0S4lsBN37jQKwrvE9tw.png)\n为了开启虚拟内存&#xff0c;就需要使用页表将物理地址与虚拟地址建立联系&#xff0c;利用页表进行查找&#xff0c;从而实现从os需要访问的虚拟地址到硬件所支持的物理地址的转化过程。具体的转化过程依赖于硬件上MMU部件的设计&#xff0c;课程中也已经讲解。\n![avatar](https://miro.medium.com/max/659/1*DC7ZRbNJ8OQ1BL3cLgTf2w.jpeg)\n虚拟内存开启后的内存寻址方式就变为下图所示&#xff1a;\n![avatar](https://miro.medium.com/max/1172/1*zMcNVhj21I8G1Fgle9zw5A.png)\nos会经过硬件上的MMU器件进行寻址转换&#xff0c;实现虚拟内存的功能。\n\n### 虚拟内存的开启方式\n虚拟内存的功能主要由硬件上的MMU部件进行支持&#xff0c;os为了使用虚拟内存功能&#xff0c;以X86架构为例&#xff0c;仅需要设定页表初始地址和状态寄存器即可&#xff08;cr3和cr0&#xff09;\n&#96;&#96;&#96;s\nmov ecx, page_table ; 设定顶层页表起始地址\nmov cr3, ecx        ; 将顶层页表地址传递给cr3寄存器\nmov ecx, cr0        ; 复制cr0寄存器当前状态\nor  ecx, 0x80000000 ; 页表使能位置1&#xff08;从0起第31位&#xff09;\nmov cr0, ecx        ; 重新设定cr0寄存器&#xff0c;页表功能使能\n&#96;&#96;&#96;\n参考&#xff1a;https://medium.com/&#64;connorstack/how-does-an-os-enable-virtual-memory-696a8f75f274\nEdit by 计74 王荻&#xff0c;董昊文</md>"}], "type": "note", "tags": ["lecture6", "student", "unanswered"], "tag_good": [], "unique_views": 80, "children": [], "tag_good_arr": [], "id": "k7khzn321o65r4", "config": {"seen": {"33": 8, "331": 4, "215": 6, "106": 5, "92": 7, "1030": 1, "1183": 3, "1408": 0, "64": 2}}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 2, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643170012618, "default_anonymity": "no"}, "error": null, "aid": "kyv1005mf89dd"}