{"result": {"folders": ["lecture12", "课堂问答", "2016"], "nr": 749, "data": {"embed_links": []}, "created": "2016-03-30T02:58:45Z", "bucket_order": 3, "no_answer_followup": 10, "change_log": [{"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T02:58:45Z", "data": "ime9jno9efzix", "type": "create"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T02:59:04Z", "data": "ime9k2swkq9rc", "type": "update"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2016-03-30T05:43:32Z", "data": "imeffks8fyt2vy", "type": "update"}, {"uid": "hcrrjuyequh4bt", "anon": "no", "when": "2016-03-30T05:53:59Z", "data": "imeft0hl6eh1t9", "type": "update"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:10:50Z", "data": "imekp053np22a1", "type": "update"}, {"to": "ime9jno4sltiw", "uid": "i0zaci5voig5h", "anon": "no", "when": "2016-03-30T08:18:43Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "i242q8ug7vw40x", "anon": "no", "when": "2016-03-30T08:20:14Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:20:29Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-30T08:20:35Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:21:12Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "i0dlq4m0wjn5eo", "anon": "no", "when": "2016-03-30T08:21:26Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0gl5kctugw3xi", "anon": "no", "when": "2016-03-30T08:21:47Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:21:56Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:22:24Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:22:50Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "i0f9pvv0uxm6ko", "anon": "no", "when": "2016-03-30T08:22:59Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:23:22Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "i242q8ug7vw40x", "anon": "no", "when": "2016-03-30T08:23:27Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0zaci5voig5h", "anon": "no", "when": "2016-03-30T08:23:29Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-30T08:24:04Z", "type": "followup"}, {"to": "ime9jno4sltiw", "uid": "i0yuo4o74sx70w", "anon": "no", "when": "2016-03-30T08:24:18Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0c1nsm3911wc", "anon": "no", "when": "2016-03-30T08:25:24Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-03-30T08:25:39Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-03-30T08:26:50Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i3qk2vs65x276j", "anon": "no", "when": "2016-03-30T08:28:21Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0b7d04pl3y6c0", "anon": "no", "when": "2016-03-30T08:30:21Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikwht0mda9v4iu", "anon": "no", "when": "2016-03-30T08:31:07Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-03-30T08:32:58Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i21zpwab2z775p", "anon": "no", "when": "2016-03-30T08:39:20Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikx8y1dzPrM", "anon": "no", "when": "2016-03-30T08:41:34Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i11v1az5sf83l2", "anon": "no", "when": "2016-03-30T08:42:27Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-03-30T08:42:31Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i6w84pnmjCQ", "anon": "no", "when": "2016-03-30T08:43:41Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0boovu8sh63xb", "anon": "no", "when": "2016-03-30T08:47:15Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvr0o2bs7m3", "anon": "no", "when": "2016-03-30T08:51:43Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i6uiksj895B", "anon": "no", "when": "2016-03-30T08:53:05Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "iem550jbpyn515", "anon": "no", "when": "2016-03-30T08:53:44Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0brpl1lbyui6", "anon": "no", "when": "2016-03-30T08:55:32Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i1jd60b7orl10p", "anon": "no", "when": "2016-03-30T08:57:00Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0gkdbms5ie20o", "anon": "no", "when": "2016-03-30T08:58:59Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0nu5by9l7v7of", "anon": "no", "when": "2016-03-30T08:59:12Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ic226rac4j5jw", "anon": "no", "when": "2016-03-30T09:01:15Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i1bzj2xilgm4uk", "anon": "no", "when": "2016-03-30T09:01:51Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ic226rac4j5jw", "anon": "no", "when": "2016-03-30T09:04:08Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvqz0jx17m1", "anon": "no", "when": "2016-03-30T09:18:48Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0ayxqk6wry734", "anon": "no", "when": "2016-03-30T09:19:45Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i6w84pnmjCQ", "anon": "no", "when": "2016-03-30T09:27:03Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvo2cckb7jb", "anon": "no", "when": "2016-03-30T09:32:40Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0evrfcnckf5dt", "anon": "no", "when": "2016-03-30T09:39:46Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-03-30T09:39:58Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvr6di5i7ma", "anon": "no", "when": "2016-03-30T10:06:41Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i1bzj2xilgm4uk", "anon": "no", "when": "2016-03-30T10:12:18Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "il7aslzdYQT", "anon": "no", "when": "2016-03-30T10:24:12Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvnzpzq7j7", "anon": "no", "when": "2016-03-30T10:28:41Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvonk6wj7k1", "anon": "no", "when": "2016-03-30T10:28:44Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0c9nvk0xzc2n3", "anon": "no", "when": "2016-03-30T10:30:03Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0eqqq6jvng408", "anon": "no", "when": "2016-03-30T10:43:30Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvo2cckb7jb", "anon": "no", "when": "2016-03-30T10:46:09Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i1569mw0xp954u", "anon": "no", "when": "2016-03-30T10:52:55Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i6vir34gLfK", "anon": "no", "when": "2016-03-30T10:59:49Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i6ub5at2geM", "anon": "no", "when": "2016-03-30T11:01:16Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ie7xy71bn7b1s2", "anon": "no", "when": "2016-03-30T11:04:12Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i28t9sj8bas79c", "anon": "no", "when": "2016-03-30T11:10:54Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i3qk2vs65x276j", "anon": "no", "when": "2016-03-30T11:24:49Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i18riqkwrl225m", "anon": "no", "when": "2016-03-30T11:32:42Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i28skba6cd976f", "anon": "no", "when": "2016-03-30T11:37:59Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ie7xy3iwuug1os", "anon": "no", "when": "2016-03-30T11:41:47Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvp62fcm7ka", "anon": "no", "when": "2016-03-30T11:44:45Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0ccqbaxwdz75c", "anon": "no", "when": "2016-03-30T11:57:02Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0cb1385ni65l", "anon": "no", "when": "2016-03-30T11:58:05Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i2om0jwie732m1", "anon": "no", "when": "2016-03-30T11:59:03Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i2olyyl8swl1we", "anon": "no", "when": "2016-03-30T11:59:51Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0b7d04pl3y6c0", "anon": "no", "when": "2016-03-30T12:07:28Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "ikvcvr6di5i7ma", "anon": "no", "when": "2016-03-30T12:07:32Z", "type": "feedback"}, {"to": "ime9jno4sltiw", "uid": "i0f7v0qgfm61s6", "anon": "no", "when": "2016-03-30T12:14:33Z", "type": "feedback"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-03-31T15:32:59Z", "data": "imgfxgnmr9q2v7", "type": "update"}, {"to": "ime9jno4sltiw", "uid": "i0hjdkesg9c5z7", "anon": "no", "when": "2016-05-22T13:34:03Z", "type": "feedback"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "izs3fvllnl33a", "type": "update", "when": "2017-03-02T07:52:48Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2017-03-02T07:52:48Z", "content": "<p></p>\n<div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;试着解释为何要修改或使用它。</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div>备注&#xff1a;&#xff08;1&#xff09;和&#xff08;2&#xff09;涉及编程&#xff0c;可基于lab8_answer来晚餐。</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>\n<div>(0)12.1的第3题<br />2012011366 尚智伟<br /><br />(1)12.2的第4题<br />郑兆衡<br />高思达(2013011413)<br /><br />(2)12.2的第5题<br />钱迪晨 2013011402<br /><br />(3)12.3的第2题<br />李宇轩 2013011349<br />suanrong<br />郭嘉丞<br /><br />(4)12.4的第2题<br />董豪宇<br />张浩天 2013011416<br /><br />(5)12.4的第3题<br />朱新瑞 2013011411<br /><br />选做题目&#xff1a;12.4的第3题<br />高博 2012012139 赵涵 2012011383<br />2013011371 沈哲言<br />王智默 2012011355 高越 2012011379<br />钱迪晨2013011402</div>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2016-03-31T15:32:59Z", "content": "<p></p>\n<div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;试着解释为何要修改或使用它。</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div>备注&#xff1a;&#xff08;1&#xff09;和&#xff08;2&#xff09;涉及编程&#xff0c;可基于lab8_answer来晚餐。</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>\n<div>(0)12.1的第3题<br />2012011366 尚智伟<br /><br />(1)12.2的第4题<br />郑兆衡<br />高思达(2013011413)<br /><br />(2)12.2的第5题<br />钱迪晨 2013011402<br /><br />(3)12.3的第2题<br />李宇轩 2013011349<br />suanrong<br />郭嘉丞<br /><br />(4)12.4的第2题<br />董豪宇<br />张浩天 2013011416<br /><br />(5)12.4的第3题<br />朱新瑞 2013011411<br /><br />选做题目&#xff1a;12.4的第3题<br />高博 2012012139 赵涵 2012011383<br />2013011371 沈哲言<br />王智默 2012011355 高越 2012011379<br />钱迪晨2013011402</div>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2016-03-30T08:10:50Z", "content": "<p></p>\n<div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;试着解释为何要修改或使用它。</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div>备注&#xff1a;&#xff08;1&#xff09;和&#xff08;2&#xff09;涉及编程&#xff0c;可基于lab8_answer来晚餐。</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2016-03-30T05:53:59Z", "content": "<p></p>\n<div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;试着解释为何要修改或使用它。</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div>备注&#xff1a;&#xff08;1&#xff09;和&#xff08;2&#xff09;涉及编程&#xff0c;可基于lab8_answer来晚餐。</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2016-03-30T05:43:32Z", "content": "<p></p>\n<div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;试着解释为何要修改或使用它。</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div>备注&#xff1a;&#xff08;1&#xff09;和&#xff08;2&#xff09;涉及编程&#xff0c;可基于lab8_answer来晚餐。</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2016-03-30T02:59:04Z", "content": "<p></p>\n<div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第十二讲 课堂思考题回答-向勇班", "created": "2016-03-30T02:58:45Z", "content": "<p></p><div>请向勇班的同学把“第十二讲 进程控制”中指定小题的回答结果写在此贴中对应题目后面。</div>\n<div></div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E4%B8%AA%E4%BA%BA%E7%BB%83%E4%B9%A0\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc个人练习</a></div>\n<div> </div>\n<div>第十二讲的回答的截止时间是今天&#xff08;20160330&#xff09;晚20点前。</div>\n<div> </div>\n<div>要求&#xff1a;</div>\n<div>1. 必做题目&#xff1a;每个人只需要完成一个题目。依据自己的学号除6后的余数&#xff0c;完成与余数相同的题目&#xff0c;独立回答。</div>\n<div>2. 选做题目&#xff1a;最多二个人一组&#xff0c;也可以独立回答。时间不够的同学可以不做。</div>\n<div> </div>\n<div>必做题目&#xff1a;</div>\n<div></div>\n<div>(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;</div>\n<div>(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。</div>\n<div>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</div>\n<div>(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;</div>\n<div>(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</div>\n<div>(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</div>\n<div></div>\n<div>选做题目&#xff1a;</div>\n<div></div>\n<div>12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。</div>\n<div><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc%E5%B0%8F%E7%BB%84%E6%80%9D%E8%80%83%E9%A2%98\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</a></div>\n<div></div>\n<div>优胜者&#xff1a;</div>"}], "type": "note", "tags": ["2016", "instructor-note", "lecture12", "课堂问答"], "tag_good": [], "unique_views": 254, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>此处无效&#xff0c;删</p>", "created": "2016-03-30T08:18:43Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "i0zaci5voig5h", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "imekz54x1eh7n3", "updated": "2016-03-30T08:18:43Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>已填在下方</p>", "created": "2016-03-30T08:20:14Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "i242q8ug7vw40x", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "imel13fwz6vef", "updated": "2016-03-30T08:20:14Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>必做题目&#xff1a;<br />(0)12.1的第3题&#xff1a;ucore的进程控制块数据结构是如何组织的&#xff1f;主要字段分别表示什么&#xff1f;有哪些函数对它进行了修改&#xff1f;有哪些函数用到它&#xff1f;试着解释为何要修改或使用它。<br /><br /></p>\n<p>选择“(0)12.1的第3题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:20:29Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011366 尚智伟</p>\n<p><a href=\"https://github.com/shangzw12/ucore_os_lab/blob/master/labcodes/lab4/spoc.md\" target=\"_blank\">https://github.com/shangzw12/ucore_os_lab/blob/master/labcodes/lab4/spoc.md</a></p>", "created": "2016-03-30T08:51:43Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvr0o2bs7m3", "children": [], "tag_good_arr": [], "id": "imem5km4x4z4kt", "updated": "2016-03-30T08:51:43Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>PCB data structure goes as following:</p>\n<p>&#39;&#39;&#39;</p>\n<p>extern list_entry_t proc_list;</p>\n<p>struct proc_struct {<br />    enum proc_state state;                      // Process state<br />    int pid;                                    // Process ID<br />    int runs;                                   // the running times of Proces<br />    uintptr_t kstack;                           // Process kernel stack<br />    volatile bool need_resched;                 // bool value: need to be rescheduled to release CPU?<br />    struct proc_struct *parent;                 // the parent process<br />    struct mm_struct *mm;                       // Process&#39;s memory management field<br />    struct context context;                     // Switch here to run process<br />    struct trapframe *tf;                       // Trap frame for current interrupt<br />    uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)<br />    uint32_t flags;                             // Process flag<br />    char name[PROC_NAME_LEN &#43; 1];               // Process name<br />    list_entry_t list_link;                     // Process link list <br />    list_entry_t hash_link;                     // Process hash list<br />};</p>\n<p>&#39;&#39;&#39;</p>\n<p>There is a global linking list &#34;proc_list&#34; to organize every process. it provides a macro &#34;le2proc(le, member) &#34; to transfer a list node in proc_list to actual PCB.</p>\n<p>Now, we take a look at what PCB actually records. It&#39;s main record including a process&#39;s mark(pid, name), state(state, runs), resources(kstack, mm) and some information for management(parent, list_link, hash_link, need_resched) and switching(context).</p>\n<p>In proc.c, a lot of functions can change the PCB list. And the comments are clear enough to know the intention of such changes.</p>", "created": "2016-03-30T08:55:32Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0brpl1lbyui6", "children": [], "tag_good_arr": [], "id": "imemaha2wzp6xl", "updated": "2016-03-30T08:55:32Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>谢琛睿 2013011406</p>\n<p>state: 进程状态&#xff0c;有未初始化、挂起、可运行、僵尸四种。<br />pid: 进程id runs: 进程运行时间 kstack: 指向该进程内核堆栈的指针 <br />parent: 父进程 mm: 进程的内存情况 context: 保存的通用寄存器<br />tf: 因中断挂起进程的trap frame信息<br />cr3: 保存的页表基址寄存器 <br />flags: 进程的标志位&#xff0c;在代码中用来标识进程是否正在退出。<br />name: 进程名 <br />list_link, hash_link: 为了将所有进程组织成一张链表所使用的项。<br />exit_code: 进程退出返回值&#xff0c;用以传递给父进程。<br />wait_state: 进程的等待状态&#xff0c;有等待子进程、等待内核信号、等待计时器、等待键盘输入等。<br />*cptr, *yptr, *optr: 指向子进程与兄弟进程。<br />rq: 进程所位于的运行队列<br />run_link: 运行队列的位置<br />time_slice: 供给该进程的时间片大小<br />filesp: 跟该进程相关的文件信息</p>\n<p>修改它的函数&#xff1a;<br />proc_struct: 新建一个进程描述符表并进行初始化。<br />set_proc_name: 设置进程名。<br />set_links: 建立进程互相之间的关系。<br />remove_links: 取消进程互相之间的关系。<br />hash_proc / unhash_proc: 将进程添加到哈希表上/在哈希表上删除。<br />setup_kstack / put_kstack: 为进程分配内核堆栈/释放内核堆栈空间。<br />copy_mm / copy_thread: 拷贝进程的内存区域。<br />do_exit: 退出一个进程。<br />do_kill: 杀死一个进程。</p>\n<p><br />用到它的函数&#xff1a;<br />get_proc_name: 获取进程名。<br />get_pid: 为新进程分配一个pid。<br />proc_run: 运行一个进程。<br />find_proc: 根据进程pid在哈希表上找到一个进程。<br />do_wait: 让一个进程等待它的子进程结束。</p>", "created": "2016-03-30T10:06:41Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvr6di5i7ma", "children": [], "tag_good_arr": [], "id": "imeotzeqv691js", "updated": "2016-03-30T10:06:41Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011308 陆喆</p>\n<p><a href=\"https://github.com/lbx6z/os_course_spoc_exercises/blob/master/all/05-2-spoc-ans.md\" target=\"_blank\">https://github.com/lbx6z/os_course_spoc_exercises/blob/master/all/05-2-spoc-ans.md</a></p>", "created": "2016-03-30T10:28:41Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvnzpzq7j7", "children": [], "tag_good_arr": [], "id": "imepm9uw30h57z", "updated": "2016-03-30T10:28:41Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011376龚拓宇</p>\n<p>数据块用多个链表相连<br />位置在kern/process/proc.h中&#xff0c;命名为proc_struct<br />其中的字段为&#xff1a;<br /> enum proc_state state&#xff1a;进程状态<br /> int pid&#xff1a;进程id<br /> int runs&#xff1a;运行时间<br /> uintptr_t kstack&#xff1a;进程运行的栈指针<br /> volatile bool need_resched&#xff1a;是否需要被重新调度<br /> struct proc_struct *parent&#xff1a;父进程块的地址<br /> struct mm_struct *mm&#xff1a;内存管理模块指针<br /> struct context context&#xff1a;各寄存器值<br /> struct trapframe *tf&#xff1a;当前中断的异常帧<br /> uintptr_t cr3&#xff1a;cr3寄存器&#xff0c;页目录表的基地址<br /> uint32_t flags&#xff1a;进程标记<br /> char name[PROC_NAME_LEN &#43; 1]:进程名<br /> list_entry_t list_link&#xff1a;进程链接列表<br /> list_entry_t hash_link&#xff1a;进程散列列表<br /> int exit_code&#xff1a;结束编码&#xff0c;用于返回给父进程<br /> uint32_t wait_state&#xff1a;等待状态<br /> struct proc_struct *cptr, *yptr, *optr&#xff1a;进程间关系指针<br /> struct run_queue *rq&#xff1a;包含该进程的运行队列<br /> list_entry_t run_link&#xff1a;在运行队列中对应的指针<br /> int time_slice&#xff1a;用于占用cpu的时间片<br /> struct files_struct *filesp&#xff1a;相关文件信息 of process<br />对其修改的函数<br />proc.c::char *set_proc_name(struct proc_struct *proc, const char *name)//设置进程名<br />proc.c::void set_links(struct proc_struct *proc)//设置进程的关系指针<br />proc.c::void remove_links(struct proc_struct *proc)//清除关系指针<br />proc.c::int setup_kstack(struct proc_struct *proc)//为进程分配页<br />proc.c::int copy_mm(uint32_t clone_flags, struct proc_struct *proc)//复制或共享当前进程的内存管理<br />proc.c::void copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf)//复制线程<br />sched.c::void sched_class_proc_tick(struct proc_struct *proc)<br />sched.c::void wakeup_proc(struct proc_struct *proc)//唤醒进程</p>\n<p>对其使用的函数<br />proc.c::char *get_proc_name(struct proc_struct *proc)//获取进程名<br />proc.c::void proc_run(struct proc_struct *proc)//使该进程运行<br />proc.c::void hash_proc(struct proc_struct *proc)//将进程加入到hash list中<br />proc.c::void unhash_proc(struct proc_struct *proc)//将进程在hash list中移除<br />proc.c::struct proc_struct *find_proc(int pid)//根据pid找寻进程<br />proc.c::int do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf)<br />sched.c::void sched_class_enqueue(struct proc_struct *proc)<br />sched.c::void sched_class_dequeue(struct proc_struct *proc)<br />sched.c::struct proc_struct *sched_class_pick_next(void)</p>\n<p></p>", "created": "2016-03-30T10:43:30Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0eqqq6jvng408", "children": [], "tag_good_arr": [], "id": "imeq5c6gafo6j0", "updated": "2016-03-30T10:43:30Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>state: 进程状态<br />pid: 进程id <br />runs: 进程运行时间 <br />kstack: 指向该进程内核堆栈的指针 <br />parent: 父进程 <br />mm: 进程的内存情况 <br />context: 寄存器值<br />tf: 中断的异常帧<br />cr3: 保存的页表基址寄存器 <br />flags: 进程的标志位<br />name: 进程名 <br />list_link, hash_link: 进程链接列表<br />exit_code: 进程退出返回值<br />wait_state: 进程的等待状态<br />*cptr, *yptr, *optr: 指向子进程与兄弟进程的指针<br />rq: 进程的运行队列<br />run_link: 运行队列的位置<br />time_slice: 供给该进程的时间片大小<br />filesp: 相关的文件信息<br />修改它的函数&#xff1a;<br />proc_struct: 新建一个进程<br />set_proc_name: 设置进程名<br />set_links: 建立进程互相之间的关系<br />remove_links: 清除关系指针<br />copy_mm / copy_thread: 拷贝进程的内存区域<br />do_exit: 退出<br />do_kill: 杀死<br />用到它的函数&#xff1a;<br />get_proc_name: 获取进程名<br />proc_run: 运行进程<br />hash_proc / unhash_proc: 将进程添加到hash list上/在hash list上删除<br />setup_kstack / put_kstack: 为进程分配内核堆栈/释放内核堆栈空间<br />find_proc: 根据pid找到进程<br />do_wait: 等待它的子进程结束</p>", "created": "2016-03-30T11:37:59Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i28skba6cd976f", "children": [], "tag_good_arr": [], "id": "imes3e5euue2fk", "updated": "2016-03-30T11:37:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "pid: 进程id\nruns: 进程运行时间\nkstack: 指向该进程内核堆栈的指针\nparent: 父进程\nmm: 进程的内存情况\ncontext: 寄存器值\ntf: 中断的异常帧\ncr3: 保存的页表基址寄存器\nflags: 进程的标志位\nname: 进程名\nlist_link, hash_link: 进程链接列表\nexit_code: 进程退出返回值\nwait_state: 进程的等待状态\n*cptr, *yptr, *optr: 指向子进程与兄弟进程的指针\nrq: 进程的运行队列\nrun_link: 运行队列的位置\ntime_slice: 供给该进程的时间片大小\nfilesp: 相关的文件信息\n修改它的函数&#xff1a;\nproc_struct: 新建一个进程\nset_proc_name: 设置进程名\nset_links: 建立进程互相之间的关系\nremove_links: 清除关系指针\ncopy_mm / copy_thread: 拷贝进程的内存区域\ndo_exit: 退出\ndo_kill: 杀死\n用到它的函数&#xff1a;\nget_proc_name: 获取进程名\nproc_run: 运行进程\nhash_proc / unhash_proc: 将进程添加到hash list上/在hash list上删除\nsetup_kstack / put_kstack: 为进程分配内核堆栈/释放内核堆栈空间\nfind_proc: 根据pid找到进程\ndo_wait: 等待它的子进程结束", "created": "2016-03-30T11:59:03Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i2om0jwie732m1", "children": [], "tag_good_arr": [], "id": "imesui2rf6n2fx", "updated": "2016-03-30T11:59:03Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel1ezbp6362w", "updated": "2016-03-30T08:20:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p></p>", "created": "2016-03-30T08:20:35Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "i0f9pvv0uxm6ko", "children": [], "tag_good_arr": [], "no_answer": 1, "id": "imel1jtpjm5rn", "updated": "2016-03-30T08:20:35Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>必做题目&#xff1a;<br />(1)12.2的第4题&#xff1a;请在ucore启动时显示空闲进程&#xff08;idleproc&#xff09;和初始进程&#xff08;initproc&#xff09;的进程标识。<br /><br /></p>\n<p>选择“(1)12.2的第4题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:21:12Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p></p>\n<p><img src=\"/img/749-f3d76d3d3902f71d.jpg\" width=\"999\" height=\"562\" /></p>\n<p></p>\n<p>在kern/process/proc.c  中的proc_init 中可以找到idleproc 和 initproc, 在最后加上:</p>\n<pre>\tcprintf(&#34;idleproc pid: %d, initproc pid: %d\\n&#34;, idleproc-&gt;pid, initproc-&gt;pid);</pre>\n<p>输出结果为0, 1, 可以和函数中assert的结果相互印证。</p>", "created": "2016-03-30T08:21:26Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0dlq4m0wjn5eo", "children": [], "tag_good_arr": [], "id": "imel2mvwa176d2", "updated": "2016-03-30T08:21:26Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在proc_init中的最后一行添加如下代码即可&#xff1a;</p>\n<pre>cprintf(&#34;idleproc %d; initproc %d; \\n&#34;, idleproc-&gt;pid, initproc-&gt;pid);</pre>\n<p>根据之前的assert&#xff0c;空进程的进程标识为0&#xff0c;init进程的标识为1。</p>", "created": "2016-03-30T08:21:47Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0gl5kctugw3xi", "children": [], "tag_good_arr": [], "id": "imel32w6x8kuz", "updated": "2016-03-30T08:21:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在lab4的基础上增加了输出信息&#xff0c;代码见链接</p>\n<p><a href=\"https://github.com/Silver-Shen/OS_LAB/blob/master/labcodes/lab4/kern/init/init.c\" target=\"_blank\">init</a></p>", "created": "2016-03-30T08:26:50Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [], "tag_good_arr": [], "id": "imel9l0g49v2lw", "updated": "2016-03-30T08:26:50Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>贺子松2013011296</p>\n<p>在kern/process/proc.c文件中的proc_init()函数结尾加上</p>\n<p>cprintf(&#34;idleproc : %d, initproc :%d\\n&#34;, idleproc-&gt;pid, initproc-&gt;pid);</p>", "created": "2016-03-30T08:28:21Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i3qk2vs65x276j", "children": [], "tag_good_arr": [], "id": "imelbj99gz2376", "updated": "2016-03-30T08:28:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p><a href=\"https://github.com/Yangxc13/v9-cpu/tree/master/05-2-spoc-discussion\">https://github.com/Yangxc13/v9-cpu/tree/master/05-2-spoc-discussion</a></p>", "created": "2016-03-30T08:30:21Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0b7d04pl3y6c0", "children": [], "tag_good_arr": [], "id": "imele3xfbdl55e", "updated": "2016-03-30T08:30:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在 init.c 的kern_init函数下增加&#xff1a;</p>\n<p>cprintf(&#34;%d %d&#34;, idleproc-&gt;pid, initproc-&gt;pid);</p>\n<p></p>", "created": "2016-03-30T08:31:07Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikwht0mda9v4iu", "children": [], "tag_good_arr": [], "id": "imelf39ams942f", "updated": "2016-03-30T08:31:07Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>马志明 2013011395</p>\n<p>在proc.c中init_proc函数最后加上</p>\n<pre>cprintf(&#34;idleproc %d, initproc %d\\n&#34;, idleproc-&gt;pid, initproc-&gt;pid);</pre>\n<p></p>", "created": "2016-03-30T08:39:20Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i21zpwab2z775p", "children": [], "tag_good_arr": [], "id": "imelpnw1pix2v6", "updated": "2016-03-30T08:39:20Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>krajna 2014010527</p>\n<p>在lab4_result/kern/init/init.c中添加</p>\n<p>cprintf(&#34;idleproc-&gt;%d,initproc-&gt;%d\\n&#34;,idleproc-&gt;pid,initproc-&gt;pid);<br /> cprintf(&#34;idleproc cr3:%u,initproc cr3:%u\\n&#34;,idleproc-&gt;cr3,initproc-&gt;cr3);</p>\n<p></p>\n<p>qemu输出</p>\n<p>idleproc-&gt;0,initproc-&gt;1 </p>\n<p>idleproc cr3:2408448,initproc cr3:2408448  //表明是两个线程</p>\n<p></p>", "created": "2016-03-30T08:41:34Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikx8y1dzPrM", "children": [], "tag_good_arr": [], "id": "imelsimmvjd7x", "updated": "2016-03-30T08:41:34Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p><p>李云龙2013080071</p>\n<p>/kern/init/init.c 中 添加两行&#xff1a;</p>\n<p>cprintf(&#34;idleproc = %d\\n&#34;, idleproc-&gt;pid);</p>\n<p>cprintf(&#34;initproc = %d\\n&#34;, initproc-&gt;pid);</p>\n<p>输出结果分别为0&#xff0c;1</p>\n<p></p>", "created": "2016-03-30T08:57:00Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i1jd60b7orl10p", "children": [], "tag_good_arr": [], "id": "imemcdbufbk1fx", "updated": "2016-03-30T08:57:00Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>俞寒轩 2012011333</p>\n<p>在proc.c中的proc_init(void)末尾添加</p>\n<p>cprintf(&#34;---------- PROC ID ----------\\n&#34;);<br /> cprintf(&#34;idleproc id: %d\\n&#34;, idleproc-&gt;pid);<br /> cprintf(&#34;initproc id: %d\\n&#34;, initproc-&gt;pid);<br /> cprintf(&#34;-----------------------------\\n&#34;);</p>\n<p></p>\n<p>输出&#xff1a;</p>\n<p>---------- PROC ID ----------</p>\n<p>idleproc id: 0</p>\n<p>initproc id: 1</p>\n<p>-----------------------------</p>", "created": "2016-03-30T09:18:48Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvqz0jx17m1", "children": [], "tag_good_arr": [], "id": "imen4epse11gv", "updated": "2016-03-30T09:18:48Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011321</p>\n<p>在/kern/init/init.c 中kern_init函数添加两行&#xff1a;</p>\n<pre>cprintf(&#34;idleproc = %d\\n&#34;, idleproc-&gt;pid);\ncprintf(&#34;initproc = %d\\n&#34;, initproc-&gt;pid);</pre>\n<p>输出结果分别为0&#xff0c;1</p>\n<p></p>", "created": "2016-03-30T10:59:49Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i6vir34gLfK", "children": [], "tag_good_arr": [], "id": "imeqqbt68g16a", "updated": "2016-03-30T10:59:49Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>周恩泽 2012012617</p>\n<p>在kern_init函数中加上一句</p>\n<p>cprintf(&#34;idleProcID: %d  initProcID: %d\\n&#34;, idleproc-&gt;pid, initproc-&gt;pid);</p>\n<p>即可。结果是0和1。</p>", "created": "2016-03-30T11:44:45Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvp62fcm7ka", "children": [], "tag_good_arr": [], "id": "imesc42egmleg", "updated": "2016-03-30T11:44:45Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel2bwaize6aw", "updated": "2016-03-30T08:21:12Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>必做题目&#xff1a;<br />(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;</p>\n<p></p>\n<p>选择“(2)12.2的第5题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:21:56Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>钱迪晨 2013011402</p>\n<p>两个的cr3物理地址都是0x03055616=boot_cr3。<br />原因很简单&#xff0c;因为initproc是从idleproc&#xff0c;folk的来的。<br />在ucore里面的proc.c中可以看到&#xff0c;初始化的</p>\n<pre>static struct proc_struct * alloc_proc(void) {}</pre>\n<p>中将cr3设置为boot_cr3。</p>\n<p>如果是从kernel threadcopy来的&#xff0c;页表直接使用全局的boot_cr3&#xff08;copy_mm函数直接返回了&#xff0c;所以也就是boor_cr3&#xff09;。</p>\n<p></p>\n<pre>copy_mm(uint32_t clone_flags, struct proc_struct *proc) {\n\tstruct mm_struct *mm, *oldmm = current-&gt;mm;\n/* current is a kernel thread */\n\tif (oldmm == NULL) {\n\treturn 0;\n}</pre>\n<p></p>\n<p>下面是boot_cr3的数据。</p>\n<p>-------------------- BEGIN --------------------<br />PDE(0e0) c0000000-f8000000 38000000 urw<br /> |-- PTE(38000) c0000000-f8000000 38000000 -rw<br />PDE(001) fac00000-fb000000 00400000 -rw<br /> |-- PTE(000e0) faf00000-fafe0000 000e0000 urw<br /> |-- PTE(00001) fafeb000-fafec000 00001000 -rw</p>", "created": "2016-03-30T08:25:39Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0nuu5yhgno5tv", "children": [], "tag_good_arr": [], "id": "imel8271lgl280", "updated": "2016-03-30T08:25:39Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>(2)12.2的第5题&#xff1a;请在ucore启动时显示空闲线程&#xff08;idleproc&#xff09;和初始进程(initproc)的进程控制块&#xff08;proc_struct&#xff09;中的“pde_t *pgdir”的内容。它们是否一致&#xff1f;为什么&#xff1f;<br /><br />應該一致的。(&#34;lab8_result\\kern\\process\\proc.c&#34;) proc_init()創建了兩個內核線程idle和init_main&#xff0c;這個函數裏先寫好了idle的內容&#xff0c;</p>\n<pre>// proc_init - set up the first kernel thread idleproc &#34;idle&#34; by itself and \n//           - create the second kernel thread init_main\nvoid proc_init(void) {\n    int i;\n\n    list_init(&amp;proc_list);\n    for (i = 0; i &lt; HASH_LIST_SIZE; i &#43;&#43;) {\n        list_init(hash_list &#43; i);\n    }\n\n    if ((idleproc = alloc_proc()) == NULL) {\n        panic(&#34;cannot alloc idleproc.\\n&#34;);\n    }\n\n    idleproc-&gt;pid = 0;\n    idleproc-&gt;state = PROC_RUNNABLE;\n    idleproc-&gt;kstack = (uintptr_t)bootstack;\n    idleproc-&gt;need_resched = 1;\n    \n    if ((idleproc-&gt;filesp = files_create()) == NULL) {\n        panic(&#34;create filesp (idleproc) failed.\\n&#34;);\n    }\n    files_count_inc(idleproc-&gt;filesp);\n    \n    set_proc_name(idleproc, &#34;idle&#34;);\n    nr_process &#43;&#43;\n...\n}</pre>\n<p>然後設當前的進程爲idleproc&#xff0c;</p>\n<pre>current = idleproc;</pre>\n<p>再調用kernel_thread(init_main,NULL,0)&#xff0c;</p>\n<pre>int pid = kernel_thread(init_main, NULL, 0);</pre>\n<p>這裏面再調用do_fork函數&#xff0c;</p>\n<pre>int kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {\n...\n    return do_fork(clone_flags | CLONE_VM, 0, &amp;tf);\n}</pre>\n<p>因爲clone_flags的設定&#xff0c;用copy_mm設定mm_struct時&#xff0c;沒有再複製一份&#xff0c;而是與idle共享了&#xff0c;</p>\n<pre>int do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {\n...\n    if (copy_mm(clone_flags, proc) != 0) {\n        goto bad_fork_cleanup_kstack;\n    }\n...\n}</pre>\n<p> </p>\n<pre>// copy_mm - process &#34;proc&#34; duplicate OR share process &#34;current&#34;&#39;s mm according clone_flags<br />//         - if clone_flags &amp; CLONE_VM, then &#34;share&#34; ; else &#34;duplicate&#34;<br />static int copy_mm(uint32_t clone_flags, struct proc_struct *proc) {<br />...<br />    if (clone_flags &amp; CLONE_VM) {<br />        mm = oldmm;<br />        goto good_mm;<br />    }<br />...<br />good_mm:<br />    mm_count_inc(mm);<br />    proc-&gt;mm = mm;<br />    proc-&gt;cr3 = PADDR(mm-&gt;pgdir);<br />    return 0;<br />...<br />}</pre>\n<p>mm_struct裏的pde_t*pgdir因此也是一樣的。<br />(&#34;lab8_result\\kern\\mm\\vmm.h&#34;)</p>\n<pre>struct mm_struct {\n...\n    pde_t *pgdir;                  // the PDT of these vma\n...\n};</pre>\n<p><br /><br /><br /><br /></p>", "created": "2016-03-30T10:24:12Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "il7aslzdYQT", "children": [], "tag_good_arr": [], "id": "imepgihfirv3a", "updated": "2016-03-30T10:24:12Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel39sl2zl6ia", "updated": "2016-03-30T08:21:56Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>必做题目&#xff1a;<br />(3)12.3的第2题&#xff1a;第一个用户进程执行的代码在哪里&#xff1f;它是什么时候加载到内存中的&#xff1f;<br /><br /></p>\n<p>选择“(3)12.3的第2题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:22:24Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>李宇轩 2013011349</p>\n<p>(3)</p>\n<p></p>\n<p>第一个用户进程执行的代码&#xff1a;<br />    真正的用户代码在/user中&#xff0c;这个目录下放着ucore所有的用户态代码。它会和内核一起被放入硬盘中。<br />    加载用户代码的进程代码在/kern/process/proc.c:user_main中&#xff0c;这是内核中的2号进程&#xff0c;由init_main创建</p>\n<p></p>\n<p></p>\n<p>加载到内存的时候&#xff1a;<br />    对于lab5~lab7&#xff0c;由于这时候还没有文件系统&#xff0c;将会把代码直接放着内核的最后&#xff0c;在加载内核的时候一起放到内存中&#xff0c;这是这段代码进入内存的时候。在proc.c:load_icode仅仅引用这个地址进行可执行文件的解读&#xff0c;并真正将其加载到进程中。<br />    对于lab8&#xff0c;在proc.c:do_exec调用的load_icode的时候&#xff0c;通过文件系统直接加载到进程中。</p>", "created": "2016-03-30T08:22:59Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0f9pvv0uxm6ko", "children": [], "tag_good_arr": [], "id": "imel4mxiljk6pw", "updated": "2016-03-30T08:22:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>第一个用户程序在user文件夹中&#xff0c;在编译的时候&#xff0c;机器码被放在kernel的末尾&#xff08;后来有了文件系统后&#xff0c;就不知道了&#xff09;&#xff0c;是被内核的第2个内核线程initproc创建的。</p>", "created": "2016-03-30T08:32:58Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0c9nvk0xzc2n3", "children": [], "tag_good_arr": [], "id": "imelhgyijme78t", "updated": "2016-03-30T08:32:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>王启圣 2013011409</p>\n<p>第一个用户进程执行的代码在 /user/ 中。</p>\n<p>他被放在内核的末尾&#xff0c;在加载内核时加载到内存中。</p>", "created": "2016-03-30T08:59:12Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0nu5by9l7v7of", "children": [], "tag_good_arr": [], "id": "imemf7dk7kpgl", "updated": "2016-03-30T08:59:12Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>第一个用户进程执行的代码在user文件夹里&#xff0c;由user_main加载&#xff0c;而user_main是由init_main&#xff08;第二个内核线程&#xff09;创建的。</p>\n<p>没有文件系统时&#xff0c;代码会放在内核最后&#xff0c;加载内核时一起加载</p>", "created": "2016-03-30T09:01:51Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i1bzj2xilgm4uk", "children": [], "tag_good_arr": [], "id": "imemimbw4q9tg", "updated": "2016-03-30T09:01:51Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>高博 2012012139</p>\n<p></p>\n<p><a href=\"https://github.com/gaobo1993/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#123-进程加载\" target=\"_blank\">https://github.com/gaobo1993/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#123-进程加载</a></p>", "created": "2016-03-30T09:04:08Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ic226rac4j5jw", "children": [], "tag_good_arr": [], "id": "imemljpyq931oc", "updated": "2016-03-30T09:04:08Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>何轩 2013011307</p>\n<p>第一个用户进程执行的代码实际位置在/user中</p>\n<p>代码被放在内核末尾&#xff0c;随内核一起加载。有文件系统时则由文件系统加载。</p>", "created": "2016-03-30T09:39:46Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0evrfcnckf5dt", "children": [], "tag_good_arr": [], "id": "imenvd8e4b66yq", "updated": "2016-03-30T09:39:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>程凯 2013011303 </p>\n<p>张明钊 2013012213</p>\n<p>第一个用户进程执行的代码在user文件夹里&#xff0c;由user_main在加载内核时加载。</p>\n<p>若有文件系统&#xff0c;则由文件系统加载。</p>", "created": "2016-03-30T10:52:55Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i1569mw0xp954u", "children": [], "tag_good_arr": [], "id": "imeqhfql8g1de", "updated": "2016-03-30T10:52:55Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012080059 金嘉宇</p>\n<p>在/kern/process/proc.c:user_main中。在init_main创建第二个内核线程的时候由user_main加载。</p>", "created": "2016-03-30T11:01:16Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i6ub5at2geM", "children": [], "tag_good_arr": [], "id": "imeqs6ua858mm", "updated": "2016-03-30T11:01:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在没有文件系统的情况下, </p>\n<p>Makefile中有这么一行:</p>\n<p>$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $&#64; $(KOBJS) -b binary $(USER_BINS)</p>\n<p>也就是将这个elf直接放在内核的后面加载到内存中, 然后用user_main加载</p>\n<p>否则用文件系统加载shell elf程序</p>\n<p>2013011509</p>", "created": "2016-03-30T11:04:12Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ie7xy71bn7b1s2", "children": [], "tag_good_arr": [], "id": "imeqvyo2k4x1i4", "updated": "2016-03-30T11:04:12Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "2012011287 徐圣韬\n\n第一个用户进程执行的代码在user文件夹中\n是在加载内核时由user_main加载的", "created": "2016-03-30T11:10:54Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i28t9sj8bas79c", "children": [], "tag_good_arr": [], "id": "imer4kmmzgqtv", "updated": "2016-03-30T11:10:54Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2014011381 梁泽宇</p>\n<p></p>\n<p>第一个用户进程执行的代码在/user中。</p>\n<p></p>\n<p>在/kern/process/proc.c: init_main()中的</p>\n<pre>int pid = kernel_thread(user_main, NULL, 0);</pre>\n<p>通过调用user_main()创建第一个用户进程&#xff0c;并加载代码。</p>\n<p>该过程在加载内核时进行。</p>\n<p></p>\n<p></p>", "created": "2016-03-30T11:41:47Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ie7xy3iwuug1os", "children": [], "tag_good_arr": [], "id": "imes8anf4iw3l4", "updated": "2016-03-30T11:41:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>在/user中&#xff0c;通过kern/process中的proc.c下的kernel_thread(user_main,NULL,0)语句执行&#xff1b;</p>\n<p>加载到内存是在加载内核时进行的。</p>", "created": "2016-03-30T11:57:02Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0ccqbaxwdz75c", "children": [], "tag_good_arr": [], "id": "imesrw9mt7t52o", "updated": "2016-03-30T11:57:02Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>第一个用户进程执行的代码在user文件夹中&#xff1b;</p>\n<p>是在加载内核时由user_main加载的。</p>\n<p></p>", "created": "2016-03-30T11:59:51Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i2olyyl8swl1we", "children": [], "tag_good_arr": [], "id": "imesvinsh9v5z2", "updated": "2016-03-30T11:59:51Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>王苏 2013011301</p>\n<p>王哲 2013012443</p>\n<p></p>\n<p><a href=\"https://github.com/wangsu13/OS/blob/master/12.md\" target=\"_blank\">report</a></p>", "created": "2016-05-22T13:34:03Z", "bucket_order": 200, "bucket_name": "Week 5/22 - 5/28", "type": "feedback", "tag_good": [], "uid": "i0hjdkesg9c5z7", "children": [], "tag_good_arr": [], "id": "ioimktbgd9b3w1", "updated": "2016-05-22T13:34:03Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel3vzqexq6oj", "updated": "2016-03-30T08:22:24Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>必做题目&#xff1a;<br />(4)12.4的第2题&#xff1a;试分析ucore操作系统内核是如何把子进程exit()的返回值传递给父进程wait()的&#xff1f;</p>\n<p></p>\n<p>选择“(4)12.4的第2题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:22:50Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2013011356</p>\n<p>exit和wait两个函数最后都会分别调用do_exit和do_wait(用户态调用的话会使用系统调用).</p>\n<p>在do_exit函数当中, 有</p>\n<p>current-&gt;state = PROC_ZOMBIE;</p>\n<p>current-&gt;exit_code = error_code;</p>\n<p>之后会尝试唤醒他的父进程, 如果父进程处于等待状态的话, 就唤起父进程, 如果父进程处于僵尸状态, 那么就唤起initproc.</p>\n<p></p>\n<p>在do_wait函数当中, 在找到已经处于僵尸状态的子进程后, 有</p>\n<p>if (code_store != NULL) {</p>\n<p>*code_store = proc-&gt;exit_code;</p>\n<p>}</p>\n<p>而code_store是do_wait的一个参数(do_wait(int pid, int *code_store)), 通过过code_store就可以得到error_code了</p>", "created": "2016-03-30T08:23:27Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i242q8ug7vw40x", "children": [], "tag_good_arr": [], "id": "imel582ol9p71r", "updated": "2016-03-30T08:23:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>张浩天 2013011416</p>\n<p></p>\n<p>子进程调用do_exit(int error_code) 函数 ( kern/process/proc.c/line449)</p>\n<p></p>\n<p>设置子进程的error_code&#xff0c;以及子进程的状态</p>\n<p>current-&gt;state = PROC_ZOMBIE;<br />current-&gt;exit_code = error_code;</p>\n<p></p>\n<p>父进程调用do_wait(int pid, int *code_store) 函数&#xff08;kern/process/proc.c/line698&#xff09;</p>\n<p></p>\n<p>repeat:</p>\n<p> if (pid != 0) {<br />        proc = find_proc(pid);</p>\n<p>找到退出的子进程PCB</p>\n<p></p>\n<p>found:<br />    if (proc == idleproc || proc == initproc) {<br />        panic(&#34;wait idleproc or initproc.\\n&#34;);<br />    }<br />    if (code_store != NULL) {<br />        *code_store = proc-&gt;exit_code;<br />    }</p>\n<p></p>\n<p>把子进程的error_code存回父进程的返回值</p>", "created": "2016-03-30T08:24:18Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0yuo4o74sx70w", "children": [], "tag_good_arr": [], "id": "imel6biktv8332", "updated": "2016-03-30T08:24:18Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>朱俸民 2012011894</p>\n<p></p>\n<p>在kern/process/proc.c&#xff0c;</p>\n<p></p>\n<p>子进程通过do_exit&#xff0c;其声明为</p>\n<pre>int do_exit(int error_code);</pre>\n<p>来退出&#xff0c;并设置其exit_code</p>\n<p></p>\n<pre>current-&gt;state = PROC_ZOMBIE;\ncurrent-&gt;exit_code = error_code;</pre>\n<p>父进程通过do_wait&#xff0c;其声明为</p>\n<pre>int do_wait(int pid, int *code_store)</pre>\n<p>当found要wait的进程&#xff08;处于PROC_ZOMBIE状态&#xff09;后&#xff0c;</p>\n<p></p>\n<pre>found:\n if (proc == idleproc || proc == initproc) {\n     panic(&#34;wait idleproc or initproc.\\n&#34;);\n }\n if (code_store != NULL) {<br />     *code_store = proc-&gt;exit_code;\n }</pre>\n<p>设置code_store为子进程的exit_code。</p>\n<p></p>", "created": "2016-03-30T08:25:24Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0c1nsm3911wc", "children": [], "tag_good_arr": [], "id": "imel7qe9hro252", "updated": "2016-03-30T08:25:24Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>在do_exit函数当中, 设置</p>\n<p>current-&gt;state = PROC_ZOMBIE;</p>\n<p>current-&gt;exit_code = error_code;</p>\n<p></p>\n<p>通过do_wait的</p>\n<p> *code_store = proc-&gt;exit_code;</p>\n<p>设置得到</p>", "created": "2016-03-30T08:42:27Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i11v1az5sf83l2", "children": [], "tag_good_arr": [], "id": "imeltnrh7wc3r2", "updated": "2016-03-30T08:42:27Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>叶子鹏 2013011404</p>\n<p></p>\n<p>用户态使用系统调用来调用exit和wait&#xff0c;定义在libs/unistd.h中</p>\n<pre>#define SYS_exit            1\n#define SYS_wait            3</pre>\n<p>系统调用exit会执行do_exit&#xff0c;wait会执行do_wait</p>\n<pre>static int\nsys_wait(uint32_t arg[]) {\n    int pid = (int)arg[0];\n    int *store = (int *)arg[1];\n    return do_wait(pid, store);\n}\n\nstatic int\nsys_exit(uint32_t arg[]) {\n    int error_code = (int)arg[0];\n    return do_exit(error_code);\n}</pre>\n<p></p>\n<p>内核态的exit定义在kern/process/proc.c中&#xff1a;</p>\n<pre>int do_exit(int error_code);</pre>\n<p>可见exit的参数是error_code&#xff0c;之后修改current&#xff08;正在进行的进程的控制块&#xff09;</p>\n<pre>current-&gt;state = PROC_ZOMBIE;\ncurrent-&gt;exit_code = error_code;</pre>\n<p>这样&#xff0c;error_code通过current传给父进程&#xff1a;</p>\n<p>在这之前&#xff0c;父进程会不断进行判断&#xff0c;等待子进程的状态变化&#xff1a;</p>\n<pre>//kern/process/proc.c 的 do_wait 的 found 标签下&#xff1a;\nif (code_store != NULL) {\n        *code_store = proc-&gt;exit_code;\n    }</pre>\n<p>其中&#xff0c;code_store也是系统调用的参数</p>\n<pre>int\ndo_wait(int pid, int *code_store)</pre>\n<p>这样&#xff0c;通过2个系统调用&#xff0c;exit的参数传给了wait的参数</p>", "created": "2016-03-30T08:42:31Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0f24oie8102cr", "children": [], "tag_good_arr": [], "id": "imeltr3xnpi1zk", "updated": "2016-03-30T08:42:31Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>温家尊 2013080074</p>\n<p></p>\n<p>kern/process/proc.c :</p>\n<p>do_exit 负责子进 :</p>\n<pre>current-&gt;state = PROC_ZOMBIE;<br />current-&gt;exit_code = error_code;</pre>\n<p>do_wait 负责父进程 :</p>\n<pre>1) 等待 PROC_ZOMBIE 状态的子进程<br />2) if (code_store != NULL) {<br />        *code_store = proc-&gt;exit_code;<br />    }</pre>\n<p></p>", "created": "2016-03-30T08:47:15Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0boovu8sh63xb", "children": [], "tag_good_arr": [], "id": "imelzueu9y634h", "updated": "2016-03-30T08:47:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>赖国堃2012011372 徐捷2012011371</p>\n<p></p>\n<p>相关函数在kern/process/proc.c 当中<br />子进程是通过do_exit()函数设置返回值&#xff0c;具体的相关代码为&#xff1a;</p>\n<p></p>\n<pre> current-&gt;state = PROC_ZOMBIE;\n current-&gt;exit_code = error_code;\n\n</pre>\n<p>然后跳到父进程的do_wait()函数&#xff0c;可以看到处理代码为&#xff1a;</p>\n<pre> if (proc-&gt;state == PROC_ZOMBIE) {\n goto found;\n\n if (proc == idleproc || proc == initproc) {\n panic(&#34;wait idleproc or initproc.\\n&#34;);\n }\n if (code_store != NULL) {\n *code_store = proc-&gt;exit_code;\n }\n\n</pre>\n<p>这样父进程得到子进程的exit代码。</p>", "created": "2016-03-30T08:53:05Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i6uiksj895B", "children": [], "tag_good_arr": [], "id": "imem7c77zp870b", "updated": "2016-03-30T08:53:05Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>进程exit的时候&#xff0c;会在用户态调用系统调用sys_exit&#xff0c;将exit的过程交由内核态的do_exit函数来处理。其中进程的返回值作为调用系统调用的参数error_code存在&#xff0c;并被传入到do_exit函数中。</p>\n<p></p>\n<p>参考kern\\process\\proc.c可以看到&#xff0c;int do_exit(int error_code)中将current进程的exit_code设置成了error_code参数的值&#xff1a;</p>\n<pre>current-&gt;state = PROC_ZOMBIE;<br />current-&gt;exit_code = error_code;</pre>\n<p></p>\n<p>随后在wait的处理函数on_wait中&#xff0c;系统需要对处于PROC_ZOMBIE状态的进程进行资源的回收工作。</p>\n<p>看到proc.c中的on_wait函数在找到PROC_ZOMBIE状态的进程的时候 &#xff0c;就会将进程的exit_code保存到code_store中了。</p>\n<p></p>\n<pre>if (proc-&gt;state == PROC_ZOMBIE) {<br />    goto found;<br />}<br />// ...<br />found:\n    if (proc == idleproc || proc == initproc) {\n        panic(&#34;wait idleproc or initproc.\\n&#34;);\n    }\n    if (code_store != NULL) {\n        *code_store = proc-&gt;exit_code;\n    }</pre>", "created": "2016-03-30T08:53:44Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "iem550jbpyn515", "children": [], "tag_good_arr": [], "id": "imem864w70l54b", "updated": "2016-03-30T08:53:44Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011324</p>\n<p>简单来说&#xff0c;子进程退出时&#xff0c;并不会立刻被清理。而是进入僵尸态&#xff0c;并且把返回值存在进程控制块里面。</p>\n<p></p>\n<p>当该子进程的父进程被调度执行的时候&#xff0c;该父进程如果执行到wait函数&#xff0c;就会对于他所派生出的子进程进行处理。如果子进程是僵尸态&#xff0c;就会回收子进程的资源&#xff0c;并且获得返回值。</p>", "created": "2016-03-30T08:58:59Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0gkdbms5ie20o", "children": [], "tag_good_arr": [], "id": "imemexisdgqe6", "updated": "2016-03-30T08:58:59Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>子进程执行exit&#xff0c;检查父进程是否存活&#xff0c;如果存活&#xff0c;子进程进入僵尸状态&#xff0c;保留结果的值直到父进程需要它。</p>\n<p></p>\n<p>    子进程中对应的处理</p>\n<p>    current-&gt;state = PROC_ZOMBIE;<br />    current-&gt;exit_code = error_code;</p>\n<p></p>\n<p>    父进程中对应的处理</p>\n<p>    if (proc == idleproc || proc == initproc) {<br />        panic(&#34;wait idleproc or initproc.\\n&#34;);<br />    }<br />    if (code_store != NULL) {<br />        *code_store = proc-&gt;exit_code;<br />    }</p>", "created": "2016-03-30T09:32:40Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvo2cckb7jb", "children": [], "tag_good_arr": [], "id": "imenm8iolzb7j3", "updated": "2016-03-30T09:32:40Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011308</p>\n<p>子进程通过do_exit函数来设置exit_code&#xff1a;</p>\n<pre>current-&gt;state = PROC_ZOMBIE;<br />current-&gt;exit_code = error_code;</pre>\n<p>父进程通过do_wait来处理&#xff1a;</p>\n<pre>if (proc-&gt;state == PROC_ZOMBIE) {\n    goto found;\n}\nfound:\n    if (proc == idleproc || proc == initproc) {\n        panic(&#34;wait idleproc or initproc.\\n&#34;);\n    }\n    if (code_store != NULL) {\n        *code_store = proc-&gt;exit_code;\n    }</pre>", "created": "2016-03-30T10:28:44Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvonk6wj7k1", "children": [], "tag_good_arr": [], "id": "imepmcraez1224", "updated": "2016-03-30T10:28:44Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel4ffxqcz6tk", "updated": "2016-03-30T08:22:50Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>必做题目&#xff1a;<br />(5)12.4的第3题&#xff1a;试分析sleep()系统调用的实现。在什么地方设置的定时器&#xff1f;它对应的等待队列是哪个&#xff1f;它的唤醒操作在什么地方&#xff1f;</p>\n<p></p>\n<p>选择“(5)12.4的第3题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:23:22Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>朱新瑞 2013011411 第5题</p>\n<p><a href=\"https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC12-Milesian.md\" target=\"_blank\">https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC12-Milesian.md</a></p>\n<p></p>", "created": "2016-03-30T08:23:29Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0zaci5voig5h", "children": [], "tag_good_arr": [], "id": "imel59p3g7v72l", "updated": "2016-03-30T08:23:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p><a href=\"https://github.com/cathayandy/os_2016/blob/master/spoc20160330/spoc.md\">https://github.com/cathayandy/os_2016/blob/master/spoc20160330/spoc.md</a></p>\n<p></p>\n<p>2012011355 王智默</p>\n<p>2012011379 高越</p>\n<p></p>", "created": "2016-03-30T08:43:41Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i6w84pnmjCQ", "children": [], "tag_good_arr": [], "id": "imelv8pa52j4am", "updated": "2016-03-30T08:43:41Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011297 杨青霖</p>\n<p>定时器&#xff1a;</p>\n<pre>int\ndo_sleep(unsigned int time) {\n    if (time == 0) {\n        return 0;\n    }\n    bool intr_flag;\n    local_intr_save(intr_flag);\n    timer_t __timer, *timer = timer_init(&amp;__timer, current, time);\n    current-&gt;state = PROC_SLEEPING;\n    current-&gt;wait_state = WT_TIMER;\n    add_timer(timer);\n    local_intr_restore(intr_flag);\n\n    schedule();\n\n    del_timer(timer);\n    return 0;\n}</pre>\n<p>其中timer_init初始化定时器&#xff0c;add_timer设置定时器</p>\n<p>等待队列&#xff1a;</p>\n<pre>timer_list</pre>\n<p>唤醒操作&#xff1a;</p>\n<pre>void\nrun_timer_list(void) {\n    bool intr_flag;\n    local_intr_save(intr_flag);\n    {\n        list_entry_t *le = list_next(&amp;timer_list);\n        if (le != &amp;timer_list) {\n            timer_t *timer = le2timer(le, timer_link);\n            assert(timer-&gt;expires != 0);\n            timer-&gt;expires --;\n            while (timer-&gt;expires == 0) {\n                le = list_next(le);\n                struct proc_struct *proc = timer-&gt;proc;\n                if (proc-&gt;wait_state != 0) {\n                    assert(proc-&gt;wait_state &amp; WT_INTERRUPTED);\n                }\n                else {\n                    warn(&#34;process %d&#39;s wait_state == 0.\\n&#34;, proc-&gt;pid);\n                }\n                wakeup_proc(proc);\n                del_timer(timer);\n                if (le == &amp;timer_list) {\n                    break;\n                }\n                timer = le2timer(le, timer_link);\n            }\n        }\n        sched_class_proc_tick(current);\n    }\n    local_intr_restore(intr_flag);\n}</pre>\n<p>wakeup_proc为唤醒操作</p>", "created": "2016-03-30T11:32:42Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i18riqkwrl225m", "children": [], "tag_good_arr": [], "id": "imerwlsyi6wyg", "updated": "2016-03-30T11:32:42Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>曹科垒 2013011345</p>\n<p>https://github.com/rprp2012/os-hw/blob/master/class12-hw.md</p>", "created": "2016-03-30T11:58:05Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0cb1385ni65l", "children": [], "tag_good_arr": [], "id": "imest8mb3r310u", "updated": "2016-03-30T11:58:05Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p><a href=\"https://github.com/dpatrickx/course-os-spoc-discussion/blob/master/05-2spoc/05-2spoc.md\" target=\"_blank\">05-2spoc.md</a></p>", "created": "2016-03-30T12:14:33Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0f7v0qgfm61s6", "children": [], "tag_good_arr": [], "id": "imetef0z21b7r", "updated": "2016-03-30T12:14:33Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel54if8w870p", "updated": "2016-03-30T08:23:22Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>选做题目&#xff1a;<br />12.4的第3题&#xff1a;设计一个简化的进程管理子系统&#xff0c;可以管理并调度简化进程。<br />https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/05-2-spoc-discussion.md#spoc小组思考题</p>\n<p></p>\n<p>选择“12.4的第3题”的同学的回答结果写在此贴后面。</p>", "created": "2016-03-30T08:24:04Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>高博 2012012139</p>\n<p>赵涵 2012011383</p>\n<p></p>\n<p><a href=\"https://github.com/gaobo1993/os_course_spoc_exercises/blob/master/all/process.py\" target=\"_blank\">process</a></p>\n<p></p>", "created": "2016-03-30T09:01:15Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ic226rac4j5jw", "children": [], "tag_good_arr": [], "id": "imemhumqnfjly", "updated": "2016-03-30T09:01:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011371 沈哲言</p>\n<p><a href=\"https://github.com/Silver-Shen/OS_SPOC/blob/master/Process_cpuio/process-cpuio-homework.py\" target=\"_blank\">code</a></p>", "created": "2016-03-30T09:19:45Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0ayxqk6wry734", "children": [], "tag_good_arr": [], "id": "imen5muqzhg17q", "updated": "2016-03-30T09:19:45Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>代码&#xff1a;</p>\n<p><a href=\"http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab5/process-cpuio-homework.py\">http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab5/process-cpuio-homework.py</a></p>\n<p></p>\n<p>报告&#xff1a;</p>\n<p><a href=\"http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab5/process-cpuio-homework-report.md\">http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab5/process-cpuio-homework-report.md</a></p>\n<p></p>\n<p>王智默 2012011355</p>\n<p>高越 2012011379</p>", "created": "2016-03-30T09:27:03Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i6w84pnmjCQ", "children": [], "tag_good_arr": [], "id": "imenf0i8yl61pz", "updated": "2016-03-30T09:27:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>钱迪晨2013011402</p>\n<p><a href=\"https://github.com/nathenqian/ucore_spoc/blob/master/spoc_12/a.py\" target=\"_blank\">代码</a></p>\n<p><a href=\"https://github.com/nathenqian/ucore_spoc/blob/master/spoc_12/command.sh\" target=\"_blank\">指令</a></p>\n<p><a href=\"https://github.com/nathenqian/ucore_spoc/blob/master/spoc_12/result\" target=\"_blank\">结果</a></p>\n<p></p>", "created": "2016-03-30T09:39:58Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0nuu5yhgno5tv", "children": [], "tag_good_arr": [], "id": "imenvmn47611z1", "updated": "2016-03-30T09:39:58Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011355徐涵</p>\n<p>2013011339白家松</p>\n<p><a href=\"https://github.com/orangexuhan/os_spoc_answer/blob/master/spoc_12.py\" target=\"_blank\">https://github.com/orangexuhan/os_spoc_answer/blob/master/spoc_12.py</a></p>", "created": "2016-03-30T10:12:18Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i1bzj2xilgm4uk", "children": [], "tag_good_arr": [], "id": "imep17988en48m", "updated": "2016-03-30T10:12:18Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011379 姚炫容 2013011376 龚拓宇</p>\n<p><a href=\"https://github.com/suanrong/os_course_spoc_exercises/blob/master/all/lec12.py\" target=\"_blank\">code</a></p>", "created": "2016-03-30T10:30:03Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0c9nvk0xzc2n3", "children": [], "tag_good_arr": [], "id": "imepo1hleol2uz", "updated": "2016-03-30T10:30:03Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p><a href=\"https://github.com/islandlee/homework/blob/master/w6_2.py\" target=\"_blank\">代码</a></p>\n<p>2013011302 李奕昕</p>\n<p>2013011356 董豪宇</p>", "created": "2016-03-30T10:46:09Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvo2cckb7jb", "children": [], "tag_good_arr": [], "id": "imeq8qixxi0741", "updated": "2016-03-30T10:46:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2013011324 乔奕</p>\n<p>2013011296 贺子松</p>\n<p>参考了前两位同学的代码</p>\n<p><a href=\"https://github.com/Hezisong/os_practice/blob/master/process-simulation.py\" target=\"_blank\">https://github.com/Hezisong/os_practice/blob/master/process-simulation.py</a></p>", "created": "2016-03-30T11:24:49Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i3qk2vs65x276j", "children": [], "tag_good_arr": [], "id": "imermgrh9a21n4", "updated": "2016-03-30T11:24:49Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>杨晓成 2013011383 刘晓鸿 2013010949</p>\n<p>总位置 <a href=\"https://github.com/Yangxc13/v9-cpu/tree/master/05-2-spoc-discussion\">https://github.com/Yangxc13/v9-cpu/tree/master/05-2-spoc-discussion</a><a href=\"https://github.com/Yangxc13/v9-cpu/tree/master/05-2-spoc-discussion\"></a></p>\n<p>代码 <a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/05-2-spoc-discussion/process-cpuio-homework.py\">https://github.com/Yangxc13/v9-cpu/blob/master/05-2-spoc-discussion/process-cpuio-homework.py</a></p>\n<p>执行结果和报告 <a href=\"https://github.com/Yangxc13/v9-cpu/blob/master/05-2-spoc-discussion/Readme.md\">https://github.com/Yangxc13/v9-cpu/blob/master/05-2-spoc-discussion/Readme.md</a></p>", "created": "2016-03-30T12:07:28Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "i0b7d04pl3y6c0", "children": [], "tag_good_arr": [], "id": "imet5bp65os1uq", "updated": "2016-03-30T12:07:28Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011406 谢琛睿</p>\n<p>2013011412 杨明</p>\n<p><a href=\"https://git.oschina.net/akitsuki/ucore_os_lab/blob/master/process.py?dir=0&amp;filepath=process.py&amp;oid=9a1a3c764e5bd8cae0372e44fe21dee11828cdf6&amp;sha=a3bea0eff7000a60aadceef40cee424e827745cc\" target=\"_blank\">code</a></p>", "created": "2016-03-30T12:07:32Z", "bucket_order": 208, "bucket_name": "Week 3/27 - 4/2", "type": "feedback", "tag_good": [], "uid": "ikvcvr6di5i7ma", "children": [], "tag_good_arr": [], "id": "imet5efvo4k5bl", "updated": "2016-03-30T12:07:32Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "imel60ipf9w7ad", "updated": "2016-03-30T08:24:04Z", "config": {}}], "tag_good_arr": [], "id": "ime9jno4sltiw", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 53, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168388773, "default_anonymity": "no"}, "error": null, "aid": "kyv0176ul0jbg"}