{"result": {"folders": ["lab5"], "nr": 821, "data": {"embed_links": []}, "created": "2016-04-22T09:15:20Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-22T09:15:20Z", "data": "inbi4jmohlq48j", "type": "create"}, {"uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-22T09:17:18Z", "data": "inbi72enonm471", "type": "update"}, {"uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-22T09:18:29Z", "data": "inbi8lehk7730y", "type": "update"}, {"to": "inbi4jmmr0r48i", "uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-04-23T07:35:43Z", "data": "incu0ahphvo4pe", "type": "s_answer"}, {"uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-04-23T07:36:02Z", "data": "incu0p8tsh022i", "type": "s_answer_update"}, {"to": "inbi4jmmr0r48i", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-04-23T07:37:06Z", "type": "followup"}, {"to": "inbi4jmmr0r48i", "uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-04-23T09:13:16Z", "type": "feedback"}, {"to": "inbi4jmmr0r48i", "uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-04-23T09:18:57Z", "type": "feedback"}, {"uid": "i0nuu5yhgno5tv", "anon": "no", "when": "2016-04-23T09:20:47Z", "data": "incxrecouww3ca", "type": "s_answer_update"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "i0f24oie8102cr", "subject": "为何有空间没有被释放&#xff1f;", "created": "2016-04-22T09:18:29Z", "content": "<p>在proc.c 中 init_main中&#xff1a;&#xff08;lab5&#xff09;</p>\n<pre>static int\ninit_main(void *arg) {\n    size_t nr_free_pages_store = nr_free_pages();\n    size_t kernel_allocated_store = kallocated();\n\n    int pid = kernel_thread(user_main, NULL, 0);\n    if (pid &lt;= 0) {\n        panic(&#34;create user_main failed.\\n&#34;);\n    }\n\n    while (do_wait(0, NULL) == 0) {\n        schedule();\n    }\n\n    cprintf(&#34;all user-mode processes have quit.\\n&#34;);\n    assert(initproc-&gt;cptr == NULL &amp;&amp; initproc-&gt;yptr == NULL &amp;&amp; initproc-&gt;optr == NULL);\n    assert(nr_process == 2);\n    assert(list_next(&amp;proc_list) == &amp;(initproc-&gt;list_link));\n    assert(list_prev(&amp;proc_list) == &amp;(initproc-&gt;list_link));\n    //assert(nr_free_pages_store == nr_free_pages());\n    //assert(kernel_allocated_store == kallocated());\n    cprintf(&#34;init check memory pass.\\n&#34;);\n    return 0;\n}</pre>\n<p>注释掉的有</p>\n<pre>assert(kernel_allocated_store == kallocated());</pre>\n<p>它们应该相等吧&#xff0c;但是在user_main = forktree的时候&#xff0c;我print出来的时候它们相差2&#xff0c;也就是说有2个page没有free。</p>\n<p>不知道这是因为什么&#xff1f;</p>\n<p>usermain的修改方法详见<a href=\"https://www.piazza.com/class/i5j09fnsl7k5x0?cid=801\" target=\"_blank\">杨志灿给出的解决方法</a>。</p>"}, {"anon": "no", "uid": "i0f24oie8102cr", "subject": "为何有空间没有被释放&#xff1f;", "created": "2016-04-22T09:17:18Z", "content": "<p>在proc.c 中 init_main中&#xff1a;&#xff08;lab5&#xff09;</p>\n<pre>static int\ninit_main(void *arg) {\n    size_t nr_free_pages_store = nr_free_pages();\n    size_t kernel_allocated_store = kallocated();\n\n    int pid = kernel_thread(user_main, NULL, 0);\n    if (pid &lt;= 0) {\n        panic(&#34;create user_main failed.\\n&#34;);\n    }\n\n    while (do_wait(0, NULL) == 0) {\n        schedule();\n    }\n\n    cprintf(&#34;all user-mode processes have quit.\\n&#34;);\n    assert(initproc-&gt;cptr == NULL &amp;&amp; initproc-&gt;yptr == NULL &amp;&amp; initproc-&gt;optr == NULL);\n    assert(nr_process == 2);\n    assert(list_next(&amp;proc_list) == &amp;(initproc-&gt;list_link));\n    assert(list_prev(&amp;proc_list) == &amp;(initproc-&gt;list_link));\n    //assert(nr_free_pages_store == nr_free_pages());\n    //assert(kernel_allocated_store == kallocated());\n    cprintf(&#34;init check memory pass.\\n&#34;);\n    return 0;\n}</pre>\n<p>注释掉的有</p>\n<pre>assert(kernel_allocated_store == kallocated());</pre>\n<p>它们应该相等吧&#xff0c;但是在user_main = forktree的时候&#xff0c;我print出来的时候它们相差2&#xff0c;也就是说有2个page没有free。</p>\n<p>不知道这是因为什么&#xff1f;</p>\n<p>usermain的修改方法详见杨志灿给出的解决方法。</p>"}, {"anon": "no", "uid": "i0f24oie8102cr", "subject": "为何有空间没有被释放&#xff1f;", "created": "2016-04-22T09:15:20Z", "content": "<p>在proc.c 中 init_main中&#xff1a;</p>\n<pre>static int\ninit_main(void *arg) {\n    size_t nr_free_pages_store = nr_free_pages();\n    size_t kernel_allocated_store = kallocated();\n\n    int pid = kernel_thread(user_main, NULL, 0);\n    if (pid &lt;= 0) {\n        panic(&#34;create user_main failed.\\n&#34;);\n    }\n\n    while (do_wait(0, NULL) == 0) {\n        schedule();\n    }\n\n    cprintf(&#34;all user-mode processes have quit.\\n&#34;);\n    assert(initproc-&gt;cptr == NULL &amp;&amp; initproc-&gt;yptr == NULL &amp;&amp; initproc-&gt;optr == NULL);\n    assert(nr_process == 2);\n    assert(list_next(&amp;proc_list) == &amp;(initproc-&gt;list_link));\n    assert(list_prev(&amp;proc_list) == &amp;(initproc-&gt;list_link));\n    //assert(nr_free_pages_store == nr_free_pages());\n    //assert(kernel_allocated_store == kallocated());\n    cprintf(&#34;init check memory pass.\\n&#34;);\n    return 0;\n}</pre>\n<p>注释掉的有</p>\n<pre>assert(kernel_allocated_store == kallocated());</pre>\n<p>它们应该相等吧&#xff0c;但是我print出来的时候它们相差2&#xff0c;也就是说有2个page没有free。</p>\n<p>不知道这是因为什么&#xff1f;</p>"}], "type": "question", "tags": ["lab5", "student"], "tag_good": [], "unique_views": 124, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2016-04-23T07:35:43Z", "bucket_order": 3, "tag_endorse": [], "bucket_name": "Today", "id": "incu0ahkzn44pd", "history": [{"anon": "no", "uid": "i0nuu5yhgno5tv", "subject": "", "created": "2016-04-23T09:20:47Z", "content": "<p></p>"}, {"anon": "no", "uid": "i0nuu5yhgno5tv", "subject": "", "created": "2016-04-23T07:36:02Z", "content": "<p>这两个page是kernel stack的两个page&#xff0c;do_exit里面没有调用put_kstack的函数&#xff0c;ucore自己写错了。</p>"}, {"anon": "no", "uid": "i0nuu5yhgno5tv", "subject": "", "created": "2016-04-23T07:35:43Z", "content": "<p>这两个page是kernel stack的两个page&#xff0c;do_exit里面没有调用put_kstack的函数。</p>"}], "type": "s_answer", "tag_endorse_arr": [], "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>有没有办法修补呢&#xff1f;</p>", "created": "2016-04-23T07:37:06Z", "bucket_order": 206, "bucket_name": "Week 4/17 - 4/23", "type": "followup", "tag_good": [], "uid": "i0f24oie8102cr", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>你直接加上put_kstack在do_exit最后就好了</p>", "created": "2016-04-23T09:13:16Z", "bucket_order": 206, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0nuu5yhgno5tv", "children": [], "tag_good_arr": [], "id": "incxhqgmz7y15b", "updated": "2016-04-23T09:13:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我错了- -应该不是这个问题。因为会最后过继到init_proc。</p>", "created": "2016-04-23T09:18:57Z", "bucket_order": 206, "bucket_name": "Week 4/17 - 4/23", "type": "feedback", "tag_good": [], "uid": "i0nuu5yhgno5tv", "children": [], "tag_good_arr": [], "id": "incxp1speno2wj", "updated": "2016-04-23T09:18:57Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "incu225ygq73ba", "updated": "2016-04-23T07:37:06Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "inbi4jmmr0r48i", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 4, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168578310, "default_anonymity": "no"}, "error": null, "aid": "kyv059fqk2x29u"}