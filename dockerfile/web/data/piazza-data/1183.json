{"result": {"history_size": 2, "folders": ["lecture10"], "nr": 1183, "data": {"embed_links": []}, "created": "2018-03-30T15:58:38Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "iswk6782g923e6", "data": "jfe4ufxsxrb52c", "type": "create", "when": "2018-03-30T15:58:38Z"}, {"anon": "no", "uid": "iswk6782g923e6", "data": "jfepqim4mfn6lp", "type": "update", "when": "2018-03-31T01:43:26Z"}, {"anon": "no", "uid": "isu0wqaoff5125", "to": "jfe4ufxq7cd52b", "type": "followup", "when": "2018-03-31T18:52:20Z"}, {"anon": "no", "uid": "iswk6782g923e6", "to": "jfe4ufxq7cd52b", "type": "feedback", "when": "2018-04-01T03:04:15Z"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "to": "jfe4ufxq7cd52b", "type": "followup", "when": "2018-04-01T06:22:44Z"}, {"anon": "no", "uid": "hcrrjuyequh4bt", "to": "jfe4ufxq7cd52b", "type": "feedback", "when": "2018-04-11T03:59:07Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "iswk6782g923e6", "subject": "x86上LRU置换算法的低效实现方法", "created": "2018-03-31T01:43:26Z", "content": "<p>在lab3中&#xff0c;我们实现了FIFO和Extended Clock算法。这两个算法的实现都比较直接&#xff0c;因为它们所需的信息是比较方便获取的&#xff1a;</p>\n<p></p>\n<ul><li>对于FIFO算法来说&#xff0c;它需要知道的信息就是每个页面创建的先后顺序&#xff0c;而创建页面这件事情完全是软件实现的&#xff0c;因而只需要在做这事的同时顺便维护队列就可以了</li><li>对于Extended Clock算法&#xff0c;它需要知道的是页面创建次序以及页表项中的dirty位和accessed位。前者与FIFO算法是一样的&#xff0c;而dirty位和accessed位都是硬件在访存操作时自动设好的&#xff0c;算法在被调用的时候有现成的可以用</li></ul>\n<p></p>\n<p>LRU算法就不具备这样好的条件了。它需要的信息是每个页面最后一次访问的先后次序&#xff0c;而问题在于硬件不会记录这样的信息&#xff0c;而且一般情况下访存操作中间并没有软件的参与&#xff08;不会有中断的发生&#xff09;&#xff0c;软件也就无法自己来记录这些信息。因此&#xff0c;LRU算法的实现没有那么trivial&#xff08;至少对x86架构应该是这样&#xff09;。</p>\n<p></p>\n<p>对这个问题&#xff0c;唯一可能的思路应该就是搞一些比较tricky的操作让软件去尽可能地收集需要的信息。按照这个思路走&#xff0c;我们可以勉强得到解决方案。</p>\n<p></p>\n<p>一个方案就是让软件在时钟中断中利用硬件标记dirty位和accessed位的特性来估计出页面最后一次访问的大致次序&#xff0c;这个方案很多同学都提到过。这个方案应该是没办法获得准确的LRU信息的&#xff08;相邻两次时钟中断间的多次访存操作间的次序无法确定&#xff09;。</p>\n<p></p>\n<p>我想到的一个可能的方案是&#xff0c;强制每次页访问都触发一个页访问异常&#xff0c;利用这个页访问就可以知道究竟发生了什么样的访存操作&#xff0c;以及这些操作的先后次序。这样的方案能够得到准确的LRU信息。</p>\n<p></p>\n<p>具体地&#xff0c;我将页表项的Present位全部都置为0&#xff0c;将本来的Present位及另外一个标记页面是否换出到外存的位保存到页表项中空闲的三位中。这样&#xff0c;每次访存&#xff0c;都会触发页访问异常。在页访问异常的处理中&#xff0c;我可以收集需要的信息&#xff0c;然后再将页表项Present位复原&#xff08;缺页也可以顺便处理了&#xff09;&#xff0c;使得在中断处理返回后能够进行正常地完成访存。</p>\n<p></p>\n<p>这中间其实有一个问题&#xff1a;我将页表项Present位复原后&#xff0c;不能让它就一直保持这样&#xff0c;否则后续对这个页面的访存操作的信息就没法收集到了。</p>\n<p></p>\n<p>针对这个问题&#xff0c;我的解决办法是在下一次对另外一个页面的访存操作触发的异常中将这个页表项重置为0&#xff08;需要手动将TLB表项设为无效&#xff0c;以免之后的访存操作直接用了TLB缓存的页表项。就是这个地方我调了好久&#xff0c;所幸最后还是反应过来了&#xff09;。显然&#xff0c;我们只能保证下一次访问别的页面会触发页访问异常&#xff0c;因而&#xff0c;我们无法知道在此之前对先前访问的这个页面究竟访问了多少次。不过&#xff0c;我们也很容易发现&#xff0c;连续的对同一个页面的访问的具体次数并不会对LRU算法的结果产生任何影响&#xff0c;我们完全可以把对同一个页面的连续多次访问压缩成一次考虑。</p>\n<p></p>\n<p>至此&#xff0c;整个问题就以一种奇怪的方式解决了&#xff0c;虽然效率很低&#xff08;每次访存操作都要惊动内核&#xff0c;额外执行一大堆代码。由于访存操作在程序里十分密集&#xff0c;我保守估计这个做法会导致效率上降低两三个数量级&#xff09;估计并不会有什么实用价值。大概纯属娱乐。</p>\n<p></p>\n<p><a href=\"https://d1b10bmlvqabco.cloudfront.net/attach/i5j09fnsl7k5x0/iswk6782g923e6/jfe4liqbl9y0/strange_lru.zip\" target=\"_blank\">附件</a>是ucore x86上的一个可能很buggy的实现&#xff08;这个实现通过了由lab3改造而来的测例&#xff09;。</p>\n<p></p>\n<p>欢迎老师们和同学们来交流~</p>\n<p></p>"}, {"anon": "no", "uid": "iswk6782g923e6", "subject": "x86上LRU置换算法的低效实现方法", "created": "2018-03-30T15:58:38Z", "content": "<p>在lab3中&#xff0c;我们实现了FIFO和Extended Clock算法。这两个算法的实现都比较直接&#xff0c;因为它们所需的信息是比较方便获取的&#xff1a;</p>\n<p></p>\n<ul><li>对于FIFO算法来说&#xff0c;它需要知道的信息就是每个页面创建的先后顺序&#xff0c;而创建页面这件事情完全是软件实现的&#xff0c;因而只需要在做这事的同时顺便维护队列就可以了</li><li>对于Extended Clock算法&#xff0c;它需要知道的是页面创建次序以及页表项中的dirty位和accessed位。前者与FIFO算法是一样的&#xff0c;而dirty位和accessed位都是硬件在访存操作时自动设好的&#xff0c;算法在被调用的时候有现成的可以用</li></ul>\n<p></p>\n<p>LRU算法就不具备这样好的条件了。它需要的信息是每个页面最后一次访问的先后次序&#xff0c;而问题在于硬件不会记录这样的信息&#xff0c;而且一般情况下访存操作中间并没有软件的参与&#xff08;不会有中断的发生&#xff09;&#xff0c;软件也就无法自己来记录这些信息。因此&#xff0c;LRU算法的实现没有那么trivial&#xff08;至少对x86架构应该是这样&#xff09;。</p>\n<p></p>\n<p>对这个问题&#xff0c;唯一可能的思路应该就是搞一些比较tricky的操作让软件去尽可能地收集需要的信息。按照这个思路走&#xff0c;我们可以勉强得到解决方案。</p>\n<p></p>\n<p>一个方案就是让软件在时钟中断中利用硬件标记dirty位和accessed位的特性来估计出页面最后一次访问的大致次序&#xff0c;这个方案很多同学都提到过。这个方案应该是没办法获得准确的LRU信息的&#xff08;相邻两次时钟中断间的多次访存操作间的次序无法确定&#xff09;。</p>\n<p></p>\n<p>我想到的一个可能的方案是&#xff0c;强制每次页访问都触发一个页访问异常&#xff0c;利用这个页访问就可以知道究竟发生了什么样的访存操作&#xff0c;以及这些操作的先后次序。这样的方案能够得到准确的LRU信息。</p>\n<p></p>\n<p>具体地&#xff0c;我将页表项的Present位全部都置为0&#xff0c;将本来的Present位及另外一个标记页面是否换出到外存的位保存到页表项中空闲的三位中。这样&#xff0c;每次访存&#xff0c;都会触发页访问异常。在页访问异常的处理中&#xff0c;我可以收集需要的信息&#xff0c;然后再将页表项Present位复原&#xff08;缺页也可以顺便处理了&#xff09;&#xff0c;使得在中断处理返回后能够进行正常地完成访存。</p>\n<p></p>\n<p>这中间其实有一个问题&#xff1a;我将页表项Present位复原后&#xff0c;不能让它就一直保持这样&#xff0c;否则后续对这个页面的访存操作的信息就没法收集到了。</p>\n<p></p>\n<p>针对这个问题&#xff0c;我的解决办法是在下一次对另外一个页面的访存操作触发的异常中将这个页表项重置为0&#xff08;需要手动将TLB表项设为无效&#xff0c;以免之后的访存操作直接用了TLB缓存的页表项。就是这个地方我调了好久&#xff0c;所幸最后还是反应过来了&#xff09;。显然&#xff0c;我们只能保证下一次访问别的页面会触发页访问异常&#xff0c;因而&#xff0c;我们无法知道在此之前对先前访问的这个页面究竟访问了多少次。不过&#xff0c;我们也很容易发现&#xff0c;连续的对同一个页面的访问的具体次数并不会对LRU算法的结果产生任何影响&#xff0c;我们完全可以把对同一个页面的连续多次访问压缩成一次考虑。</p>\n<p></p>\n<p>至此&#xff0c;整个问题就以一种奇怪的方式解决了&#xff0c;虽然效率很低&#xff08;每次访存操作都要惊动内核&#xff0c;额外执行一大堆代码。由于访存操作在程序里十分密集&#xff0c;我保守估计这个做法会导致效率上降低两三个数量级&#xff09;估计并不会有什么实用价值。大概纯属娱乐。</p>\n<p></p>\n<p><a href=\"https://d1b10bmlvqabco.cloudfront.net/attach/i5j09fnsl7k5x0/iswk6782g923e6/jfe4liqbl9y0/strange_lru.zip\" target=\"_blank\">附件</a>是ucore x86上的一个可能很buggy的实现&#xff08;这个实现通过了由lab3改造而来的测例&#xff09;。</p>\n<p></p>\n<p>欢迎老师们和同学们来交流~</p>\n<p></p>"}], "type": "note", "tags": ["lecture10", "student", "unanswered"], "tag_good": [{"role": "instructor", "name": "Yu Chen", "endorser": {}, "admin": true, "photo": "1378950179_35.png", "id": "hcrrjuyequh4bt", "photo_url": "https://cdn-uploads.piazza.com/photos/hcrrjuyequh4bt/1378950179_35.png", "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}], "unique_views": 137, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>“测量”需要成本&#xff0c;为了优化整体性能&#xff0c;我们简化测量的东西&#xff0c;然后做一个近似算法。</p>\n<p></p>\n<p>更好的实现可以修改硬件&#xff1a;在访存的时候&#xff0c;不仅将A位置1&#xff0c;还为页表相应条目设置相应的时间戳&#xff08;时钟计数器的数值即可&#xff09;</p>", "created": "2018-03-31T18:52:20Z", "bucket_order": 199, "bucket_name": "Week 3/25 - 3/31", "type": "followup", "tag_good": [], "uid": "isu0wqaoff5125", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>同意。时钟算法可以说就是LRU算法的近似。我这里描述的是一种为了极致的精度而效率极低的方法。我也觉得如果既要精度又要效率&#xff0c;就只有在硬件层面加入支持。</p>", "created": "2018-04-01T03:04:15Z", "bucket_order": 198, "bucket_name": "Week 4/1 - 4/7", "type": "feedback", "tag_good": [], "uid": "iswk6782g923e6", "children": [], "tag_good_arr": [], "id": "jfg82angweo54r", "updated": "2018-04-01T03:04:15Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>riscv出现后&#xff0c;我们其实是可以修改硬件的。你可以进一步考虑是否能改硬件&#xff08;基于riscv 模拟器即可&#xff09;&#xff0c;也许会做出一种结合硬件的高效页替换算法。</p>", "created": "2018-04-11T03:59:07Z", "bucket_order": 197, "bucket_name": "Week 4/8 - 4/14", "type": "feedback", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "id": "jfukfd2mjc96hm", "updated": "2018-04-11T03:59:07Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "jffqhoaeb6v6ke", "updated": "2018-03-31T18:52:20Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>针对老师上课的讲解和老师还不了解的问题&#xff0c;自己独立思考&#xff0c;并通过实验进行验证。学习就该这样学&#xff0c;非常不错&#xff01;</p>", "created": "2018-04-01T06:22:44Z", "bucket_order": 198, "bucket_name": "Week 4/1 - 4/7", "type": "followup", "tag_good": [], "uid": "hcrrjuyequh4bt", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "jfgf5jgw7qm2ay", "updated": "2018-04-01T06:22:44Z", "config": {}}], "tag_good_arr": ["hcrrjuyequh4bt"], "id": "jfe4ufxq7cd52b", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 3, "num_favorites": 1, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169347549, "default_anonymity": "no"}, "error": null, "aid": "kyv0lqzhv2t2ra"}