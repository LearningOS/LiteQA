{"result": {"folders": ["lab4"], "nr": 1049, "data": {"embed_links": []}, "created": "2017-04-15T14:50:24Z", "bucket_order": 3, "no_answer_followup": 0, "change_log": [{"anon": "no", "uid": "ie7xxz4di3o1ke", "data": "j1jdqey6ume1h5", "type": "create", "when": "2017-04-15T14:50:24Z"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "data": "j1jdy59yjdd1vj", "type": "update", "when": "2017-04-15T14:56:25Z"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "data": "j1jdzipldeh5wu", "type": "update", "when": "2017-04-15T14:57:29Z"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "data": "j1je022jepo1rk", "type": "update", "when": "2017-04-15T14:57:54Z"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "data": "j1je1dag5ox2hl", "type": "update", "when": "2017-04-15T14:58:56Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "j1k6if1qlo54wf", "to": "j1jdqey228h1h4", "type": "i_answer", "when": "2017-04-16T04:16:00Z"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "j1k6iyp6gsvfl", "type": "i_answer_update", "when": "2017-04-16T04:16:26Z"}, {"anon": "no", "uid": "jsiyf76cGzf9", "to": "j1jdqey228h1h4", "type": "followup", "when": "2019-05-01T07:48:25Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题", "created": "2017-04-15T14:58:56Z", "content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到<code>forkret</code>&#xff0c;进而iret到<code>kernel_thread_entry</code>处开始运行<code>main</code>&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行<code>do_exit</code>操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题", "created": "2017-04-15T14:57:54Z", "content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到<code>forkret</code>&#xff0c;进而iret到<code>kernel_thread_entry</code>处开始运行<code>main</code>&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行<code>do_exit</code>操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题", "created": "2017-04-15T14:57:29Z", "content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;<span style=\"text-decoration:underline\">ret</span>时&#xff0c;已经将运行环境的8个寄存器从<span style=\"text-decoration:underline\">from</span>进程的换成了<span style=\"text-decoration:underline\">to</span>进程的&#xff0c;因此在<span style=\"text-decoration:underline\">ret</span>后直接跳转到<code>forkret</code>&#xff0c;进而<span style=\"text-decoration:underline\">iret</span>到<code>kernel_thread_entry</code>处开始运行<code>main</code>&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行<code>do_exit</code>操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题", "created": "2017-04-15T14:56:25Z", "content": "<p></p>\n<pre>local_intr_save(intr_flag);\n{\n    current = proc;\n    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);\n    lcr3(next-&gt;cr3);\n    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));\n}\nlocal_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到forkret&#xff0c;进而iret到kernel_thread_entry处开始运行main&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞&#xff0c;直到main进程执行do_exit操作。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>"}, {"anon": "no", "uid": "ie7xxz4di3o1ke", "subject": "【lab4】proc_run中的中断开闭问题", "created": "2017-04-15T14:50:24Z", "content": "<p></p><pre>local_intr_save(intr_flag);<br />{<br />    current = proc;<br />    load_esp0(next-&gt;kstack &#43; KSTACKSIZE);<br />    lcr3(next-&gt;cr3);<br />    switch_to(&amp;(prev-&gt;context), &amp;(next-&gt;context));<br />}<br />local_intr_restore(intr_flag);</pre>\n<p>这是proc_run中的一段。</p>\n<p></p>\n<p>有2个疑问&#xff1a;</p>\n<p></p>\n<p>①在进行<code>switch_to</code>操作时&#xff0c;ret时&#xff0c;已经将运行环境的8个寄存器从from进程的换成了to进程的&#xff0c;因此在ret后直接跳转到forkret&#xff0c;进而iret到kernel_thread_entry处开始运行main&#xff0c;那么上述代码中的最后一行将迟迟不能执行&#xff0c;也就是说中断被关闭后迟迟不能开启&#xff0c;导致中断堵塞。这是合理的吗&#xff1f;或者是我理解错了&#xff1f;</p>\n<p></p>\n<p>②<code>local_intr_save(intr_flag)</code>是一个宏&#xff0c;其内容为</p>\n<pre>#define local_intr_save(x)   do { x = __intr_save(); } while (0)</pre>\n<p>为什么要采用<code>while(0)</code>这种奇怪的写法&#xff1f;</p>\n<p></p>"}], "type": "question", "tags": ["lab4", "student"], "tag_good": [{"role": "instructor", "name": "Yong XIANG", "endorser": {}, "admin": true, "photo": null, "id": "hdjonbiyfs62ie", "photo_url": null, "us": false, "class_sections": ["课程设计_i5j09fnsl7k5x0", "清华学生_i5j09fnsl7k5x0", "所有老师和助教_i5j09fnsl7k5x0", "os2018spring_i5j09fnsl7k5x0"], "facebook_id": null}, {"role": "student", "name": "王纪开", "endorser": {}, "admin": false, "photo": null, "id": "k6t2yt49jyo348", "photo_url": null, "us": false, "facebook_id": null}], "unique_views": 123, "children": [{"folders": [], "data": {"embed_links": []}, "children": [], "created": "2017-04-16T04:16:00Z", "bucket_order": 3, "tag_endorse": [], "bucket_name": "Today", "id": "j1k6if1lxa04we", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "", "created": "2017-04-16T04:16:26Z", "content": "<p>对于第一个问题&#xff0c;我的理解是&#xff0c;forkret在iret处会有中断现场的恢复。然后就开始正常执行了。请实际跟踪系统在这段的行为&#xff0c;然后回复结果或继续置疑。</p>\n<p></p>\n<p>对于第二个问题&#xff0c;这是为了避免宏展开时可能导致的错误。下面链接有详细的描述&#xff0c;供参考。请实际分析有和没有&#34;do {} while (0)&#34;时&#xff0c;生成的宏展开有什么差别。请回复分析结果。</p>\n<p></p>\n<p><a href=\"http://www.cnblogs.com/Lyush/p/3504559.html\">http://www.cnblogs.com/Lyush/p/3504559.html</a></p>\n<p></p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "", "created": "2017-04-16T04:16:00Z", "content": "<p>对于第一个问题&#xff0c;我的理解是&#xff0c;forkret在iret处会有中断现场的恢复。然后就开始正常执行了。请实际跟踪系统在这段的行为&#xff0c;然后回复结果或继续置疑。</p>\n<p></p>\n<p>对于第二个问题&#xff0c;这是为了避免宏展开时可能导致的错误。下面链接有详细的描述&#xff0c;供参考。请实际分析有和没有&#34;do {} while (0)&#34;时&#xff0c;生成的宏展开有什么差别。请回复分析结果。</p>\n<p></p>"}], "type": "i_answer", "tag_endorse_arr": [], "config": {}, "is_tag_endorse": false}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p>第一个问题&#xff0c;在创建新线程do_fork中&#xff0c;会将tf中的eflags设置成允许中断。所以在forkret时&#xff0c;会恢复eflags寄存器&#xff0c;就能正常执行了</p>", "created": "2019-05-01T07:48:25Z", "bucket_order": 60, "bucket_name": "Week 4/28 - 5/4", "type": "followup", "tag_good": [], "uid": "jsiyf76cGzf9", "children": [], "tag_good_arr": [], "no_answer": 0, "id": "jv4x57oszqh10q", "updated": "2019-05-01T07:48:25Z", "config": {}}], "tag_good_arr": ["hdjonbiyfs62ie", "k6t2yt49jyo348"], "no_answer": 0, "id": "j1jdqey228h1h4", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 4, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643169034015, "default_anonymity": "no"}, "error": null, "aid": "kyv0f127yo5a9"}