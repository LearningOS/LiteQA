{"result": {"history_size": 5, "folders": ["lecture23", "课堂问答", "2016"], "nr": 873, "data": {"embed_links": []}, "created": "2016-05-18T03:10:18Z", "bucket_order": 3, "no_answer_followup": 4, "change_log": [{"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:10:18Z", "data": "iocaj97ct245vd", "type": "create"}, {"to": "iocaj979em5vc", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:10:51Z", "type": "followup"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:11:09Z", "data": "iocakcvqqwx4c5", "type": "update"}, {"to": "iocaj979em5vc", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:11:29Z", "type": "followup"}, {"to": "iocaj979em5vc", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:11:44Z", "type": "followup"}, {"to": "iocaj979em5vc", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:12:04Z", "type": "followup"}, {"to": "iocaj979em5vc", "uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T03:12:15Z", "type": "followup"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-05-18T08:34:44Z", "data": "iocm4hllhz64ml", "type": "update"}, {"to": "iocaj979em5vc", "uid": "i0yuo4o74sx70w", "anon": "no", "when": "2016-05-18T08:41:19Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i0f24oie8102cr", "anon": "no", "when": "2016-05-18T08:48:21Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i0gl5kctugw3xi", "anon": "no", "when": "2016-05-18T08:55:46Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ie7xy71bn7b1s2", "anon": "no", "when": "2016-05-18T08:59:47Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i6w84pnmjCQ", "anon": "no", "when": "2016-05-18T10:51:07Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i21zpwab2z775p", "anon": "no", "when": "2016-05-18T12:22:50Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ikvcvr6di5i7ma", "anon": "no", "when": "2016-05-18T12:51:40Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i6vjwdpfniF", "anon": "no", "when": "2016-05-18T14:45:53Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i6ub5at2geM", "anon": "no", "when": "2016-05-18T23:48:57Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i0ccqbaxwdz75c", "anon": "no", "when": "2016-05-19T02:13:54Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ikvcvqz0jx17m1", "anon": "no", "when": "2016-05-19T02:25:35Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "im4yagyfl3chl", "anon": "no", "when": "2016-05-19T05:14:39Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ikvcvr0o2bs7m3", "anon": "no", "when": "2016-05-19T05:20:56Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ikvcvnzpzq7j7", "anon": "no", "when": "2016-05-19T05:32:23Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i18riqkwrl225m", "anon": "no", "when": "2016-05-19T08:49:16Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i0zaci5voig5h", "anon": "no", "when": "2016-05-19T09:39:22Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i6uaz437IKR", "anon": "no", "when": "2016-05-19T10:03:30Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i242q8ug7vw40x", "anon": "no", "when": "2016-05-19T11:43:32Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i70lz5f0QKm", "anon": "no", "when": "2016-05-19T11:52:51Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i701mss708y", "anon": "no", "when": "2016-05-19T11:55:05Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i1bzj2xilgm4uk", "anon": "no", "when": "2016-05-19T12:04:41Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ikx8y1dzPrM", "anon": "no", "when": "2016-05-19T12:10:35Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i3qk2vs65x276j", "anon": "no", "when": "2016-05-19T13:19:06Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i11v1az5sf83l2", "anon": "no", "when": "2016-05-19T13:23:17Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i6uiksj895B", "anon": "no", "when": "2016-05-19T14:40:09Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "ikwht0mda9v4iu", "anon": "no", "when": "2016-05-20T08:45:09Z", "type": "feedback"}, {"to": "iocaj979em5vc", "uid": "i0hjdkesg9c5z7", "anon": "no", "when": "2016-05-22T09:19:06Z", "type": "feedback"}, {"uid": "hdjonbiyfs62ie", "anon": "no", "when": "2016-06-22T00:53:41Z", "data": "ipq62duefxntm", "type": "update"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "data": "izs3u46wqjjyy", "type": "update", "when": "2017-03-02T08:03:52Z"}], "bucket_name": "Today", "history": [{"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第二十三讲 课堂思考题回答-向勇班", "created": "2017-03-02T08:03:52Z", "content": "<p>请向勇班的同学把“第二十三讲 I/O子系统”中指定小题的回答结果写在此贴中对应题目后面。<br /> <br /><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />第二十三讲的回答的截止时间是明天&#xff08;20160519&#xff09;晚20点前。<br /> <br />要求&#xff1a;分小组完思考题&#xff0c;最多二个人一组&#xff0c;也可以独立回答。依据小组成员学号中最小学号除5后的余数&#xff0c;完成与余数相同的题目。</p>\n<p></p>\n<p>1&#xff09;小组思考题(1-键盘输入)&#xff1a;描述ucore操作系统中“键盘输入”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)&#xff1a;描述ucore操作系统中“到标准输出设备stdout的printf输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />3&#xff09;小组思考题(1-串口输出)&#xff1a;描述ucore操作系统中“串口输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />4&#xff09;小组思考题(1-磁盘文件复制)&#xff1a;描述ucore操作系统中“磁盘文件复制”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />5&#xff09;小组思考题(2)&#xff1a;在模拟环境中实现磁盘调度算法。<br /> <br />优胜者&#xff1a;</p>\n<p></p>\n<p>选择做“1&#xff09;小组思考题(1-键盘输入)”的同学<br />沈哲言 2013011371 叶子鹏 2013011404<br />霍健炜2016110024</p>\n<p></p>\n<p>选择做“2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)”的同学<br />钱迪晨 2013011402 高思达 2013011413<br />2012011307 黄必胜</p>\n<p></p>\n<p>选择做“3&#xff09;小组思考题(1-串口输出)”的同学<br />高博 2012012139 赵涵 2012011383<br />krajna 2014010527</p>\n<p></p>\n<p>选择做“4&#xff09;小组思考题(1-磁盘文件复制)”的同学<br />张浩天 2013011416 郑兆衡2013011389<br />2012080059 金嘉宇 章晔 2012011321<br />郭嘉丞</p>\n<p></p>\n<p>选择做“5&#xff09;小组思考题(2)”的同学<br />王智默 2012011355 徐捷 2012011371<br />马志明 2013011395 王启圣 2013011409</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第二十三讲 课堂思考题回答-向勇班", "created": "2016-06-22T00:53:41Z", "content": "<p>请向勇班的同学把“第二十三讲 I/O子系统”中指定小题的回答结果写在此贴中对应题目后面。<br /> <br /><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />第二十三讲的回答的截止时间是明天&#xff08;20160519&#xff09;晚20点前。<br /> <br />要求&#xff1a;分小组完思考题&#xff0c;最多二个人一组&#xff0c;也可以独立回答。依据小组成员学号中最小学号除5后的余数&#xff0c;完成与余数相同的题目。</p>\n<p></p>\n<p>1&#xff09;小组思考题(1-键盘输入)&#xff1a;描述ucore操作系统中“键盘输入”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)&#xff1a;描述ucore操作系统中“到标准输出设备stdout的printf输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />3&#xff09;小组思考题(1-串口输出)&#xff1a;描述ucore操作系统中“串口输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />4&#xff09;小组思考题(1-磁盘文件复制)&#xff1a;描述ucore操作系统中“磁盘文件复制”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />5&#xff09;小组思考题(2)&#xff1a;在模拟环境中实现磁盘调度算法。<br /> <br />优胜者&#xff1a;</p>\n<p></p>\n<p>选择做“1&#xff09;小组思考题(1-键盘输入)”的同学<br />沈哲言 2013011371 叶子鹏 2013011404<br />霍健炜2016110024</p>\n<p></p>\n<p>选择做“2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)”的同学<br />钱迪晨 2013011402 高思达 2013011413<br />2012011307 黄必胜</p>\n<p></p>\n<p>选择做“3&#xff09;小组思考题(1-串口输出)”的同学<br />高博 2012012139 赵涵 2012011383<br />krajna 2014010527</p>\n<p></p>\n<p>选择做“4&#xff09;小组思考题(1-磁盘文件复制)”的同学<br />张浩天 2013011416 郑兆衡2013011389<br />2012080059 金嘉宇 章晔 2012011321<br />郭嘉丞</p>\n<p></p>\n<p>选择做“5&#xff09;小组思考题(2)”的同学<br />王智默 2012011355 徐捷 2012011371<br />马志明 2013011395 王启圣 2013011409</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第二十三讲 课堂思考题回答-向勇班", "created": "2016-05-18T08:34:44Z", "content": "<p>请向勇班的同学把“第二十三讲 I/O子系统”中指定小题的回答结果写在此贴中对应题目后面。<br /> <br /><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />第二十三讲的回答的截止时间是明天&#xff08;20160519&#xff09;晚20点前。<br /> <br />要求&#xff1a;分小组完思考题&#xff0c;最多二个人一组&#xff0c;也可以独立回答。依据小组成员学号中最小学号除5后的余数&#xff0c;完成与余数相同的题目。</p>\n<p></p>\n<p>1&#xff09;小组思考题(1-键盘输入)&#xff1a;描述ucore操作系统中“键盘输入”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)&#xff1a;描述ucore操作系统中“到标准输出设备stdout的printf输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />3&#xff09;小组思考题(1-串口输出)&#xff1a;描述ucore操作系统中“串口输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />4&#xff09;小组思考题(1-磁盘文件复制)&#xff1a;描述ucore操作系统中“磁盘文件复制”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />5&#xff09;小组思考题(2)&#xff1a;在模拟环境中实现磁盘调度算法。<br /> <br />优胜者&#xff1a;</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第二十三讲 课堂思考题回答-向勇班", "created": "2016-05-18T03:11:09Z", "content": "<p>请向勇班的同学把“第二十三讲 I/O子系统”中指定小题的回答结果写在此贴中对应题目后面。<br /> <br /><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />第二十三讲的回答的截止时间是明天&#xff08;20160519&#xff09;晚20点前。<br /> <br />要求&#xff1a;分小组完思考题&#xff0c;最多二个人一组&#xff0c;也可以独立回答。依据小组成员学号中最小学号除5后的余数&#xff0c;完成与余数相同的题目。</p>\n<p></p>\n<p>1&#xff09;小组思考题(1-键盘输入)&#xff1a;描述ucore操作系统中“键盘输入”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)&#xff1a;描述ucore操作系统中“到标准输出设备stdout的printf输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />3&#xff09;小组思考题(1-串口输出)&#xff1a;描述ucore操作系统中“串口输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />4&#xff09;小组思考题(1-磁盘文件复制)&#xff1a;描述ucore操作系统中“磁盘文件复制”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />5&#xff09;小组思考题(2)&#xff1a;在模拟环境中实现磁盘调度算法。<br /> <br />优胜者&#xff1a;</p>"}, {"anon": "no", "uid": "hdjonbiyfs62ie", "subject": "2016春季-第二十三讲 课堂思考题回答-向勇班", "created": "2016-05-18T03:10:18Z", "content": "<p>请向勇班的同学把“第二十三讲 I/O子系统”中指定小题的回答结果写在此贴中对应题目后面。<br /> <br /><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />第二十三讲的回答的截止时间是明天&#xff08;20160519&#xff09;晚20点前。<br /> <br />要求&#xff1a;分小组完思考题&#xff0c;最多二个人一组&#xff0c;也可以独立回答。依据小组成员学号中最小学号除5后的余数&#xff0c;完成与余数相同的题目。</p>\n<p></p>\n<p>1&#xff09;小组思考题(1-键盘输入)&#xff1a;描述ucore操作系统中“键盘输入”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)&#xff1a;描述ucore操作系统中“到标准输出设备stdout的printf输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />3&#xff09;小组思考题(1-串口输出)&#xff1a;描述ucore操作系统中“串口输出”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />4&#xff09;小组思考题(1-磁盘文件复制)&#xff1a;描述ucore操作系统中“磁盘文件复制”从请求到完成的整个执行过程&#xff0c;并分析I/O过程的时间开销。<br />5&#xff09;小组思考题(2)&#xff1a;在模拟环境中实现磁盘调度算法。<br /> <br />优胜者&#xff1a;</p>"}], "type": "note", "tags": ["2016", "instructor-note", "lecture23", "课堂问答"], "tag_good": [], "unique_views": 189, "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />选择做“1&#xff09;小组思考题(1-键盘输入)”的同学的回答结果写在此贴后面。</p>", "created": "2016-05-18T03:10:51Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>沈哲言 2013011371 叶子鹏 2013011404</p>\n<p></p>\n<p><a href=\"https://github.com/Silver-Shen/OS_SPOC/blob/master/keyboard/report.md\" target=\"_blank\">报告入口</a></p>", "created": "2016-05-18T08:48:21Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0f24oie8102cr", "children": [], "tag_good_arr": [], "id": "iocmlzjoury27h", "updated": "2016-05-18T08:48:21Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011333 俞寒轩</p>\n<p>2012011306 肖迪</p>\n<p></p>\n<p><a href=\"https://github.com/yuhx/OS_homework/blob/master/lec23.md\" target=\"_blank\">Report</a></p>", "created": "2016-05-19T02:25:35Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ikvcvqz0jx17m1", "children": [], "tag_good_arr": [], "id": "iododm17vs043s", "updated": "2016-05-19T02:25:35Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<pre>static void trap_dispatch(struct trapframe *tf) {\n    char c;\n    int ret=0;\n    switch (tf-&gt;tf_trapno) {\n…\n    case IRQ_OFFSET &#43; IRQ_KBD:\n        c = cons_getc();\n        //cprintf(&#34;kbd [%03d] %c\\n&#34;, c, c);\n        {\n          extern void dev_stdin_write(char c);\n          dev_stdin_write(c);\n        }\n        break;\n…\n    }\n\n}</pre>\n<p>由中断处理trap_dispatch到cons_getc()&#xff0c;再到kbd_intr()。<br />kern/driver/console.c:405</p>\n<pre>/* kbd_intr - try to feed input characters from keyboard */\nstatic void kbd_intr(void) {\n    cons_intr(kbd_proc_data);\n}</pre>\n<p>kbd_intr()用到cons_intr与kbd_proc_data函数。</p>\n<p></p>\n<p> kern/driver/console.c:223</p>\n<pre>/* *\n * cons_intr - called by device interrupt routines to feed input\n * characters into the circular console input buffer.\n * */\nstatic void cons_intr(int (*proc)(void)) {\n    int c;\n    while ((c = (*proc)()) != -1) {\n        if (c != 0) {\n            cons.buf[cons.wpos &#43;&#43;] = c;\n            if (cons.wpos == CONSBUFSIZE) {\n                cons.wpos = 0;\n            }\n        }\n    }\n}</pre>\n<p> kern/driver/console.c:357</p>\n<pre>/* *\n * kbd_proc_data - get data from keyboard\n *\n * The kbd_proc_data() function gets data from the keyboard.\n * If we finish a character, return it, else 0. And return -1 if no data.\n * */\nstatic int kbd_proc_data(void) {\n    int c;\n    uint8_t data;\n    static uint32_t shift;\n \n    if ((inb(KBSTATP) &amp; KBS_DIB) == 0) {\n        return -1;\n    }\n \n    data = inb(KBDATAP);\n \n    if (data == 0xE0) {\n        // E0 escape character\n        shift |= E0ESC;\n        return 0;\n    } else if (data &amp; 0x80) {\n        // Key released\n        data = (shift &amp; E0ESC ? data : data &amp; 0x7F);\n        shift &amp;= ~(shiftcode[data] | E0ESC);\n        return 0;\n    } else if (shift &amp; E0ESC) {\n        // Last character was an E0 escape; or with 0x80\n        data |= 0x80;\n        shift &amp;= ~E0ESC;\n    }\n \n    shift |= shiftcode[data];\n    shift ^= togglecode[data];\n \n    c = charcode[shift &amp; (CTL | SHIFT)][data];\n    if (shift &amp; CAPSLOCK) {\n        if (&#39;a&#39; &lt;= c &amp;&amp; c &lt;= &#39;z&#39;)\n            c &#43;= &#39;A&#39; - &#39;a&#39;;\n        else if (&#39;A&#39; &lt;= c &amp;&amp; c &lt;= &#39;Z&#39;)\n            c &#43;= &#39;a&#39; - &#39;A&#39;;\n    }\n \n    // Process special keys\n    // Ctrl-Alt-Del: reboot\n    if (!(~shift &amp; (CTL | ALT)) &amp;&amp; c == KEY_DEL) {\n        cprintf(&#34;Rebooting!\\n&#34;);\n        outb(0x92, 0x3); // courtesy of Chris Frost\n    }\n    return c;\n} </pre>\n<p></p>\n<p></p>\n<p>这是用kbd_proc_data函数从键盘获取字符&#xff0c;在cons_intr里不断放字符到circular console input buffer&#xff08;console循环输入缓存&#xff1f;&#xff09;&#xff0c;直到键盘输入缓存没有数据&#xff08;kbd_proc_data返回-1&#xff09;。</p>\n<p></p>\n<p>kbd_proc_data函数用inb(KBDATAP)&#xff0c;从键盘数据输入端口&#xff0c;获取8 bit 的数据&#xff0c;解码为各种字符&#xff0c;也有组合键&#xff0c;shift- alt- ctrl-等。“static uint32_t shift; ”用来记录上次未释放的ctrl&#xff0c;alt&#xff0c;shift。不完整的键&#xff0c;例如只按了shift&#xff0c;kbd_proc_data会返回0&#xff0c;cons_intr的while loop里一直等下个键出现。</p>\n<p> </p>\n<p>在cons_intr()里&#xff0c;按键的数据写到cons里的buf。</p>\n<pre>static struct {\n    uint8_t buf[CONSBUFSIZE];\n    uint32_t rpos;\n    uint32_t wpos;\n} cons;</pre>\n<p> </p>\n<p> cons_getc() 里&#xff0c;在完成kbd_intr()后&#xff0c;返回buf里下一个的字符。</p>\n<pre>int cons_getc(void) {\n    int c = 0;\n    bool intr_flag;\n    local_intr_save(intr_flag);\n    {\n        // poll for any pending input characters,\n        // so that this function works even when interrupts are disabled\n        // (e.g., when called from the kernel monitor).\n        serial_intr();\n        kbd_intr();\n\n        // grab the next character from the input buffer.\n        if (cons.rpos != cons.wpos) {\n            c = cons.buf[cons.rpos &#43;&#43;];\n            if (cons.rpos == CONSBUFSIZE) {\n                cons.rpos = 0;\n            }\n        }\n    }\n    local_intr_restore(intr_flag);\n    return c;\n}</pre>\n<p>然后在trap_dispatch里&#xff0c;“dev_stdin_write(c);”把返回的字符放到标准输入的缓存。还有唤醒等待键盘输入的进程&#xff0c;就处理完键盘中断了。</p>\n<pre>void dev_stdin_write(char c) {\n    bool intr_flag;\n    if (c != &#39;\\0&#39;) {\n        local_intr_save(intr_flag);\n        {\n            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;\n            if (p_wpos - p_rpos &lt; STDIN_BUFSIZE) {\n                p_wpos &#43;&#43;;\n            }\n            if (!wait_queue_empty(wait_queue)) {\n                wakeup_queue(wait_queue, WT_KBD, 1);\n            }\n        }\n        local_intr_restore(intr_flag);\n    }\n}</pre>\n<p></p>", "created": "2016-05-19T05:14:39Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "im4yagyfl3chl", "children": [], "tag_good_arr": [], "id": "ioduf0llyud2jm", "updated": "2016-05-19T05:14:39Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p></p>\n<p>尚智伟 周恩泽</p>\n<p></p>\n<p><a href=\"https://github.com/shangzw12/os_hw/blob/master/lecture23/report.md\" target=\"_blank\">report</a></p>", "created": "2016-05-19T05:20:56Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ikvcvr0o2bs7m3", "children": [], "tag_good_arr": [], "id": "iodun3ygr6c5s5", "updated": "2016-05-19T05:20:56Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>金贤林 2012080056</p>\n<p>https://github.com/jinxl12/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md</p>", "created": "2016-05-19T10:03:30Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i6uaz437IKR", "children": [], "tag_good_arr": [], "id": "ioe4qhp06vp55p", "updated": "2016-05-19T10:03:30Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011324 乔奕 2013011296 贺子松</p>\n<p><a href=\"https://github.com/Hezisong/os_practice/blob/master/keyboard.md\" target=\"_blank\">https://github.com/Hezisong/os_practice/blob/master/keyboard.md</a></p>", "created": "2016-05-19T13:19:06Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i3qk2vs65x276j", "children": [], "tag_good_arr": [], "id": "ioebq1g1vb41qp", "updated": "2016-05-19T13:19:06Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>赖国堃 2012011372</p>\n<p></p>\n<p>整个处理过程为&#xff0c;中断处理 trap_dispatch() -&gt; 获取字符 cons_getc() -&gt; kbd_intr() -&gt; cons_intr() -&gt; 缓存字符 dev_stdin_write() -&gt; 唤醒等待线程 wakeup_queue()</p>\n<p>由于键盘操作较少&#xff0c;所以占用处理时间比重比较大的是中断处理部分。</p>", "created": "2016-05-19T14:40:09Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i6uiksj895B", "children": [], "tag_good_arr": [], "id": "ioeem93i76r30m", "updated": "2016-05-19T14:40:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012011271 宋佳铭</p>\n<p>2012011284 章彦恺</p>\n<p></p>\n<p> trap_dispatch() -&gt; cons_getc() -&gt; kbd_intr() -&gt; cons_intr() </p>", "created": "2016-05-20T08:45:09Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ikwht0mda9v4iu", "children": [], "tag_good_arr": [], "id": "iofhdkqmicc6h5", "updated": "2016-05-20T08:45:09Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>王苏 2013011301</p>\n<p>王哲 2013012443</p>\n<p></p>\n<p><a href=\"https://github.com/wangsu13/OS/blob/master/23.md\" target=\"_blank\">report</a></p>", "created": "2016-05-22T09:19:06Z", "bucket_order": 291, "bucket_name": "Week 5/22 - 5/28", "type": "feedback", "tag_good": [], "uid": "i0hjdkesg9c5z7", "children": [], "tag_good_arr": [], "id": "ioidgxr9ta04gj", "updated": "2016-05-22T09:19:06Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "iocajyifvlg2oq", "updated": "2016-05-18T03:10:51Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />选择做“2&#xff09;小组思考题(1-到标准输入设备stdout的printf输出)”的同学的回答结果写在此贴后面。<br /><br /></p>", "created": "2016-05-18T03:11:29Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>钱迪晨 2013011402 高思达 2013011413</p>\n<p>报告入口&#xff1a;</p>\n<p><a href=\"https://github.com/nathenqian/ucore_spoc/blob/master/spoc_23/stdout分析.md\" target=\"_blank\">https://github.com/nathenqian/ucore_spoc/blob/master/spoc_23/stdout分析.md</a></p>", "created": "2016-05-18T08:55:46Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0gl5kctugw3xi", "children": [], "tag_good_arr": [], "id": "iocmvipcnug3ar", "updated": "2016-05-18T08:55:46Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011297杨青霖</p>\n<p>键盘输入触发KBD中断,然后trap_dispatch 接受字符 con_getc(), 再写入 stdin&#xff0c;dev_stdin_write将内容 写入到 stdin_buffe&#xff0c;进程被唤醒后 从 stdin_buffer 中读入字符到自己的 buffer。时间开销主要在进程切换。</p>", "created": "2016-05-19T08:49:16Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i18riqkwrl225m", "children": [], "tag_good_arr": [], "id": "ioe230qezel1vb", "updated": "2016-05-19T08:49:16Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2013011356 董豪宇</p>\n<p>2013011302 李奕昕</p>\n<p></p>\n<p><a href=\"https://github.com/donghy/os_exercise/blob/master/io_system.md\" target=\"_blank\">https://github.com/donghy/os_exercise/blob/master/io_system.md</a></p>", "created": "2016-05-19T11:43:32Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i242q8ug7vw40x", "children": [], "tag_good_arr": [], "id": "ioe8b51az293nk", "updated": "2016-05-19T11:43:32Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011307 黄必胜</p>\n<p>追踪cprintf函数的执行过程如下<br />kern/libs/stdio.c: <br />--&gt; cprintf() <br />--&gt; vcprintf()</p>\n<p>libs/printfmt.c: <br />--&gt; vprintfmt() 其中调用了cputch函数</p>\n<p>user/libs/stdio.c: <br />--&gt; cputch()　writes a single character &#64;c to stdout</p>\n<p>user/libs/syscall.c: <br />--&gt; sys_putc() <br />--&gt; syscall() 调用系统调用SYS_putc</p>\n<p>kern/trap/trap.c<br />--&gt; trap()<br />--&gt; trap_dispatch()</p>\n<p>kern/syscall/syscall.c<br />--&gt; syscall()<br />--&gt; sys_putc()</p>\n<p>kern/libs/stdio.c<br />--&gt; cputchar()</p>\n<p>kern/driver/console.c<br />--&gt; cons_putc() 从而告诉显示器驱动需要发送的字符<br /> --&gt; lpt_putc() <br /> --&gt; cga_putc() <br /> --&gt; serial_putc()</p>\n<p></p>", "created": "2016-05-19T11:52:51Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i70lz5f0QKm", "children": [], "tag_good_arr": [], "id": "ioe8n4dmjjl3z", "updated": "2016-05-19T11:52:51Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2012011302 陈伯乐 &amp; 2012011309 崔岩</p>\n<p></p>\n<p>标准输出会调用sys_put函数, 由这个函数调用系统调用sys_putc<span style=\"font-family:monospace\">,</span>最终调用cons_puts向控制台输出。输出过程中通过crt_pos记录crt_buf<span style=\"font-family:monospace\">&#xff08;</span>缓冲区&#xff09;中最后一个字符的位置&#xff0c;向特定位置进行串口的输出。</p>\n<p></p>", "created": "2016-05-19T11:55:05Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i701mss708y", "children": [], "tag_good_arr": [], "id": "ioe8pz86fzt6g3", "updated": "2016-05-19T11:55:05Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "iocaks6ud972wf", "updated": "2016-05-18T03:11:29Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />选择做“3&#xff09;小组思考题(1-串口输出)”的同学的回答结果写在此贴后面。<br /><br /></p>", "created": "2016-05-18T03:11:44Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>高博 2012012139</p>\n<p>赵涵 2012011383</p>\n<p></p>\n<p>看到bootmain.c里面有个serial_putc&#xff0c;里面完成了串口输出的任务。</p>\n<p>输出一个字符流程如下&#xff1a;<br />1. 读I/O端口地址(0x3f8&#43;5)获得LSR寄存器的值&#xff0c;等待串口输出准备好<br />2. 向I/O端口地址0x3f8发出要输出的字符&#xff1b;</p>", "created": "2016-05-18T14:45:53Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i6vjwdpfniF", "children": [], "tag_good_arr": [], "id": "ioczdrxkuoqux", "updated": "2016-05-18T14:45:53Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>甄显安 2012080060</p>\n<p>陆喆 2012011308</p>\n<p>在 kern/driver/console.c中&#xff0c;实现了向串口输出的功能 <a href=\"https://raw.githubusercontent.com/lbx6z/os_course_spoc_exercises/master/serial_putc.png\" target=\"_blank\">serial_putc()</a></p>\n<p>学习<a href=\"http://www.cnblogs.com/fatsheep9146/p/5066690.html\" target=\"_blank\">http://www.cnblogs.com/fatsheep9146/p/5066690.html</a>&#xff0c;可知&#xff1a;</p>\n<ol><li>等待数据缓冲寄存器为空&#xff1a;读取0x3fd端口&#xff0c;即line status registers&#xff0c;的内容&#xff0c;并且判断它的bit5是否为1&#xff0c;即发送数据缓冲寄存器是否为空。如果为空&#xff0c;则计算机可以发送下一个数据给端口。</li><li>发送数据到端口0x3f8。</li></ol>\n<p>关于时间开销&#xff1a;查看serial_putc_sub()&#xff0c;需要等待数据缓冲区清空&#xff0c;至多delay 12800次。</p>\n<p></p>", "created": "2016-05-19T05:32:23Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ikvcvnzpzq7j7", "children": [], "tag_good_arr": [], "id": "iodv1u69y1z68y", "updated": "2016-05-19T05:32:23Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>krajna 2014010527</p>\n<p></p>\n<p>串口输出调用在kern/lib/stdio.c中的cputchar()中。其中的cons_putc()跳转到console.c中的serial_putc()中。这个函数</p>\n<p>将字符输出到串口端口。</p>\n<p></p>\n<p>在serial_putc()中进一步调用静态函数</p>\n<pre>static void serial_putc_sub(int c) {\n    int i;\n    for (i = 0; !(inb(COM1 &#43; COM_LSR) &amp; COM_LSR_TXRDY) &amp;&amp; i &lt; 12800; i &#43;&#43;) {\n        delay();\n    }\n    outb(COM1 &#43; COM_TX, c);\n}</pre>\n<p>其中inb(COM1&#43;COM_LSR)&amp;COM_LSR_TXRDY是检查数据缓冲寄存器是否为空&#xff0c;如果空则向串口输出端口发送字符&#xff0c;通过调用outb()函数&#xff0c;否则进入等待。</p>\n<p></p>\n<p>那个谜之12800我认为应该是串口等待最多12800*delay()这么长时间&#xff0c;否则就向串口中写入数据&#xff0c;不考虑缓冲区是否为空。</p>\n<p>这样就限制了串口输出的时间开销。</p>", "created": "2016-05-19T12:10:35Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ikx8y1dzPrM", "children": [], "tag_good_arr": [], "id": "ioe99wxe3ts7n1", "updated": "2016-05-19T12:10:35Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "iocal3q5yp24jw", "updated": "2016-05-18T03:11:44Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />选择做“4&#xff09;小组思考题(1-磁盘文件复制)”的同学的回答结果写在此贴后面。</p>", "created": "2016-05-18T03:12:04Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>张浩天 2013011416 郑兆衡2013011389</p>\n<p></p>\n<p><a href=\"https://github.com/ZhengZhaoHeng/os_2016/blob/master/lec23/answer.md\" target=\"_blank\">answer.md</a></p>", "created": "2016-05-18T08:41:19Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0yuo4o74sx70w", "children": [], "tag_good_arr": [], "id": "iocmcxr4gv9sh", "updated": "2016-05-18T08:41:19Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>我们假设有一个用户态程序cp, </p>\n<p>那么首先会有一个打开文件的过程</p>\n<p>对于读的文件: sys_open-&gt;sysfile_open-&gt;file_open-&gt;vfs_open-&gt;sfs_openfile</p>\n<p>如果写新文件: sys_open-&gt;sysfile_open-&gt;file_open-&gt;vfs_open-&gt;vop_create(但是sfs没有支持到这一步, 会炸掉)</p>\n<p>然后就是调用sys_read和sys_write.</p>\n<p>通过相似的调用链会导出到sfs_read和sfs_write上.</p>\n<p>之后会调用到sfs_rwlock_nolock, 通过dev抽象到disk0_io, 最后会调用到ide_read/write_secs, 其中的ide_wait_ready进行了轮询操作</p>\n<p></p>", "created": "2016-05-18T08:59:47Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ie7xy71bn7b1s2", "children": [], "tag_good_arr": [], "id": "iocn0p2oqfs5j4", "updated": "2016-05-18T08:59:47Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2012080059 金嘉宇 章晔 2012011321</p>\n<p>磁盘文件复制过程&#xff1a;</p>\n<p>打开被复制文件&#xff1a;</p>\n<ul><li>用户态&#xff1a;\n<ul><li>打开&#xff1a;调用open()获得文件描述符 -&gt; 用户态sys_open() -&gt; syscall(SYS_OPEN, ...)进入内核态&#xff1b;</li><li>读写&#xff1a;read()&#xff0c;write() -&gt; 用户态sys_read(),sys_write() -&gt; syscall(SYS_OPEN, ...)进入内核态&#xff1b;</li></ul>\n</li><li>内核态&#xff1a;\n<ul><li>打开&#xff1a;通过中断处理历程&#xff0c;sys_open()-&gt;sysfile_open()-&gt;file_open()&#xff1b;</li><li>读写&#xff1a;sys_read/write() -&gt; sysfile_read/write()-&gt; file_read/write()&#xff1b;</li></ul>\n</li><li>抽象层&#xff1a;\n<ul><li>打开&#xff1a;file_open() -&gt; vfs_open()寻找inode等&#xff1b;</li><li>读写&#xff1a;file_read/write() -&gt;　vfs_read/write()&#xff1b;</li></ul>\n</li><li>SFS层&#xff1a;\n<ul><li>打开&#xff1a;sfs_opendir()&#xff0c;sfs_openfile()&#xff0c;sfs_load_inode()&#xff1b;</li><li> 读写&#xff1a;sfs_load_inode-&gt;sfs_io()-&gt;sfs_r/wbuf&#xff08;磁盘块儿缓存区&#xff09;-&gt;sfs_rwblock_nolock&#xff08;读取块&#xff09;;</li></ul>\n</li><li>I/O层&#xff1a;dop_io();disk0_io() :检验参数 -&gt; disk0_read_blks_nolock() &#xff1a;</li><li>驱动层&#xff1a;ide_read_secs() :读取扇区&#xff1b;</li></ul>", "created": "2016-05-18T23:48:57Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i6ub5at2geM", "children": [], "tag_good_arr": [], "id": "iodis5timdr4dc", "updated": "2016-05-18T23:48:57Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>何乐 2013011351 郭栋 2013011334</p>\n<p>用户程序所使用的标准库中包含open()&#xff0c;read()&#xff0c;write()等磁盘复制需要的函数&#xff0c;分别通过sys_open()&#xff0c;sys_read()&#xff0c;sys_write()进入syscall系统调用&#xff0c;而进入内核态。</p>\n<p>内核态中有sys_open()-&gt;file_open()-&gt;vfs_open()进入vfs层&#xff0c;read&#xff0c;write也类似。</p>\n<p>到sfs层sfs_openfile()&#xff0c;I/O层disk0_io()&#xff0c;disk0_read_blks_nolock()&#xff0c;驱动层ide_read_secs()&#xff0c;ide_write_secs()。</p>\n<p>大体调用顺序是&#xff1a;</p>\n<p>open()库函数-&gt;sys_open()中断进入系统调用-&gt;syscall()系统调用-&gt;sysfile_open()-&gt;file_open()找到指定文件</p>\n<p>-&gt;vfs_open()-&gt;sfsopen()-&gt;disk0_io()-&gt;ide_read_secs()</p>\n<p>read()&#xff0c;write()大体相似</p>", "created": "2016-05-19T02:13:54Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0ccqbaxwdz75c", "children": [], "tag_good_arr": [], "id": "iodnykr2j225u9", "updated": "2016-05-19T02:13:54Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>朱新瑞 2013011411 朱俸民2012011894</p>\n<p>https://github.com/paulzfm/os_course_spoc_exercises/blob/master/SPOC23.md</p>", "created": "2016-05-19T09:39:22Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i0zaci5voig5h", "children": [], "tag_good_arr": [], "id": "ioe3vghvrpv2cj", "updated": "2016-05-19T09:39:22Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>2013011355徐涵2013011339白家松</p>\n<p>用户态→库函数read/write接口→系统调用&#xff08;内核态&#xff09;→抽象层→简单文件系统层&#xff08;SFS层&#xff09;→IO层→设备驱动层。</p>\n<p>打开、读取、修改文件三种操作的流程基本类似&#xff0c;仅以其中打开文件一种为例展示一下执行过程&#xff1a;</p>\n<ol><li><span style=\"text-decoration:underline\"></span>用户态&#xff1a;open() -&gt; sys_open() -&gt; syscall(SYS_OPEN...)</li><li>内核态&#xff1a;-&gt;sys_open() -&gt; sysfile_open() -&gt;file_open()</li><li>抽象层&#xff1a;-&gt; vfs_open()</li><li>SFS层&#xff1a;-&gt; sfs_opendir/openfile/load_inode()</li><li>IO层&#xff1a;disk0_io() -&gt; disk0_read_blk_nolock()</li><li>设备驱动层&#xff1a;ide_read_secs()</li></ol>\n<p>IO时间开销&#xff1a;由于在设备驱动层一级使用顺序访问的方式来进行磁盘的读写所以大部分的开销集中在这一部分</p>", "created": "2016-05-19T12:04:41Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i1bzj2xilgm4uk", "children": [], "tag_good_arr": [], "id": "ioe92bstcrd1wl", "updated": "2016-05-19T12:04:41Z", "config": {}}], "tag_good_arr": [], "no_answer": 1, "id": "iocalizfyv7cw", "updated": "2016-05-18T03:12:04Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "no_upvotes": 0, "subject": "<p><a href=\"https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题\">https://github.com/chyyuu/os_course_spoc_exercises/blob/master/all/10-1-spoc-discussion.md#小组思考题</a></p>\n<p><br />选择做“5&#xff09;小组思考题(2)”的同学的回答结果写在此贴后面。</p>", "created": "2016-05-18T03:12:15Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "followup", "tag_good": [], "uid": "hdjonbiyfs62ie", "children": [{"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>王智默 2012011355</p>\n<p>徐捷 2012011371</p>\n<p></p>\n<p>代码: <a href=\"http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab8/disksim-homework.py\">http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab8/disksim-homework.py</a></p>\n<p>报告: <a href=\"http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab8/disksim-homework.md\">http://172.16.13.236/wzm_andy/ucore_lab/blob/master/related_info/lab8/disksim-homework.md</a></p>", "created": "2016-05-18T10:51:07Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i6w84pnmjCQ", "children": [], "tag_good_arr": [], "id": "iocqzvehuuc1zj", "updated": "2016-05-18T10:51:07Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>马志明 2013011395</p>\n<p>王启圣 2013011409</p>\n<p></p>\n<p>代码&#xff1a;<a href=\"https://github.com/mazm13/os_work/blob/master/Disk/disksim-homework.py\">https://github.com/mazm13/os_work/blob/master/Disk/disksim-homework.py</a><a href=\"https://github.com/mazm13/os_work/blob/master/Disk/disksim-homework.py\" target=\"_blank\"></a></p>\n<p>问题回答&#xff1a;<a href=\"https://github.com/mazm13/os_work/blob/master/Disk/answer.md\" target=\"_blank\">https://github.com/mazm13/os_work/blob/master/Disk/answer.md</a></p>", "created": "2016-05-18T12:22:50Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i21zpwab2z775p", "children": [], "tag_good_arr": [], "id": "iocu9t8rrrwwr", "updated": "2016-05-18T12:22:50Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p>杨明 2013011412  谢琛睿 2013011406</p>\n<p><a href=\"https://git.oschina.net/akitsuki/ucore_os_lab/blob/master/report_disksim.md?dir=0&amp;filepath=report_disksim.md&amp;oid=99cc649ddd88e41e707e0aaddae2d72148e9ca3d&amp;sha=f1ca929aef9493ba3c2056e813d450f56590dbeb\" target=\"_blank\">report</a></p>", "created": "2016-05-18T12:51:40Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "ikvcvr6di5i7ma", "children": [], "tag_good_arr": [], "id": "iocvaw41nd92xf", "updated": "2016-05-18T12:51:40Z", "config": {}}, {"anon": "no", "folders": [], "data": {"embed_links": null}, "subject": "<p></p>\n<p>2013011310 余翔</p>\n<p>2013011308 林婕茵</p>\n<p><a href=\"https://github.com/yxfish13/os_homework/blob/master/Untitled.md\" target=\"_blank\">report</a></p>\n<p><a href=\"https://github.com/yxfish13/os_homework/blob/master/disksim.py\" target=\"_blank\">code</a></p>", "created": "2016-05-19T13:23:17Z", "bucket_order": 292, "bucket_name": "Week 5/15 - 5/21", "type": "feedback", "tag_good": [], "uid": "i11v1az5sf83l2", "children": [], "tag_good_arr": [], "id": "ioebves4y523dy", "updated": "2016-05-19T13:23:17Z", "config": {}}], "tag_good_arr": [], "no_answer": 0, "id": "iocalr75fp84qa", "updated": "2016-05-18T03:12:15Z", "config": {}}], "tag_good_arr": [], "id": "iocaj979em5vc", "config": {}, "status": "active", "drafts": null, "request_instructor": 0, "request_instructor_me": false, "bookmarked": 30, "num_favorites": 0, "my_favorite": false, "is_bookmarked": false, "is_tag_good": false, "q_edits": [], "i_edits": [], "s_edits": [], "t": 1643168667718, "default_anonymity": "no"}, "error": null, "aid": "kyv076favt32bv"}